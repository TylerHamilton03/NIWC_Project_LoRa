
Lora_example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039c8  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003ba0  08003ba0  00004ba0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003be0  08003be0  00020594  2**0
                  CONTENTS
  4 .ARM          00000008  08003be0  08003be0  00004be0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003be8  08003be8  00020594  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003be8  08003be8  00004be8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003bec  08003bec  00004bec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0001b594  20000000  08003bf0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b0  2001b594  0801f184  00020594  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001b744  0801f184  00020744  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020594  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012e97  00000000  00000000  000205c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002491  00000000  00000000  0003345b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001080  00000000  00000000  000358f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ce8  00000000  00000000  00036970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f4ce  00000000  00000000  00037658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001322f  00000000  00000000  00056b26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cf858  00000000  00000000  00069d55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001395ad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004650  00000000  00000000  001395f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0013dc40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2001b594 	.word	0x2001b594
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08003b88 	.word	0x08003b88

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2001b598 	.word	0x2001b598
 8000214:	08003b88 	.word	0x08003b88

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050c:	f000 fba1 	bl	8000c52 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000510:	f000 f818 	bl	8000544 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000514:	f000 f956 	bl	80007c4 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000518:	f000 f898 	bl	800064c <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 800051c:	f000 f8e0 	bl	80006e0 <MX_USART1_UART_Init>
  MX_TIM16_Init();
 8000520:	f000 f92a 	bl	8000778 <MX_TIM16_Init>
  MX_DAC1_Init();
 8000524:	f000 f858 	bl	80005d8 <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000528:	2100      	movs	r1, #0
 800052a:	4804      	ldr	r0, [pc, #16]	@ (800053c <main+0x34>)
 800052c:	f000 fd34 	bl	8000f98 <HAL_DAC_Start>

//  // Start timer (for non-interrupt)
//  HAL_TIM_Base_Start(&htim16);

  // Start timer (for interrupt)
  HAL_TIM_Base_Start_IT(&htim16);
 8000530:	4803      	ldr	r0, [pc, #12]	@ (8000540 <main+0x38>)
 8000532:	f002 f9b7 	bl	80028a4 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000536:	bf00      	nop
 8000538:	e7fd      	b.n	8000536 <main+0x2e>
 800053a:	bf00      	nop
 800053c:	2001b5b0 	.word	0x2001b5b0
 8000540:	2001b6ec 	.word	0x2001b6ec

08000544 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b094      	sub	sp, #80	@ 0x50
 8000548:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054a:	f107 0318 	add.w	r3, r7, #24
 800054e:	2238      	movs	r2, #56	@ 0x38
 8000550:	2100      	movs	r1, #0
 8000552:	4618      	mov	r0, r3
 8000554:	f003 faec 	bl	8003b30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000558:	1d3b      	adds	r3, r7, #4
 800055a:	2200      	movs	r2, #0
 800055c:	601a      	str	r2, [r3, #0]
 800055e:	605a      	str	r2, [r3, #4]
 8000560:	609a      	str	r2, [r3, #8]
 8000562:	60da      	str	r2, [r3, #12]
 8000564:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000566:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800056a:	f001 f925 	bl	80017b8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800056e:	2301      	movs	r3, #1
 8000570:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000572:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000576:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000578:	2302      	movs	r3, #2
 800057a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800057c:	2303      	movs	r3, #3
 800057e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV8;
 8000580:	2308      	movs	r3, #8
 8000582:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000584:	2364      	movs	r3, #100	@ 0x64
 8000586:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000588:	2302      	movs	r3, #2
 800058a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800058c:	2302      	movs	r3, #2
 800058e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000590:	2302      	movs	r3, #2
 8000592:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000594:	f107 0318 	add.w	r3, r7, #24
 8000598:	4618      	mov	r0, r3
 800059a:	f001 f9c1 	bl	8001920 <HAL_RCC_OscConfig>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d001      	beq.n	80005a8 <SystemClock_Config+0x64>
  {
    Error_Handler();
 80005a4:	f000 f9b2 	bl	800090c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a8:	230f      	movs	r3, #15
 80005aa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ac:	2303      	movs	r3, #3
 80005ae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b0:	2300      	movs	r3, #0
 80005b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005b4:	2300      	movs	r3, #0
 80005b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005b8:	2300      	movs	r3, #0
 80005ba:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005bc:	1d3b      	adds	r3, r7, #4
 80005be:	2104      	movs	r1, #4
 80005c0:	4618      	mov	r0, r3
 80005c2:	f001 fcbf 	bl	8001f44 <HAL_RCC_ClockConfig>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80005cc:	f000 f99e 	bl	800090c <Error_Handler>
  }
}
 80005d0:	bf00      	nop
 80005d2:	3750      	adds	r7, #80	@ 0x50
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}

080005d8 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b08c      	sub	sp, #48	@ 0x30
 80005dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80005de:	463b      	mov	r3, r7
 80005e0:	2230      	movs	r2, #48	@ 0x30
 80005e2:	2100      	movs	r1, #0
 80005e4:	4618      	mov	r0, r3
 80005e6:	f003 faa3 	bl	8003b30 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80005ea:	4b16      	ldr	r3, [pc, #88]	@ (8000644 <MX_DAC1_Init+0x6c>)
 80005ec:	4a16      	ldr	r2, [pc, #88]	@ (8000648 <MX_DAC1_Init+0x70>)
 80005ee:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80005f0:	4814      	ldr	r0, [pc, #80]	@ (8000644 <MX_DAC1_Init+0x6c>)
 80005f2:	f000 fcae 	bl	8000f52 <HAL_DAC_Init>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80005fc:	f000 f986 	bl	800090c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000600:	2302      	movs	r3, #2
 8000602:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000604:	2300      	movs	r3, #0
 8000606:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000608:	2300      	movs	r3, #0
 800060a:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800060c:	2300      	movs	r3, #0
 800060e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000610:	2300      	movs	r3, #0
 8000612:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000614:	2300      	movs	r3, #0
 8000616:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000618:	2300      	movs	r3, #0
 800061a:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 800061c:	2301      	movs	r3, #1
 800061e:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000620:	2300      	movs	r3, #0
 8000622:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000624:	463b      	mov	r3, r7
 8000626:	2200      	movs	r2, #0
 8000628:	4619      	mov	r1, r3
 800062a:	4806      	ldr	r0, [pc, #24]	@ (8000644 <MX_DAC1_Init+0x6c>)
 800062c:	f000 fd4e 	bl	80010cc <HAL_DAC_ConfigChannel>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8000636:	f000 f969 	bl	800090c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800063a:	bf00      	nop
 800063c:	3730      	adds	r7, #48	@ 0x30
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	2001b5b0 	.word	0x2001b5b0
 8000648:	50000800 	.word	0x50000800

0800064c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000650:	4b21      	ldr	r3, [pc, #132]	@ (80006d8 <MX_LPUART1_UART_Init+0x8c>)
 8000652:	4a22      	ldr	r2, [pc, #136]	@ (80006dc <MX_LPUART1_UART_Init+0x90>)
 8000654:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000656:	4b20      	ldr	r3, [pc, #128]	@ (80006d8 <MX_LPUART1_UART_Init+0x8c>)
 8000658:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800065c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800065e:	4b1e      	ldr	r3, [pc, #120]	@ (80006d8 <MX_LPUART1_UART_Init+0x8c>)
 8000660:	2200      	movs	r2, #0
 8000662:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000664:	4b1c      	ldr	r3, [pc, #112]	@ (80006d8 <MX_LPUART1_UART_Init+0x8c>)
 8000666:	2200      	movs	r2, #0
 8000668:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800066a:	4b1b      	ldr	r3, [pc, #108]	@ (80006d8 <MX_LPUART1_UART_Init+0x8c>)
 800066c:	2200      	movs	r2, #0
 800066e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000670:	4b19      	ldr	r3, [pc, #100]	@ (80006d8 <MX_LPUART1_UART_Init+0x8c>)
 8000672:	220c      	movs	r2, #12
 8000674:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000676:	4b18      	ldr	r3, [pc, #96]	@ (80006d8 <MX_LPUART1_UART_Init+0x8c>)
 8000678:	2200      	movs	r2, #0
 800067a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800067c:	4b16      	ldr	r3, [pc, #88]	@ (80006d8 <MX_LPUART1_UART_Init+0x8c>)
 800067e:	2200      	movs	r2, #0
 8000680:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000682:	4b15      	ldr	r3, [pc, #84]	@ (80006d8 <MX_LPUART1_UART_Init+0x8c>)
 8000684:	2200      	movs	r2, #0
 8000686:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000688:	4b13      	ldr	r3, [pc, #76]	@ (80006d8 <MX_LPUART1_UART_Init+0x8c>)
 800068a:	2200      	movs	r2, #0
 800068c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800068e:	4812      	ldr	r0, [pc, #72]	@ (80006d8 <MX_LPUART1_UART_Init+0x8c>)
 8000690:	f002 fbe0 	bl	8002e54 <HAL_UART_Init>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800069a:	f000 f937 	bl	800090c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800069e:	2100      	movs	r1, #0
 80006a0:	480d      	ldr	r0, [pc, #52]	@ (80006d8 <MX_LPUART1_UART_Init+0x8c>)
 80006a2:	f003 f97b 	bl	800399c <HAL_UARTEx_SetTxFifoThreshold>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80006ac:	f000 f92e 	bl	800090c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006b0:	2100      	movs	r1, #0
 80006b2:	4809      	ldr	r0, [pc, #36]	@ (80006d8 <MX_LPUART1_UART_Init+0x8c>)
 80006b4:	f003 f9b0 	bl	8003a18 <HAL_UARTEx_SetRxFifoThreshold>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80006be:	f000 f925 	bl	800090c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80006c2:	4805      	ldr	r0, [pc, #20]	@ (80006d8 <MX_LPUART1_UART_Init+0x8c>)
 80006c4:	f003 f931 	bl	800392a <HAL_UARTEx_DisableFifoMode>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80006ce:	f000 f91d 	bl	800090c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80006d2:	bf00      	nop
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	2001b5c4 	.word	0x2001b5c4
 80006dc:	40008000 	.word	0x40008000

080006e0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006e4:	4b22      	ldr	r3, [pc, #136]	@ (8000770 <MX_USART1_UART_Init+0x90>)
 80006e6:	4a23      	ldr	r2, [pc, #140]	@ (8000774 <MX_USART1_UART_Init+0x94>)
 80006e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006ea:	4b21      	ldr	r3, [pc, #132]	@ (8000770 <MX_USART1_UART_Init+0x90>)
 80006ec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006f2:	4b1f      	ldr	r3, [pc, #124]	@ (8000770 <MX_USART1_UART_Init+0x90>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006f8:	4b1d      	ldr	r3, [pc, #116]	@ (8000770 <MX_USART1_UART_Init+0x90>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006fe:	4b1c      	ldr	r3, [pc, #112]	@ (8000770 <MX_USART1_UART_Init+0x90>)
 8000700:	2200      	movs	r2, #0
 8000702:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000704:	4b1a      	ldr	r3, [pc, #104]	@ (8000770 <MX_USART1_UART_Init+0x90>)
 8000706:	220c      	movs	r2, #12
 8000708:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800070a:	4b19      	ldr	r3, [pc, #100]	@ (8000770 <MX_USART1_UART_Init+0x90>)
 800070c:	2200      	movs	r2, #0
 800070e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000710:	4b17      	ldr	r3, [pc, #92]	@ (8000770 <MX_USART1_UART_Init+0x90>)
 8000712:	2200      	movs	r2, #0
 8000714:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000716:	4b16      	ldr	r3, [pc, #88]	@ (8000770 <MX_USART1_UART_Init+0x90>)
 8000718:	2200      	movs	r2, #0
 800071a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800071c:	4b14      	ldr	r3, [pc, #80]	@ (8000770 <MX_USART1_UART_Init+0x90>)
 800071e:	2200      	movs	r2, #0
 8000720:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000722:	4b13      	ldr	r3, [pc, #76]	@ (8000770 <MX_USART1_UART_Init+0x90>)
 8000724:	2200      	movs	r2, #0
 8000726:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000728:	4811      	ldr	r0, [pc, #68]	@ (8000770 <MX_USART1_UART_Init+0x90>)
 800072a:	f002 fb93 	bl	8002e54 <HAL_UART_Init>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000734:	f000 f8ea 	bl	800090c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000738:	2100      	movs	r1, #0
 800073a:	480d      	ldr	r0, [pc, #52]	@ (8000770 <MX_USART1_UART_Init+0x90>)
 800073c:	f003 f92e 	bl	800399c <HAL_UARTEx_SetTxFifoThreshold>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000746:	f000 f8e1 	bl	800090c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800074a:	2100      	movs	r1, #0
 800074c:	4808      	ldr	r0, [pc, #32]	@ (8000770 <MX_USART1_UART_Init+0x90>)
 800074e:	f003 f963 	bl	8003a18 <HAL_UARTEx_SetRxFifoThreshold>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000758:	f000 f8d8 	bl	800090c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800075c:	4804      	ldr	r0, [pc, #16]	@ (8000770 <MX_USART1_UART_Init+0x90>)
 800075e:	f003 f8e4 	bl	800392a <HAL_UARTEx_DisableFifoMode>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000768:	f000 f8d0 	bl	800090c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800076c:	bf00      	nop
 800076e:	bd80      	pop	{r7, pc}
 8000770:	2001b658 	.word	0x2001b658
 8000774:	40013800 	.word	0x40013800

08000778 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800077c:	4b0f      	ldr	r3, [pc, #60]	@ (80007bc <MX_TIM16_Init+0x44>)
 800077e:	4a10      	ldr	r2, [pc, #64]	@ (80007c0 <MX_TIM16_Init+0x48>)
 8000780:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 10 - 1;
 8000782:	4b0e      	ldr	r3, [pc, #56]	@ (80007bc <MX_TIM16_Init+0x44>)
 8000784:	2209      	movs	r2, #9
 8000786:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000788:	4b0c      	ldr	r3, [pc, #48]	@ (80007bc <MX_TIM16_Init+0x44>)
 800078a:	2200      	movs	r2, #0
 800078c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 107 - 1;
 800078e:	4b0b      	ldr	r3, [pc, #44]	@ (80007bc <MX_TIM16_Init+0x44>)
 8000790:	226a      	movs	r2, #106	@ 0x6a
 8000792:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000794:	4b09      	ldr	r3, [pc, #36]	@ (80007bc <MX_TIM16_Init+0x44>)
 8000796:	2200      	movs	r2, #0
 8000798:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800079a:	4b08      	ldr	r3, [pc, #32]	@ (80007bc <MX_TIM16_Init+0x44>)
 800079c:	2200      	movs	r2, #0
 800079e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80007a0:	4b06      	ldr	r3, [pc, #24]	@ (80007bc <MX_TIM16_Init+0x44>)
 80007a2:	2280      	movs	r2, #128	@ 0x80
 80007a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80007a6:	4805      	ldr	r0, [pc, #20]	@ (80007bc <MX_TIM16_Init+0x44>)
 80007a8:	f002 f824 	bl	80027f4 <HAL_TIM_Base_Init>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 80007b2:	f000 f8ab 	bl	800090c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80007b6:	bf00      	nop
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	2001b6ec 	.word	0x2001b6ec
 80007c0:	40014400 	.word	0x40014400

080007c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b08a      	sub	sp, #40	@ 0x28
 80007c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ca:	f107 0314 	add.w	r3, r7, #20
 80007ce:	2200      	movs	r2, #0
 80007d0:	601a      	str	r2, [r3, #0]
 80007d2:	605a      	str	r2, [r3, #4]
 80007d4:	609a      	str	r2, [r3, #8]
 80007d6:	60da      	str	r2, [r3, #12]
 80007d8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007da:	4b2f      	ldr	r3, [pc, #188]	@ (8000898 <MX_GPIO_Init+0xd4>)
 80007dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007de:	4a2e      	ldr	r2, [pc, #184]	@ (8000898 <MX_GPIO_Init+0xd4>)
 80007e0:	f043 0304 	orr.w	r3, r3, #4
 80007e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007e6:	4b2c      	ldr	r3, [pc, #176]	@ (8000898 <MX_GPIO_Init+0xd4>)
 80007e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ea:	f003 0304 	and.w	r3, r3, #4
 80007ee:	613b      	str	r3, [r7, #16]
 80007f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007f2:	4b29      	ldr	r3, [pc, #164]	@ (8000898 <MX_GPIO_Init+0xd4>)
 80007f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007f6:	4a28      	ldr	r2, [pc, #160]	@ (8000898 <MX_GPIO_Init+0xd4>)
 80007f8:	f043 0320 	orr.w	r3, r3, #32
 80007fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007fe:	4b26      	ldr	r3, [pc, #152]	@ (8000898 <MX_GPIO_Init+0xd4>)
 8000800:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000802:	f003 0320 	and.w	r3, r3, #32
 8000806:	60fb      	str	r3, [r7, #12]
 8000808:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800080a:	4b23      	ldr	r3, [pc, #140]	@ (8000898 <MX_GPIO_Init+0xd4>)
 800080c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800080e:	4a22      	ldr	r2, [pc, #136]	@ (8000898 <MX_GPIO_Init+0xd4>)
 8000810:	f043 0301 	orr.w	r3, r3, #1
 8000814:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000816:	4b20      	ldr	r3, [pc, #128]	@ (8000898 <MX_GPIO_Init+0xd4>)
 8000818:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800081a:	f003 0301 	and.w	r3, r3, #1
 800081e:	60bb      	str	r3, [r7, #8]
 8000820:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000822:	4b1d      	ldr	r3, [pc, #116]	@ (8000898 <MX_GPIO_Init+0xd4>)
 8000824:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000826:	4a1c      	ldr	r2, [pc, #112]	@ (8000898 <MX_GPIO_Init+0xd4>)
 8000828:	f043 0302 	orr.w	r3, r3, #2
 800082c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800082e:	4b1a      	ldr	r3, [pc, #104]	@ (8000898 <MX_GPIO_Init+0xd4>)
 8000830:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000832:	f003 0302 	and.w	r3, r3, #2
 8000836:	607b      	str	r3, [r7, #4]
 8000838:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800083a:	2200      	movs	r2, #0
 800083c:	2120      	movs	r1, #32
 800083e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000842:	f000 ff7d 	bl	8001740 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000846:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800084a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800084c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000850:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000852:	2300      	movs	r3, #0
 8000854:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000856:	f107 0314 	add.w	r3, r7, #20
 800085a:	4619      	mov	r1, r3
 800085c:	480f      	ldr	r0, [pc, #60]	@ (800089c <MX_GPIO_Init+0xd8>)
 800085e:	f000 fded 	bl	800143c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000862:	2320      	movs	r3, #32
 8000864:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000866:	2301      	movs	r3, #1
 8000868:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086a:	2300      	movs	r3, #0
 800086c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086e:	2300      	movs	r3, #0
 8000870:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000872:	f107 0314 	add.w	r3, r7, #20
 8000876:	4619      	mov	r1, r3
 8000878:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800087c:	f000 fdde 	bl	800143c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000880:	2200      	movs	r2, #0
 8000882:	2100      	movs	r1, #0
 8000884:	2028      	movs	r0, #40	@ 0x28
 8000886:	f000 fb30 	bl	8000eea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800088a:	2028      	movs	r0, #40	@ 0x28
 800088c:	f000 fb47 	bl	8000f1e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000890:	bf00      	nop
 8000892:	3728      	adds	r7, #40	@ 0x28
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	40021000 	.word	0x40021000
 800089c:	48000800 	.word	0x48000800

080008a0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
//	char lpuart_buf_3[50];
//	int lpuart_buf_len_3;
//	int iterations = 0;

	// if there is an interrupt, send a point from the array signal
	if (htim == &htim16){
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	4a12      	ldr	r2, [pc, #72]	@ (80008f4 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80008ac:	4293      	cmp	r3, r2
 80008ae:	d11d      	bne.n	80008ec <HAL_TIM_PeriodElapsedCallback+0x4c>


		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, mixed_array[idx]);
 80008b0:	4b11      	ldr	r3, [pc, #68]	@ (80008f8 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4a11      	ldr	r2, [pc, #68]	@ (80008fc <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80008b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008ba:	b29b      	uxth	r3, r3
 80008bc:	2200      	movs	r2, #0
 80008be:	2100      	movs	r1, #0
 80008c0:	480f      	ldr	r0, [pc, #60]	@ (8000900 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80008c2:	f000 fbd5 	bl	8001070 <HAL_DAC_SetValue>
//		}
//
//		lpuart_buf_len_3 = sprintf(lpuart_buf_3, "the count value is %ld after the else block \r\n", count);
//		HAL_UART_Transmit(&hlpuart1, (uint8_t *) lpuart_buf_3, lpuart_buf_len_3, 100);

		idx++;
 80008c6:	4b0c      	ldr	r3, [pc, #48]	@ (80008f8 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	3301      	adds	r3, #1
 80008cc:	4a0a      	ldr	r2, [pc, #40]	@ (80008f8 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80008ce:	6013      	str	r3, [r2, #0]



		if (idx == wave_size){
 80008d0:	4b09      	ldr	r3, [pc, #36]	@ (80008f8 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80008d2:	681a      	ldr	r2, [r3, #0]
 80008d4:	4b0b      	ldr	r3, [pc, #44]	@ (8000904 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	429a      	cmp	r2, r3
 80008da:	d107      	bne.n	80008ec <HAL_TIM_PeriodElapsedCallback+0x4c>

			// increment the iterations and then check to see if 7 total signals were sent out
			idx =0;
 80008dc:	4b06      	ldr	r3, [pc, #24]	@ (80008f8 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80008de:	2200      	movs	r2, #0
 80008e0:	601a      	str	r2, [r3, #0]
			count++;
 80008e2:	4b09      	ldr	r3, [pc, #36]	@ (8000908 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	3301      	adds	r3, #1
 80008e8:	4a07      	ldr	r2, [pc, #28]	@ (8000908 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80008ea:	6013      	str	r3, [r2, #0]
//			}
			// incrementing the counter
			}

	}
}
 80008ec:	bf00      	nop
 80008ee:	3708      	adds	r7, #8
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	2001b6ec 	.word	0x2001b6ec
 80008f8:	2001b738 	.word	0x2001b738
 80008fc:	20000000 	.word	0x20000000
 8000900:	2001b5b0 	.word	0x2001b5b0
 8000904:	2001b584 	.word	0x2001b584
 8000908:	2001b73c 	.word	0x2001b73c

0800090c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000910:	b672      	cpsid	i
}
 8000912:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000914:	bf00      	nop
 8000916:	e7fd      	b.n	8000914 <Error_Handler+0x8>

08000918 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800091e:	4b0f      	ldr	r3, [pc, #60]	@ (800095c <HAL_MspInit+0x44>)
 8000920:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000922:	4a0e      	ldr	r2, [pc, #56]	@ (800095c <HAL_MspInit+0x44>)
 8000924:	f043 0301 	orr.w	r3, r3, #1
 8000928:	6613      	str	r3, [r2, #96]	@ 0x60
 800092a:	4b0c      	ldr	r3, [pc, #48]	@ (800095c <HAL_MspInit+0x44>)
 800092c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800092e:	f003 0301 	and.w	r3, r3, #1
 8000932:	607b      	str	r3, [r7, #4]
 8000934:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000936:	4b09      	ldr	r3, [pc, #36]	@ (800095c <HAL_MspInit+0x44>)
 8000938:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800093a:	4a08      	ldr	r2, [pc, #32]	@ (800095c <HAL_MspInit+0x44>)
 800093c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000940:	6593      	str	r3, [r2, #88]	@ 0x58
 8000942:	4b06      	ldr	r3, [pc, #24]	@ (800095c <HAL_MspInit+0x44>)
 8000944:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000946:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800094a:	603b      	str	r3, [r7, #0]
 800094c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800094e:	f000 ffd7 	bl	8001900 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000952:	bf00      	nop
 8000954:	3708      	adds	r7, #8
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	40021000 	.word	0x40021000

08000960 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b08a      	sub	sp, #40	@ 0x28
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000968:	f107 0314 	add.w	r3, r7, #20
 800096c:	2200      	movs	r2, #0
 800096e:	601a      	str	r2, [r3, #0]
 8000970:	605a      	str	r2, [r3, #4]
 8000972:	609a      	str	r2, [r3, #8]
 8000974:	60da      	str	r2, [r3, #12]
 8000976:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a15      	ldr	r2, [pc, #84]	@ (80009d4 <HAL_DAC_MspInit+0x74>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d124      	bne.n	80009cc <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000982:	4b15      	ldr	r3, [pc, #84]	@ (80009d8 <HAL_DAC_MspInit+0x78>)
 8000984:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000986:	4a14      	ldr	r2, [pc, #80]	@ (80009d8 <HAL_DAC_MspInit+0x78>)
 8000988:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800098c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800098e:	4b12      	ldr	r3, [pc, #72]	@ (80009d8 <HAL_DAC_MspInit+0x78>)
 8000990:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000992:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000996:	613b      	str	r3, [r7, #16]
 8000998:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800099a:	4b0f      	ldr	r3, [pc, #60]	@ (80009d8 <HAL_DAC_MspInit+0x78>)
 800099c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800099e:	4a0e      	ldr	r2, [pc, #56]	@ (80009d8 <HAL_DAC_MspInit+0x78>)
 80009a0:	f043 0301 	orr.w	r3, r3, #1
 80009a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009a6:	4b0c      	ldr	r3, [pc, #48]	@ (80009d8 <HAL_DAC_MspInit+0x78>)
 80009a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009aa:	f003 0301 	and.w	r3, r3, #1
 80009ae:	60fb      	str	r3, [r7, #12]
 80009b0:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80009b2:	2310      	movs	r3, #16
 80009b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009b6:	2303      	movs	r3, #3
 80009b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009be:	f107 0314 	add.w	r3, r7, #20
 80009c2:	4619      	mov	r1, r3
 80009c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009c8:	f000 fd38 	bl	800143c <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80009cc:	bf00      	nop
 80009ce:	3728      	adds	r7, #40	@ 0x28
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	50000800 	.word	0x50000800
 80009d8:	40021000 	.word	0x40021000

080009dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b0a0      	sub	sp, #128	@ 0x80
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80009e8:	2200      	movs	r2, #0
 80009ea:	601a      	str	r2, [r3, #0]
 80009ec:	605a      	str	r2, [r3, #4]
 80009ee:	609a      	str	r2, [r3, #8]
 80009f0:	60da      	str	r2, [r3, #12]
 80009f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009f4:	f107 031c 	add.w	r3, r7, #28
 80009f8:	2250      	movs	r2, #80	@ 0x50
 80009fa:	2100      	movs	r1, #0
 80009fc:	4618      	mov	r0, r3
 80009fe:	f003 f897 	bl	8003b30 <memset>
  if(huart->Instance==LPUART1)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	4a3d      	ldr	r2, [pc, #244]	@ (8000afc <HAL_UART_MspInit+0x120>)
 8000a08:	4293      	cmp	r3, r2
 8000a0a:	d137      	bne.n	8000a7c <HAL_UART_MspInit+0xa0>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000a0c:	2320      	movs	r3, #32
 8000a0e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000a10:	2300      	movs	r3, #0
 8000a12:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a14:	f107 031c 	add.w	r3, r7, #28
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f001 fcaf 	bl	800237c <HAL_RCCEx_PeriphCLKConfig>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a24:	f7ff ff72 	bl	800090c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000a28:	4b35      	ldr	r3, [pc, #212]	@ (8000b00 <HAL_UART_MspInit+0x124>)
 8000a2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000a2c:	4a34      	ldr	r2, [pc, #208]	@ (8000b00 <HAL_UART_MspInit+0x124>)
 8000a2e:	f043 0301 	orr.w	r3, r3, #1
 8000a32:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000a34:	4b32      	ldr	r3, [pc, #200]	@ (8000b00 <HAL_UART_MspInit+0x124>)
 8000a36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000a38:	f003 0301 	and.w	r3, r3, #1
 8000a3c:	61bb      	str	r3, [r7, #24]
 8000a3e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a40:	4b2f      	ldr	r3, [pc, #188]	@ (8000b00 <HAL_UART_MspInit+0x124>)
 8000a42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a44:	4a2e      	ldr	r2, [pc, #184]	@ (8000b00 <HAL_UART_MspInit+0x124>)
 8000a46:	f043 0301 	orr.w	r3, r3, #1
 8000a4a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a4c:	4b2c      	ldr	r3, [pc, #176]	@ (8000b00 <HAL_UART_MspInit+0x124>)
 8000a4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a50:	f003 0301 	and.w	r3, r3, #1
 8000a54:	617b      	str	r3, [r7, #20]
 8000a56:	697b      	ldr	r3, [r7, #20]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000a58:	230c      	movs	r3, #12
 8000a5a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a60:	2300      	movs	r3, #0
 8000a62:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a64:	2300      	movs	r3, #0
 8000a66:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000a68:	230c      	movs	r3, #12
 8000a6a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a6c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000a70:	4619      	mov	r1, r3
 8000a72:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a76:	f000 fce1 	bl	800143c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000a7a:	e03a      	b.n	8000af2 <HAL_UART_MspInit+0x116>
  else if(huart->Instance==USART1)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a20      	ldr	r2, [pc, #128]	@ (8000b04 <HAL_UART_MspInit+0x128>)
 8000a82:	4293      	cmp	r3, r2
 8000a84:	d135      	bne.n	8000af2 <HAL_UART_MspInit+0x116>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000a86:	2301      	movs	r3, #1
 8000a88:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a8e:	f107 031c 	add.w	r3, r7, #28
 8000a92:	4618      	mov	r0, r3
 8000a94:	f001 fc72 	bl	800237c <HAL_RCCEx_PeriphCLKConfig>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <HAL_UART_MspInit+0xc6>
      Error_Handler();
 8000a9e:	f7ff ff35 	bl	800090c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000aa2:	4b17      	ldr	r3, [pc, #92]	@ (8000b00 <HAL_UART_MspInit+0x124>)
 8000aa4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000aa6:	4a16      	ldr	r2, [pc, #88]	@ (8000b00 <HAL_UART_MspInit+0x124>)
 8000aa8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000aac:	6613      	str	r3, [r2, #96]	@ 0x60
 8000aae:	4b14      	ldr	r3, [pc, #80]	@ (8000b00 <HAL_UART_MspInit+0x124>)
 8000ab0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ab2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ab6:	613b      	str	r3, [r7, #16]
 8000ab8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aba:	4b11      	ldr	r3, [pc, #68]	@ (8000b00 <HAL_UART_MspInit+0x124>)
 8000abc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000abe:	4a10      	ldr	r2, [pc, #64]	@ (8000b00 <HAL_UART_MspInit+0x124>)
 8000ac0:	f043 0304 	orr.w	r3, r3, #4
 8000ac4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ac6:	4b0e      	ldr	r3, [pc, #56]	@ (8000b00 <HAL_UART_MspInit+0x124>)
 8000ac8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aca:	f003 0304 	and.w	r3, r3, #4
 8000ace:	60fb      	str	r3, [r7, #12]
 8000ad0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000ad2:	2330      	movs	r3, #48	@ 0x30
 8000ad4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ada:	2300      	movs	r3, #0
 8000adc:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ae2:	2307      	movs	r3, #7
 8000ae4:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ae6:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000aea:	4619      	mov	r1, r3
 8000aec:	4806      	ldr	r0, [pc, #24]	@ (8000b08 <HAL_UART_MspInit+0x12c>)
 8000aee:	f000 fca5 	bl	800143c <HAL_GPIO_Init>
}
 8000af2:	bf00      	nop
 8000af4:	3780      	adds	r7, #128	@ 0x80
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	40008000 	.word	0x40008000
 8000b00:	40021000 	.word	0x40021000
 8000b04:	40013800 	.word	0x40013800
 8000b08:	48000800 	.word	0x48000800

08000b0c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b084      	sub	sp, #16
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a0d      	ldr	r2, [pc, #52]	@ (8000b50 <HAL_TIM_Base_MspInit+0x44>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d113      	bne.n	8000b46 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000b1e:	4b0d      	ldr	r3, [pc, #52]	@ (8000b54 <HAL_TIM_Base_MspInit+0x48>)
 8000b20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b22:	4a0c      	ldr	r2, [pc, #48]	@ (8000b54 <HAL_TIM_Base_MspInit+0x48>)
 8000b24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b28:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b2a:	4b0a      	ldr	r3, [pc, #40]	@ (8000b54 <HAL_TIM_Base_MspInit+0x48>)
 8000b2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000b36:	2200      	movs	r2, #0
 8000b38:	2100      	movs	r1, #0
 8000b3a:	2019      	movs	r0, #25
 8000b3c:	f000 f9d5 	bl	8000eea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000b40:	2019      	movs	r0, #25
 8000b42:	f000 f9ec 	bl	8000f1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000b46:	bf00      	nop
 8000b48:	3710      	adds	r7, #16
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	40014400 	.word	0x40014400
 8000b54:	40021000 	.word	0x40021000

08000b58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b5c:	bf00      	nop
 8000b5e:	e7fd      	b.n	8000b5c <NMI_Handler+0x4>

08000b60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b64:	bf00      	nop
 8000b66:	e7fd      	b.n	8000b64 <HardFault_Handler+0x4>

08000b68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b6c:	bf00      	nop
 8000b6e:	e7fd      	b.n	8000b6c <MemManage_Handler+0x4>

08000b70 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b74:	bf00      	nop
 8000b76:	e7fd      	b.n	8000b74 <BusFault_Handler+0x4>

08000b78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b7c:	bf00      	nop
 8000b7e:	e7fd      	b.n	8000b7c <UsageFault_Handler+0x4>

08000b80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b84:	bf00      	nop
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr

08000b8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b8e:	b480      	push	{r7}
 8000b90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b92:	bf00      	nop
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr

08000b9c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ba0:	bf00      	nop
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr

08000baa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000baa:	b580      	push	{r7, lr}
 8000bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bae:	f000 f8a3 	bl	8000cf8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	bd80      	pop	{r7, pc}
	...

08000bb8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000bbc:	4802      	ldr	r0, [pc, #8]	@ (8000bc8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000bbe:	f001 fee1 	bl	8002984 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	2001b6ec 	.word	0x2001b6ec

08000bcc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000bd0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000bd4:	f000 fdcc 	bl	8001770 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000bd8:	bf00      	nop
 8000bda:	bd80      	pop	{r7, pc}

08000bdc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000be0:	4b06      	ldr	r3, [pc, #24]	@ (8000bfc <SystemInit+0x20>)
 8000be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000be6:	4a05      	ldr	r2, [pc, #20]	@ (8000bfc <SystemInit+0x20>)
 8000be8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bf0:	bf00      	nop
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	e000ed00 	.word	0xe000ed00

08000c00 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c00:	480d      	ldr	r0, [pc, #52]	@ (8000c38 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c02:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c04:	f7ff ffea 	bl	8000bdc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c08:	480c      	ldr	r0, [pc, #48]	@ (8000c3c <LoopForever+0x6>)
  ldr r1, =_edata
 8000c0a:	490d      	ldr	r1, [pc, #52]	@ (8000c40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c0c:	4a0d      	ldr	r2, [pc, #52]	@ (8000c44 <LoopForever+0xe>)
  movs r3, #0
 8000c0e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000c10:	e002      	b.n	8000c18 <LoopCopyDataInit>

08000c12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c16:	3304      	adds	r3, #4

08000c18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c1c:	d3f9      	bcc.n	8000c12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c1e:	4a0a      	ldr	r2, [pc, #40]	@ (8000c48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c20:	4c0a      	ldr	r4, [pc, #40]	@ (8000c4c <LoopForever+0x16>)
  movs r3, #0
 8000c22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c24:	e001      	b.n	8000c2a <LoopFillZerobss>

08000c26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c28:	3204      	adds	r2, #4

08000c2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c2c:	d3fb      	bcc.n	8000c26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c2e:	f002 ff87 	bl	8003b40 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c32:	f7ff fc69 	bl	8000508 <main>

08000c36 <LoopForever>:

LoopForever:
    b LoopForever
 8000c36:	e7fe      	b.n	8000c36 <LoopForever>
  ldr   r0, =_estack
 8000c38:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8000c3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c40:	2001b594 	.word	0x2001b594
  ldr r2, =_sidata
 8000c44:	08003bf0 	.word	0x08003bf0
  ldr r2, =_sbss
 8000c48:	2001b594 	.word	0x2001b594
  ldr r4, =_ebss
 8000c4c:	2001b744 	.word	0x2001b744

08000c50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c50:	e7fe      	b.n	8000c50 <ADC1_2_IRQHandler>

08000c52 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c52:	b580      	push	{r7, lr}
 8000c54:	b082      	sub	sp, #8
 8000c56:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c5c:	2003      	movs	r0, #3
 8000c5e:	f000 f939 	bl	8000ed4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c62:	2000      	movs	r0, #0
 8000c64:	f000 f80e 	bl	8000c84 <HAL_InitTick>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d002      	beq.n	8000c74 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	71fb      	strb	r3, [r7, #7]
 8000c72:	e001      	b.n	8000c78 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c74:	f7ff fe50 	bl	8000918 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c78:	79fb      	ldrb	r3, [r7, #7]

}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3708      	adds	r7, #8
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
	...

08000c84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b084      	sub	sp, #16
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000c90:	4b16      	ldr	r3, [pc, #88]	@ (8000cec <HAL_InitTick+0x68>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d022      	beq.n	8000cde <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000c98:	4b15      	ldr	r3, [pc, #84]	@ (8000cf0 <HAL_InitTick+0x6c>)
 8000c9a:	681a      	ldr	r2, [r3, #0]
 8000c9c:	4b13      	ldr	r3, [pc, #76]	@ (8000cec <HAL_InitTick+0x68>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000ca4:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ca8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cac:	4618      	mov	r0, r3
 8000cae:	f000 f944 	bl	8000f3a <HAL_SYSTICK_Config>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d10f      	bne.n	8000cd8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	2b0f      	cmp	r3, #15
 8000cbc:	d809      	bhi.n	8000cd2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	6879      	ldr	r1, [r7, #4]
 8000cc2:	f04f 30ff 	mov.w	r0, #4294967295
 8000cc6:	f000 f910 	bl	8000eea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cca:	4a0a      	ldr	r2, [pc, #40]	@ (8000cf4 <HAL_InitTick+0x70>)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	6013      	str	r3, [r2, #0]
 8000cd0:	e007      	b.n	8000ce2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	73fb      	strb	r3, [r7, #15]
 8000cd6:	e004      	b.n	8000ce2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	73fb      	strb	r3, [r7, #15]
 8000cdc:	e001      	b.n	8000ce2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ce2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	3710      	adds	r7, #16
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	2001b590 	.word	0x2001b590
 8000cf0:	2001b588 	.word	0x2001b588
 8000cf4:	2001b58c 	.word	0x2001b58c

08000cf8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cfc:	4b05      	ldr	r3, [pc, #20]	@ (8000d14 <HAL_IncTick+0x1c>)
 8000cfe:	681a      	ldr	r2, [r3, #0]
 8000d00:	4b05      	ldr	r3, [pc, #20]	@ (8000d18 <HAL_IncTick+0x20>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4413      	add	r3, r2
 8000d06:	4a03      	ldr	r2, [pc, #12]	@ (8000d14 <HAL_IncTick+0x1c>)
 8000d08:	6013      	str	r3, [r2, #0]
}
 8000d0a:	bf00      	nop
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr
 8000d14:	2001b740 	.word	0x2001b740
 8000d18:	2001b590 	.word	0x2001b590

08000d1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d20:	4b03      	ldr	r3, [pc, #12]	@ (8000d30 <HAL_GetTick+0x14>)
 8000d22:	681b      	ldr	r3, [r3, #0]
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	2001b740 	.word	0x2001b740

08000d34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b085      	sub	sp, #20
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	f003 0307 	and.w	r3, r3, #7
 8000d42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d44:	4b0c      	ldr	r3, [pc, #48]	@ (8000d78 <__NVIC_SetPriorityGrouping+0x44>)
 8000d46:	68db      	ldr	r3, [r3, #12]
 8000d48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d4a:	68ba      	ldr	r2, [r7, #8]
 8000d4c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d50:	4013      	ands	r3, r2
 8000d52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d5c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d66:	4a04      	ldr	r2, [pc, #16]	@ (8000d78 <__NVIC_SetPriorityGrouping+0x44>)
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	60d3      	str	r3, [r2, #12]
}
 8000d6c:	bf00      	nop
 8000d6e:	3714      	adds	r7, #20
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr
 8000d78:	e000ed00 	.word	0xe000ed00

08000d7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d80:	4b04      	ldr	r3, [pc, #16]	@ (8000d94 <__NVIC_GetPriorityGrouping+0x18>)
 8000d82:	68db      	ldr	r3, [r3, #12]
 8000d84:	0a1b      	lsrs	r3, r3, #8
 8000d86:	f003 0307 	and.w	r3, r3, #7
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr
 8000d94:	e000ed00 	.word	0xe000ed00

08000d98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	4603      	mov	r3, r0
 8000da0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	db0b      	blt.n	8000dc2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000daa:	79fb      	ldrb	r3, [r7, #7]
 8000dac:	f003 021f 	and.w	r2, r3, #31
 8000db0:	4907      	ldr	r1, [pc, #28]	@ (8000dd0 <__NVIC_EnableIRQ+0x38>)
 8000db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db6:	095b      	lsrs	r3, r3, #5
 8000db8:	2001      	movs	r0, #1
 8000dba:	fa00 f202 	lsl.w	r2, r0, r2
 8000dbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000dc2:	bf00      	nop
 8000dc4:	370c      	adds	r7, #12
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	e000e100 	.word	0xe000e100

08000dd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	4603      	mov	r3, r0
 8000ddc:	6039      	str	r1, [r7, #0]
 8000dde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000de0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	db0a      	blt.n	8000dfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	b2da      	uxtb	r2, r3
 8000dec:	490c      	ldr	r1, [pc, #48]	@ (8000e20 <__NVIC_SetPriority+0x4c>)
 8000dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df2:	0112      	lsls	r2, r2, #4
 8000df4:	b2d2      	uxtb	r2, r2
 8000df6:	440b      	add	r3, r1
 8000df8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dfc:	e00a      	b.n	8000e14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	b2da      	uxtb	r2, r3
 8000e02:	4908      	ldr	r1, [pc, #32]	@ (8000e24 <__NVIC_SetPriority+0x50>)
 8000e04:	79fb      	ldrb	r3, [r7, #7]
 8000e06:	f003 030f 	and.w	r3, r3, #15
 8000e0a:	3b04      	subs	r3, #4
 8000e0c:	0112      	lsls	r2, r2, #4
 8000e0e:	b2d2      	uxtb	r2, r2
 8000e10:	440b      	add	r3, r1
 8000e12:	761a      	strb	r2, [r3, #24]
}
 8000e14:	bf00      	nop
 8000e16:	370c      	adds	r7, #12
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr
 8000e20:	e000e100 	.word	0xe000e100
 8000e24:	e000ed00 	.word	0xe000ed00

08000e28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b089      	sub	sp, #36	@ 0x24
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	60f8      	str	r0, [r7, #12]
 8000e30:	60b9      	str	r1, [r7, #8]
 8000e32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	f003 0307 	and.w	r3, r3, #7
 8000e3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e3c:	69fb      	ldr	r3, [r7, #28]
 8000e3e:	f1c3 0307 	rsb	r3, r3, #7
 8000e42:	2b04      	cmp	r3, #4
 8000e44:	bf28      	it	cs
 8000e46:	2304      	movcs	r3, #4
 8000e48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	3304      	adds	r3, #4
 8000e4e:	2b06      	cmp	r3, #6
 8000e50:	d902      	bls.n	8000e58 <NVIC_EncodePriority+0x30>
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	3b03      	subs	r3, #3
 8000e56:	e000      	b.n	8000e5a <NVIC_EncodePriority+0x32>
 8000e58:	2300      	movs	r3, #0
 8000e5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e5c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e60:	69bb      	ldr	r3, [r7, #24]
 8000e62:	fa02 f303 	lsl.w	r3, r2, r3
 8000e66:	43da      	mvns	r2, r3
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	401a      	ands	r2, r3
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e70:	f04f 31ff 	mov.w	r1, #4294967295
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	fa01 f303 	lsl.w	r3, r1, r3
 8000e7a:	43d9      	mvns	r1, r3
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e80:	4313      	orrs	r3, r2
         );
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3724      	adds	r7, #36	@ 0x24
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
	...

08000e90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	3b01      	subs	r3, #1
 8000e9c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ea0:	d301      	bcc.n	8000ea6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	e00f      	b.n	8000ec6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ea6:	4a0a      	ldr	r2, [pc, #40]	@ (8000ed0 <SysTick_Config+0x40>)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	3b01      	subs	r3, #1
 8000eac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eae:	210f      	movs	r1, #15
 8000eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000eb4:	f7ff ff8e 	bl	8000dd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000eb8:	4b05      	ldr	r3, [pc, #20]	@ (8000ed0 <SysTick_Config+0x40>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ebe:	4b04      	ldr	r3, [pc, #16]	@ (8000ed0 <SysTick_Config+0x40>)
 8000ec0:	2207      	movs	r2, #7
 8000ec2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ec4:	2300      	movs	r3, #0
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3708      	adds	r7, #8
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	e000e010 	.word	0xe000e010

08000ed4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000edc:	6878      	ldr	r0, [r7, #4]
 8000ede:	f7ff ff29 	bl	8000d34 <__NVIC_SetPriorityGrouping>
}
 8000ee2:	bf00      	nop
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}

08000eea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eea:	b580      	push	{r7, lr}
 8000eec:	b086      	sub	sp, #24
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	60b9      	str	r1, [r7, #8]
 8000ef4:	607a      	str	r2, [r7, #4]
 8000ef6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ef8:	f7ff ff40 	bl	8000d7c <__NVIC_GetPriorityGrouping>
 8000efc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000efe:	687a      	ldr	r2, [r7, #4]
 8000f00:	68b9      	ldr	r1, [r7, #8]
 8000f02:	6978      	ldr	r0, [r7, #20]
 8000f04:	f7ff ff90 	bl	8000e28 <NVIC_EncodePriority>
 8000f08:	4602      	mov	r2, r0
 8000f0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f0e:	4611      	mov	r1, r2
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff ff5f 	bl	8000dd4 <__NVIC_SetPriority>
}
 8000f16:	bf00      	nop
 8000f18:	3718      	adds	r7, #24
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b082      	sub	sp, #8
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	4603      	mov	r3, r0
 8000f26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f7ff ff33 	bl	8000d98 <__NVIC_EnableIRQ>
}
 8000f32:	bf00      	nop
 8000f34:	3708      	adds	r7, #8
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}

08000f3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f3a:	b580      	push	{r7, lr}
 8000f3c:	b082      	sub	sp, #8
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f42:	6878      	ldr	r0, [r7, #4]
 8000f44:	f7ff ffa4 	bl	8000e90 <SysTick_Config>
 8000f48:	4603      	mov	r3, r0
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}

08000f52 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8000f52:	b580      	push	{r7, lr}
 8000f54:	b082      	sub	sp, #8
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d101      	bne.n	8000f64 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8000f60:	2301      	movs	r3, #1
 8000f62:	e014      	b.n	8000f8e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	791b      	ldrb	r3, [r3, #4]
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d105      	bne.n	8000f7a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2200      	movs	r2, #0
 8000f72:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8000f74:	6878      	ldr	r0, [r7, #4]
 8000f76:	f7ff fcf3 	bl	8000960 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2202      	movs	r2, #2
 8000f7e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2200      	movs	r2, #0
 8000f84:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2201      	movs	r2, #1
 8000f8a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8000f8c:	2300      	movs	r3, #0
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
	...

08000f98 <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b085      	sub	sp, #20
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	6039      	str	r1, [r7, #0]
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d101      	bne.n	8000fac <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	e056      	b.n	800105a <HAL_DAC_Start+0xc2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	795b      	ldrb	r3, [r3, #5]
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d101      	bne.n	8000fb8 <HAL_DAC_Start+0x20>
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	e050      	b.n	800105a <HAL_DAC_Start+0xc2>
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2201      	movs	r2, #1
 8000fbc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2202      	movs	r2, #2
 8000fc2:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	6819      	ldr	r1, [r3, #0]
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	f003 0310 	and.w	r3, r3, #16
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	409a      	lsls	r2, r3
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	430a      	orrs	r2, r1
 8000fda:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  /* Wait loop initialization and execution */
  /* Note: Variable divided by 2 to compensate partially CPU processing cycles, scaling in us split to not exceed 32 */
  /*       bits register capacity and handle low frequency. */
  wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000fdc:	4b22      	ldr	r3, [pc, #136]	@ (8001068 <HAL_DAC_Start+0xd0>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	099b      	lsrs	r3, r3, #6
 8000fe2:	4a22      	ldr	r2, [pc, #136]	@ (800106c <HAL_DAC_Start+0xd4>)
 8000fe4:	fba2 2303 	umull	r2, r3, r2, r3
 8000fe8:	099b      	lsrs	r3, r3, #6
 8000fea:	3301      	adds	r3, #1
 8000fec:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 8000fee:	e002      	b.n	8000ff6 <HAL_DAC_Start+0x5e>
  {
    wait_loop_index--;
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	3b01      	subs	r3, #1
 8000ff4:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d1f9      	bne.n	8000ff0 <HAL_DAC_Start+0x58>
  }

  if (Channel == DAC_CHANNEL_1)
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d10f      	bne.n	8001022 <HAL_DAC_Start+0x8a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800100c:	2b02      	cmp	r3, #2
 800100e:	d11d      	bne.n	800104c <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	685a      	ldr	r2, [r3, #4]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f042 0201 	orr.w	r2, r2, #1
 800101e:	605a      	str	r2, [r3, #4]
 8001020:	e014      	b.n	800104c <HAL_DAC_Start+0xb4>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	f003 0310 	and.w	r3, r3, #16
 8001032:	2102      	movs	r1, #2
 8001034:	fa01 f303 	lsl.w	r3, r1, r3
 8001038:	429a      	cmp	r2, r3
 800103a:	d107      	bne.n	800104c <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	685a      	ldr	r2, [r3, #4]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f042 0202 	orr.w	r2, r2, #2
 800104a:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2201      	movs	r2, #1
 8001050:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2200      	movs	r2, #0
 8001056:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001058:	2300      	movs	r3, #0
}
 800105a:	4618      	mov	r0, r3
 800105c:	3714      	adds	r7, #20
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	2001b588 	.word	0x2001b588
 800106c:	053e2d63 	.word	0x053e2d63

08001070 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8001070:	b480      	push	{r7}
 8001072:	b087      	sub	sp, #28
 8001074:	af00      	add	r7, sp, #0
 8001076:	60f8      	str	r0, [r7, #12]
 8001078:	60b9      	str	r1, [r7, #8]
 800107a:	607a      	str	r2, [r7, #4]
 800107c:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 800107e:	2300      	movs	r3, #0
 8001080:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d101      	bne.n	800108c <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8001088:	2301      	movs	r3, #1
 800108a:	e018      	b.n	80010be <HAL_DAC_SetValue+0x4e>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d105      	bne.n	80010aa <HAL_DAC_SetValue+0x3a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800109e:	697a      	ldr	r2, [r7, #20]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	4413      	add	r3, r2
 80010a4:	3308      	adds	r3, #8
 80010a6:	617b      	str	r3, [r7, #20]
 80010a8:	e004      	b.n	80010b4 <HAL_DAC_SetValue+0x44>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80010aa:	697a      	ldr	r2, [r7, #20]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	4413      	add	r3, r2
 80010b0:	3314      	adds	r3, #20
 80010b2:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	461a      	mov	r2, r3
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80010bc:	2300      	movs	r3, #0
}
 80010be:	4618      	mov	r0, r3
 80010c0:	371c      	adds	r7, #28
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
	...

080010cc <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b08a      	sub	sp, #40	@ 0x28
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	60f8      	str	r0, [r7, #12]
 80010d4:	60b9      	str	r1, [r7, #8]
 80010d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010d8:	2300      	movs	r3, #0
 80010da:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d002      	beq.n	80010e8 <HAL_DAC_ConfigChannel+0x1c>
 80010e2:	68bb      	ldr	r3, [r7, #8]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d101      	bne.n	80010ec <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 80010e8:	2301      	movs	r3, #1
 80010ea:	e19e      	b.n	800142a <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	795b      	ldrb	r3, [r3, #5]
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	d101      	bne.n	80010f8 <HAL_DAC_ConfigChannel+0x2c>
 80010f4:	2302      	movs	r3, #2
 80010f6:	e198      	b.n	800142a <HAL_DAC_ConfigChannel+0x35e>
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	2201      	movs	r2, #1
 80010fc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	2202      	movs	r2, #2
 8001102:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	689b      	ldr	r3, [r3, #8]
 8001108:	2b04      	cmp	r3, #4
 800110a:	d17a      	bne.n	8001202 <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800110c:	f7ff fe06 	bl	8000d1c <HAL_GetTick>
 8001110:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d13d      	bne.n	8001194 <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001118:	e018      	b.n	800114c <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800111a:	f7ff fdff 	bl	8000d1c <HAL_GetTick>
 800111e:	4602      	mov	r2, r0
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	1ad3      	subs	r3, r2, r3
 8001124:	2b01      	cmp	r3, #1
 8001126:	d911      	bls.n	800114c <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800112e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001132:	2b00      	cmp	r3, #0
 8001134:	d00a      	beq.n	800114c <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	691b      	ldr	r3, [r3, #16]
 800113a:	f043 0208 	orr.w	r2, r3, #8
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	2203      	movs	r2, #3
 8001146:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8001148:	2303      	movs	r3, #3
 800114a:	e16e      	b.n	800142a <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001152:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001156:	2b00      	cmp	r3, #0
 8001158:	d1df      	bne.n	800111a <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	68ba      	ldr	r2, [r7, #8]
 8001160:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001162:	641a      	str	r2, [r3, #64]	@ 0x40
 8001164:	e020      	b.n	80011a8 <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001166:	f7ff fdd9 	bl	8000d1c <HAL_GetTick>
 800116a:	4602      	mov	r2, r0
 800116c:	69bb      	ldr	r3, [r7, #24]
 800116e:	1ad3      	subs	r3, r2, r3
 8001170:	2b01      	cmp	r3, #1
 8001172:	d90f      	bls.n	8001194 <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800117a:	2b00      	cmp	r3, #0
 800117c:	da0a      	bge.n	8001194 <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	691b      	ldr	r3, [r3, #16]
 8001182:	f043 0208 	orr.w	r2, r3, #8
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	2203      	movs	r2, #3
 800118e:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8001190:	2303      	movs	r3, #3
 8001192:	e14a      	b.n	800142a <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800119a:	2b00      	cmp	r3, #0
 800119c:	dbe3      	blt.n	8001166 <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	68ba      	ldr	r2, [r7, #8]
 80011a4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80011a6:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	f003 0310 	and.w	r3, r3, #16
 80011b4:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 80011b8:	fa01 f303 	lsl.w	r3, r1, r3
 80011bc:	43db      	mvns	r3, r3
 80011be:	ea02 0103 	and.w	r1, r2, r3
 80011c2:	68bb      	ldr	r3, [r7, #8]
 80011c4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	f003 0310 	and.w	r3, r3, #16
 80011cc:	409a      	lsls	r2, r3
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	430a      	orrs	r2, r1
 80011d4:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	f003 0310 	and.w	r3, r3, #16
 80011e2:	21ff      	movs	r1, #255	@ 0xff
 80011e4:	fa01 f303 	lsl.w	r3, r1, r3
 80011e8:	43db      	mvns	r3, r3
 80011ea:	ea02 0103 	and.w	r1, r2, r3
 80011ee:	68bb      	ldr	r3, [r7, #8]
 80011f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	f003 0310 	and.w	r3, r3, #16
 80011f8:	409a      	lsls	r2, r3
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	430a      	orrs	r2, r1
 8001200:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8001202:	68bb      	ldr	r3, [r7, #8]
 8001204:	69db      	ldr	r3, [r3, #28]
 8001206:	2b01      	cmp	r3, #1
 8001208:	d11d      	bne.n	8001246 <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001210:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	f003 0310 	and.w	r3, r3, #16
 8001218:	221f      	movs	r2, #31
 800121a:	fa02 f303 	lsl.w	r3, r2, r3
 800121e:	43db      	mvns	r3, r3
 8001220:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001222:	4013      	ands	r3, r2
 8001224:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8001226:	68bb      	ldr	r3, [r7, #8]
 8001228:	6a1b      	ldr	r3, [r3, #32]
 800122a:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	f003 0310 	and.w	r3, r3, #16
 8001232:	697a      	ldr	r2, [r7, #20]
 8001234:	fa02 f303 	lsl.w	r3, r2, r3
 8001238:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800123a:	4313      	orrs	r3, r2
 800123c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001244:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800124c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	f003 0310 	and.w	r3, r3, #16
 8001254:	2207      	movs	r2, #7
 8001256:	fa02 f303 	lsl.w	r3, r2, r3
 800125a:	43db      	mvns	r3, r3
 800125c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800125e:	4013      	ands	r3, r2
 8001260:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8001262:	68bb      	ldr	r3, [r7, #8]
 8001264:	699b      	ldr	r3, [r3, #24]
 8001266:	2b01      	cmp	r3, #1
 8001268:	d102      	bne.n	8001270 <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 800126a:	2300      	movs	r3, #0
 800126c:	623b      	str	r3, [r7, #32]
 800126e:	e00f      	b.n	8001290 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	699b      	ldr	r3, [r3, #24]
 8001274:	2b02      	cmp	r3, #2
 8001276:	d102      	bne.n	800127e <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8001278:	2301      	movs	r3, #1
 800127a:	623b      	str	r3, [r7, #32]
 800127c:	e008      	b.n	8001290 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800127e:	68bb      	ldr	r3, [r7, #8]
 8001280:	695b      	ldr	r3, [r3, #20]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d102      	bne.n	800128c <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8001286:	2301      	movs	r3, #1
 8001288:	623b      	str	r3, [r7, #32]
 800128a:	e001      	b.n	8001290 <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800128c:	2300      	movs	r3, #0
 800128e:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	689a      	ldr	r2, [r3, #8]
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	695b      	ldr	r3, [r3, #20]
 8001298:	4313      	orrs	r3, r2
 800129a:	6a3a      	ldr	r2, [r7, #32]
 800129c:	4313      	orrs	r3, r2
 800129e:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	f003 0310 	and.w	r3, r3, #16
 80012a6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80012aa:	fa02 f303 	lsl.w	r3, r2, r3
 80012ae:	43db      	mvns	r3, r3
 80012b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80012b2:	4013      	ands	r3, r2
 80012b4:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	791b      	ldrb	r3, [r3, #4]
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d102      	bne.n	80012c4 <HAL_DAC_ConfigChannel+0x1f8>
 80012be:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80012c2:	e000      	b.n	80012c6 <HAL_DAC_ConfigChannel+0x1fa>
 80012c4:	2300      	movs	r3, #0
 80012c6:	697a      	ldr	r2, [r7, #20]
 80012c8:	4313      	orrs	r3, r2
 80012ca:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	f003 0310 	and.w	r3, r3, #16
 80012d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80012d6:	fa02 f303 	lsl.w	r3, r2, r3
 80012da:	43db      	mvns	r3, r3
 80012dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80012de:	4013      	ands	r3, r2
 80012e0:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	795b      	ldrb	r3, [r3, #5]
 80012e6:	2b01      	cmp	r3, #1
 80012e8:	d102      	bne.n	80012f0 <HAL_DAC_ConfigChannel+0x224>
 80012ea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80012ee:	e000      	b.n	80012f2 <HAL_DAC_ConfigChannel+0x226>
 80012f0:	2300      	movs	r3, #0
 80012f2:	697a      	ldr	r2, [r7, #20]
 80012f4:	4313      	orrs	r3, r2
 80012f6:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80012f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012fa:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80012fe:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	2b02      	cmp	r3, #2
 8001306:	d114      	bne.n	8001332 <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8001308:	f000 ffba 	bl	8002280 <HAL_RCC_GetHCLKFreq>
 800130c:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	4a48      	ldr	r2, [pc, #288]	@ (8001434 <HAL_DAC_ConfigChannel+0x368>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d904      	bls.n	8001320 <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8001316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001318:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800131c:	627b      	str	r3, [r7, #36]	@ 0x24
 800131e:	e00f      	b.n	8001340 <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	4a45      	ldr	r2, [pc, #276]	@ (8001438 <HAL_DAC_ConfigChannel+0x36c>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d90a      	bls.n	800133e <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8001328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800132a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800132e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001330:	e006      	b.n	8001340 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001338:	4313      	orrs	r3, r2
 800133a:	627b      	str	r3, [r7, #36]	@ 0x24
 800133c:	e000      	b.n	8001340 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 800133e:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	f003 0310 	and.w	r3, r3, #16
 8001346:	697a      	ldr	r2, [r7, #20]
 8001348:	fa02 f303 	lsl.w	r3, r2, r3
 800134c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800134e:	4313      	orrs	r3, r2
 8001350:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001358:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	6819      	ldr	r1, [r3, #0]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	f003 0310 	and.w	r3, r3, #16
 8001366:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800136a:	fa02 f303 	lsl.w	r3, r2, r3
 800136e:	43da      	mvns	r2, r3
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	400a      	ands	r2, r1
 8001376:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	f003 0310 	and.w	r3, r3, #16
 8001386:	f640 72fe 	movw	r2, #4094	@ 0xffe
 800138a:	fa02 f303 	lsl.w	r3, r2, r3
 800138e:	43db      	mvns	r3, r3
 8001390:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001392:	4013      	ands	r3, r2
 8001394:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8001396:	68bb      	ldr	r3, [r7, #8]
 8001398:	68db      	ldr	r3, [r3, #12]
 800139a:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	f003 0310 	and.w	r3, r3, #16
 80013a2:	697a      	ldr	r2, [r7, #20]
 80013a4:	fa02 f303 	lsl.w	r3, r2, r3
 80013a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80013aa:	4313      	orrs	r3, r2
 80013ac:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80013b4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	6819      	ldr	r1, [r3, #0]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	f003 0310 	and.w	r3, r3, #16
 80013c2:	22c0      	movs	r2, #192	@ 0xc0
 80013c4:	fa02 f303 	lsl.w	r3, r2, r3
 80013c8:	43da      	mvns	r2, r3
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	400a      	ands	r2, r1
 80013d0:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	68db      	ldr	r3, [r3, #12]
 80013d6:	089b      	lsrs	r3, r3, #2
 80013d8:	f003 030f 	and.w	r3, r3, #15
 80013dc:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80013de:	68bb      	ldr	r3, [r7, #8]
 80013e0:	691b      	ldr	r3, [r3, #16]
 80013e2:	089b      	lsrs	r3, r3, #2
 80013e4:	021b      	lsls	r3, r3, #8
 80013e6:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80013ea:	697a      	ldr	r2, [r7, #20]
 80013ec:	4313      	orrs	r3, r2
 80013ee:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	f003 0310 	and.w	r3, r3, #16
 80013fc:	f640 710f 	movw	r1, #3855	@ 0xf0f
 8001400:	fa01 f303 	lsl.w	r3, r1, r3
 8001404:	43db      	mvns	r3, r3
 8001406:	ea02 0103 	and.w	r1, r2, r3
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	f003 0310 	and.w	r3, r3, #16
 8001410:	697a      	ldr	r2, [r7, #20]
 8001412:	409a      	lsls	r2, r3
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	430a      	orrs	r2, r1
 800141a:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	2201      	movs	r2, #1
 8001420:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	2200      	movs	r2, #0
 8001426:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8001428:	7ffb      	ldrb	r3, [r7, #31]
}
 800142a:	4618      	mov	r0, r3
 800142c:	3728      	adds	r7, #40	@ 0x28
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	09896800 	.word	0x09896800
 8001438:	04c4b400 	.word	0x04c4b400

0800143c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800143c:	b480      	push	{r7}
 800143e:	b087      	sub	sp, #28
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001446:	2300      	movs	r3, #0
 8001448:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800144a:	e15a      	b.n	8001702 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	2101      	movs	r1, #1
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	fa01 f303 	lsl.w	r3, r1, r3
 8001458:	4013      	ands	r3, r2
 800145a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	2b00      	cmp	r3, #0
 8001460:	f000 814c 	beq.w	80016fc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f003 0303 	and.w	r3, r3, #3
 800146c:	2b01      	cmp	r3, #1
 800146e:	d005      	beq.n	800147c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001478:	2b02      	cmp	r3, #2
 800147a:	d130      	bne.n	80014de <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	2203      	movs	r2, #3
 8001488:	fa02 f303 	lsl.w	r3, r2, r3
 800148c:	43db      	mvns	r3, r3
 800148e:	693a      	ldr	r2, [r7, #16]
 8001490:	4013      	ands	r3, r2
 8001492:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	68da      	ldr	r2, [r3, #12]
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	005b      	lsls	r3, r3, #1
 800149c:	fa02 f303 	lsl.w	r3, r2, r3
 80014a0:	693a      	ldr	r2, [r7, #16]
 80014a2:	4313      	orrs	r3, r2
 80014a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	693a      	ldr	r2, [r7, #16]
 80014aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014b2:	2201      	movs	r2, #1
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ba:	43db      	mvns	r3, r3
 80014bc:	693a      	ldr	r2, [r7, #16]
 80014be:	4013      	ands	r3, r2
 80014c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	091b      	lsrs	r3, r3, #4
 80014c8:	f003 0201 	and.w	r2, r3, #1
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	fa02 f303 	lsl.w	r3, r2, r3
 80014d2:	693a      	ldr	r2, [r7, #16]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	693a      	ldr	r2, [r7, #16]
 80014dc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	f003 0303 	and.w	r3, r3, #3
 80014e6:	2b03      	cmp	r3, #3
 80014e8:	d017      	beq.n	800151a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	68db      	ldr	r3, [r3, #12]
 80014ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	005b      	lsls	r3, r3, #1
 80014f4:	2203      	movs	r2, #3
 80014f6:	fa02 f303 	lsl.w	r3, r2, r3
 80014fa:	43db      	mvns	r3, r3
 80014fc:	693a      	ldr	r2, [r7, #16]
 80014fe:	4013      	ands	r3, r2
 8001500:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	689a      	ldr	r2, [r3, #8]
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	005b      	lsls	r3, r3, #1
 800150a:	fa02 f303 	lsl.w	r3, r2, r3
 800150e:	693a      	ldr	r2, [r7, #16]
 8001510:	4313      	orrs	r3, r2
 8001512:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	693a      	ldr	r2, [r7, #16]
 8001518:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	f003 0303 	and.w	r3, r3, #3
 8001522:	2b02      	cmp	r3, #2
 8001524:	d123      	bne.n	800156e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	08da      	lsrs	r2, r3, #3
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	3208      	adds	r2, #8
 800152e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001532:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	f003 0307 	and.w	r3, r3, #7
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	220f      	movs	r2, #15
 800153e:	fa02 f303 	lsl.w	r3, r2, r3
 8001542:	43db      	mvns	r3, r3
 8001544:	693a      	ldr	r2, [r7, #16]
 8001546:	4013      	ands	r3, r2
 8001548:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	691a      	ldr	r2, [r3, #16]
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	f003 0307 	and.w	r3, r3, #7
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	fa02 f303 	lsl.w	r3, r2, r3
 800155a:	693a      	ldr	r2, [r7, #16]
 800155c:	4313      	orrs	r3, r2
 800155e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	08da      	lsrs	r2, r3, #3
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	3208      	adds	r2, #8
 8001568:	6939      	ldr	r1, [r7, #16]
 800156a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	005b      	lsls	r3, r3, #1
 8001578:	2203      	movs	r2, #3
 800157a:	fa02 f303 	lsl.w	r3, r2, r3
 800157e:	43db      	mvns	r3, r3
 8001580:	693a      	ldr	r2, [r7, #16]
 8001582:	4013      	ands	r3, r2
 8001584:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	f003 0203 	and.w	r2, r3, #3
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	005b      	lsls	r3, r3, #1
 8001592:	fa02 f303 	lsl.w	r3, r2, r3
 8001596:	693a      	ldr	r2, [r7, #16]
 8001598:	4313      	orrs	r3, r2
 800159a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	693a      	ldr	r2, [r7, #16]
 80015a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	f000 80a6 	beq.w	80016fc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015b0:	4b5b      	ldr	r3, [pc, #364]	@ (8001720 <HAL_GPIO_Init+0x2e4>)
 80015b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015b4:	4a5a      	ldr	r2, [pc, #360]	@ (8001720 <HAL_GPIO_Init+0x2e4>)
 80015b6:	f043 0301 	orr.w	r3, r3, #1
 80015ba:	6613      	str	r3, [r2, #96]	@ 0x60
 80015bc:	4b58      	ldr	r3, [pc, #352]	@ (8001720 <HAL_GPIO_Init+0x2e4>)
 80015be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015c0:	f003 0301 	and.w	r3, r3, #1
 80015c4:	60bb      	str	r3, [r7, #8]
 80015c6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015c8:	4a56      	ldr	r2, [pc, #344]	@ (8001724 <HAL_GPIO_Init+0x2e8>)
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	089b      	lsrs	r3, r3, #2
 80015ce:	3302      	adds	r3, #2
 80015d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	f003 0303 	and.w	r3, r3, #3
 80015dc:	009b      	lsls	r3, r3, #2
 80015de:	220f      	movs	r2, #15
 80015e0:	fa02 f303 	lsl.w	r3, r2, r3
 80015e4:	43db      	mvns	r3, r3
 80015e6:	693a      	ldr	r2, [r7, #16]
 80015e8:	4013      	ands	r3, r2
 80015ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80015f2:	d01f      	beq.n	8001634 <HAL_GPIO_Init+0x1f8>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	4a4c      	ldr	r2, [pc, #304]	@ (8001728 <HAL_GPIO_Init+0x2ec>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d019      	beq.n	8001630 <HAL_GPIO_Init+0x1f4>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	4a4b      	ldr	r2, [pc, #300]	@ (800172c <HAL_GPIO_Init+0x2f0>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d013      	beq.n	800162c <HAL_GPIO_Init+0x1f0>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	4a4a      	ldr	r2, [pc, #296]	@ (8001730 <HAL_GPIO_Init+0x2f4>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d00d      	beq.n	8001628 <HAL_GPIO_Init+0x1ec>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	4a49      	ldr	r2, [pc, #292]	@ (8001734 <HAL_GPIO_Init+0x2f8>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d007      	beq.n	8001624 <HAL_GPIO_Init+0x1e8>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	4a48      	ldr	r2, [pc, #288]	@ (8001738 <HAL_GPIO_Init+0x2fc>)
 8001618:	4293      	cmp	r3, r2
 800161a:	d101      	bne.n	8001620 <HAL_GPIO_Init+0x1e4>
 800161c:	2305      	movs	r3, #5
 800161e:	e00a      	b.n	8001636 <HAL_GPIO_Init+0x1fa>
 8001620:	2306      	movs	r3, #6
 8001622:	e008      	b.n	8001636 <HAL_GPIO_Init+0x1fa>
 8001624:	2304      	movs	r3, #4
 8001626:	e006      	b.n	8001636 <HAL_GPIO_Init+0x1fa>
 8001628:	2303      	movs	r3, #3
 800162a:	e004      	b.n	8001636 <HAL_GPIO_Init+0x1fa>
 800162c:	2302      	movs	r3, #2
 800162e:	e002      	b.n	8001636 <HAL_GPIO_Init+0x1fa>
 8001630:	2301      	movs	r3, #1
 8001632:	e000      	b.n	8001636 <HAL_GPIO_Init+0x1fa>
 8001634:	2300      	movs	r3, #0
 8001636:	697a      	ldr	r2, [r7, #20]
 8001638:	f002 0203 	and.w	r2, r2, #3
 800163c:	0092      	lsls	r2, r2, #2
 800163e:	4093      	lsls	r3, r2
 8001640:	693a      	ldr	r2, [r7, #16]
 8001642:	4313      	orrs	r3, r2
 8001644:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001646:	4937      	ldr	r1, [pc, #220]	@ (8001724 <HAL_GPIO_Init+0x2e8>)
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	089b      	lsrs	r3, r3, #2
 800164c:	3302      	adds	r3, #2
 800164e:	693a      	ldr	r2, [r7, #16]
 8001650:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001654:	4b39      	ldr	r3, [pc, #228]	@ (800173c <HAL_GPIO_Init+0x300>)
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	43db      	mvns	r3, r3
 800165e:	693a      	ldr	r2, [r7, #16]
 8001660:	4013      	ands	r3, r2
 8001662:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800166c:	2b00      	cmp	r3, #0
 800166e:	d003      	beq.n	8001678 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001670:	693a      	ldr	r2, [r7, #16]
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	4313      	orrs	r3, r2
 8001676:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001678:	4a30      	ldr	r2, [pc, #192]	@ (800173c <HAL_GPIO_Init+0x300>)
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800167e:	4b2f      	ldr	r3, [pc, #188]	@ (800173c <HAL_GPIO_Init+0x300>)
 8001680:	68db      	ldr	r3, [r3, #12]
 8001682:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	43db      	mvns	r3, r3
 8001688:	693a      	ldr	r2, [r7, #16]
 800168a:	4013      	ands	r3, r2
 800168c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d003      	beq.n	80016a2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800169a:	693a      	ldr	r2, [r7, #16]
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	4313      	orrs	r3, r2
 80016a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80016a2:	4a26      	ldr	r2, [pc, #152]	@ (800173c <HAL_GPIO_Init+0x300>)
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80016a8:	4b24      	ldr	r3, [pc, #144]	@ (800173c <HAL_GPIO_Init+0x300>)
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	43db      	mvns	r3, r3
 80016b2:	693a      	ldr	r2, [r7, #16]
 80016b4:	4013      	ands	r3, r2
 80016b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d003      	beq.n	80016cc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80016c4:	693a      	ldr	r2, [r7, #16]
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	4313      	orrs	r3, r2
 80016ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80016cc:	4a1b      	ldr	r2, [pc, #108]	@ (800173c <HAL_GPIO_Init+0x300>)
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80016d2:	4b1a      	ldr	r3, [pc, #104]	@ (800173c <HAL_GPIO_Init+0x300>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	43db      	mvns	r3, r3
 80016dc:	693a      	ldr	r2, [r7, #16]
 80016de:	4013      	ands	r3, r2
 80016e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d003      	beq.n	80016f6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80016ee:	693a      	ldr	r2, [r7, #16]
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	4313      	orrs	r3, r2
 80016f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80016f6:	4a11      	ldr	r2, [pc, #68]	@ (800173c <HAL_GPIO_Init+0x300>)
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	3301      	adds	r3, #1
 8001700:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	fa22 f303 	lsr.w	r3, r2, r3
 800170c:	2b00      	cmp	r3, #0
 800170e:	f47f ae9d 	bne.w	800144c <HAL_GPIO_Init+0x10>
  }
}
 8001712:	bf00      	nop
 8001714:	bf00      	nop
 8001716:	371c      	adds	r7, #28
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr
 8001720:	40021000 	.word	0x40021000
 8001724:	40010000 	.word	0x40010000
 8001728:	48000400 	.word	0x48000400
 800172c:	48000800 	.word	0x48000800
 8001730:	48000c00 	.word	0x48000c00
 8001734:	48001000 	.word	0x48001000
 8001738:	48001400 	.word	0x48001400
 800173c:	40010400 	.word	0x40010400

08001740 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	460b      	mov	r3, r1
 800174a:	807b      	strh	r3, [r7, #2]
 800174c:	4613      	mov	r3, r2
 800174e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001750:	787b      	ldrb	r3, [r7, #1]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d003      	beq.n	800175e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001756:	887a      	ldrh	r2, [r7, #2]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800175c:	e002      	b.n	8001764 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800175e:	887a      	ldrh	r2, [r7, #2]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001764:	bf00      	nop
 8001766:	370c      	adds	r7, #12
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr

08001770 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	4603      	mov	r3, r0
 8001778:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800177a:	4b08      	ldr	r3, [pc, #32]	@ (800179c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800177c:	695a      	ldr	r2, [r3, #20]
 800177e:	88fb      	ldrh	r3, [r7, #6]
 8001780:	4013      	ands	r3, r2
 8001782:	2b00      	cmp	r3, #0
 8001784:	d006      	beq.n	8001794 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001786:	4a05      	ldr	r2, [pc, #20]	@ (800179c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001788:	88fb      	ldrh	r3, [r7, #6]
 800178a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800178c:	88fb      	ldrh	r3, [r7, #6]
 800178e:	4618      	mov	r0, r3
 8001790:	f000 f806 	bl	80017a0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001794:	bf00      	nop
 8001796:	3708      	adds	r7, #8
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	40010400 	.word	0x40010400

080017a0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	4603      	mov	r3, r0
 80017a8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80017aa:	bf00      	nop
 80017ac:	370c      	adds	r7, #12
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
	...

080017b8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b085      	sub	sp, #20
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d141      	bne.n	800184a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80017c6:	4b4b      	ldr	r3, [pc, #300]	@ (80018f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80017ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80017d2:	d131      	bne.n	8001838 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80017d4:	4b47      	ldr	r3, [pc, #284]	@ (80018f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80017da:	4a46      	ldr	r2, [pc, #280]	@ (80018f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80017e0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80017e4:	4b43      	ldr	r3, [pc, #268]	@ (80018f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80017ec:	4a41      	ldr	r2, [pc, #260]	@ (80018f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80017f2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80017f4:	4b40      	ldr	r3, [pc, #256]	@ (80018f8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	2232      	movs	r2, #50	@ 0x32
 80017fa:	fb02 f303 	mul.w	r3, r2, r3
 80017fe:	4a3f      	ldr	r2, [pc, #252]	@ (80018fc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001800:	fba2 2303 	umull	r2, r3, r2, r3
 8001804:	0c9b      	lsrs	r3, r3, #18
 8001806:	3301      	adds	r3, #1
 8001808:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800180a:	e002      	b.n	8001812 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	3b01      	subs	r3, #1
 8001810:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001812:	4b38      	ldr	r3, [pc, #224]	@ (80018f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001814:	695b      	ldr	r3, [r3, #20]
 8001816:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800181a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800181e:	d102      	bne.n	8001826 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d1f2      	bne.n	800180c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001826:	4b33      	ldr	r3, [pc, #204]	@ (80018f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001828:	695b      	ldr	r3, [r3, #20]
 800182a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800182e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001832:	d158      	bne.n	80018e6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001834:	2303      	movs	r3, #3
 8001836:	e057      	b.n	80018e8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001838:	4b2e      	ldr	r3, [pc, #184]	@ (80018f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800183a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800183e:	4a2d      	ldr	r2, [pc, #180]	@ (80018f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001840:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001844:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001848:	e04d      	b.n	80018e6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001850:	d141      	bne.n	80018d6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001852:	4b28      	ldr	r3, [pc, #160]	@ (80018f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800185a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800185e:	d131      	bne.n	80018c4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001860:	4b24      	ldr	r3, [pc, #144]	@ (80018f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001862:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001866:	4a23      	ldr	r2, [pc, #140]	@ (80018f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001868:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800186c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001870:	4b20      	ldr	r3, [pc, #128]	@ (80018f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001878:	4a1e      	ldr	r2, [pc, #120]	@ (80018f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800187a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800187e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001880:	4b1d      	ldr	r3, [pc, #116]	@ (80018f8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	2232      	movs	r2, #50	@ 0x32
 8001886:	fb02 f303 	mul.w	r3, r2, r3
 800188a:	4a1c      	ldr	r2, [pc, #112]	@ (80018fc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800188c:	fba2 2303 	umull	r2, r3, r2, r3
 8001890:	0c9b      	lsrs	r3, r3, #18
 8001892:	3301      	adds	r3, #1
 8001894:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001896:	e002      	b.n	800189e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	3b01      	subs	r3, #1
 800189c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800189e:	4b15      	ldr	r3, [pc, #84]	@ (80018f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018a0:	695b      	ldr	r3, [r3, #20]
 80018a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80018aa:	d102      	bne.n	80018b2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d1f2      	bne.n	8001898 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80018b2:	4b10      	ldr	r3, [pc, #64]	@ (80018f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018b4:	695b      	ldr	r3, [r3, #20]
 80018b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80018be:	d112      	bne.n	80018e6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80018c0:	2303      	movs	r3, #3
 80018c2:	e011      	b.n	80018e8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80018c4:	4b0b      	ldr	r3, [pc, #44]	@ (80018f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80018ca:	4a0a      	ldr	r2, [pc, #40]	@ (80018f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018d0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80018d4:	e007      	b.n	80018e6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80018d6:	4b07      	ldr	r3, [pc, #28]	@ (80018f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80018de:	4a05      	ldr	r2, [pc, #20]	@ (80018f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018e0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80018e4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80018e6:	2300      	movs	r3, #0
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3714      	adds	r7, #20
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr
 80018f4:	40007000 	.word	0x40007000
 80018f8:	2001b588 	.word	0x2001b588
 80018fc:	431bde83 	.word	0x431bde83

08001900 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001904:	4b05      	ldr	r3, [pc, #20]	@ (800191c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	4a04      	ldr	r2, [pc, #16]	@ (800191c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800190a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800190e:	6093      	str	r3, [r2, #8]
}
 8001910:	bf00      	nop
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	40007000 	.word	0x40007000

08001920 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b088      	sub	sp, #32
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d101      	bne.n	8001932 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e2fe      	b.n	8001f30 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 0301 	and.w	r3, r3, #1
 800193a:	2b00      	cmp	r3, #0
 800193c:	d075      	beq.n	8001a2a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800193e:	4b97      	ldr	r3, [pc, #604]	@ (8001b9c <HAL_RCC_OscConfig+0x27c>)
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	f003 030c 	and.w	r3, r3, #12
 8001946:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001948:	4b94      	ldr	r3, [pc, #592]	@ (8001b9c <HAL_RCC_OscConfig+0x27c>)
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	f003 0303 	and.w	r3, r3, #3
 8001950:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001952:	69bb      	ldr	r3, [r7, #24]
 8001954:	2b0c      	cmp	r3, #12
 8001956:	d102      	bne.n	800195e <HAL_RCC_OscConfig+0x3e>
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	2b03      	cmp	r3, #3
 800195c:	d002      	beq.n	8001964 <HAL_RCC_OscConfig+0x44>
 800195e:	69bb      	ldr	r3, [r7, #24]
 8001960:	2b08      	cmp	r3, #8
 8001962:	d10b      	bne.n	800197c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001964:	4b8d      	ldr	r3, [pc, #564]	@ (8001b9c <HAL_RCC_OscConfig+0x27c>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800196c:	2b00      	cmp	r3, #0
 800196e:	d05b      	beq.n	8001a28 <HAL_RCC_OscConfig+0x108>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d157      	bne.n	8001a28 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001978:	2301      	movs	r3, #1
 800197a:	e2d9      	b.n	8001f30 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001984:	d106      	bne.n	8001994 <HAL_RCC_OscConfig+0x74>
 8001986:	4b85      	ldr	r3, [pc, #532]	@ (8001b9c <HAL_RCC_OscConfig+0x27c>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a84      	ldr	r2, [pc, #528]	@ (8001b9c <HAL_RCC_OscConfig+0x27c>)
 800198c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001990:	6013      	str	r3, [r2, #0]
 8001992:	e01d      	b.n	80019d0 <HAL_RCC_OscConfig+0xb0>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800199c:	d10c      	bne.n	80019b8 <HAL_RCC_OscConfig+0x98>
 800199e:	4b7f      	ldr	r3, [pc, #508]	@ (8001b9c <HAL_RCC_OscConfig+0x27c>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a7e      	ldr	r2, [pc, #504]	@ (8001b9c <HAL_RCC_OscConfig+0x27c>)
 80019a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80019a8:	6013      	str	r3, [r2, #0]
 80019aa:	4b7c      	ldr	r3, [pc, #496]	@ (8001b9c <HAL_RCC_OscConfig+0x27c>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a7b      	ldr	r2, [pc, #492]	@ (8001b9c <HAL_RCC_OscConfig+0x27c>)
 80019b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019b4:	6013      	str	r3, [r2, #0]
 80019b6:	e00b      	b.n	80019d0 <HAL_RCC_OscConfig+0xb0>
 80019b8:	4b78      	ldr	r3, [pc, #480]	@ (8001b9c <HAL_RCC_OscConfig+0x27c>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a77      	ldr	r2, [pc, #476]	@ (8001b9c <HAL_RCC_OscConfig+0x27c>)
 80019be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80019c2:	6013      	str	r3, [r2, #0]
 80019c4:	4b75      	ldr	r3, [pc, #468]	@ (8001b9c <HAL_RCC_OscConfig+0x27c>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a74      	ldr	r2, [pc, #464]	@ (8001b9c <HAL_RCC_OscConfig+0x27c>)
 80019ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80019ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d013      	beq.n	8001a00 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019d8:	f7ff f9a0 	bl	8000d1c <HAL_GetTick>
 80019dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019de:	e008      	b.n	80019f2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019e0:	f7ff f99c 	bl	8000d1c <HAL_GetTick>
 80019e4:	4602      	mov	r2, r0
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	2b64      	cmp	r3, #100	@ 0x64
 80019ec:	d901      	bls.n	80019f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	e29e      	b.n	8001f30 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019f2:	4b6a      	ldr	r3, [pc, #424]	@ (8001b9c <HAL_RCC_OscConfig+0x27c>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d0f0      	beq.n	80019e0 <HAL_RCC_OscConfig+0xc0>
 80019fe:	e014      	b.n	8001a2a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a00:	f7ff f98c 	bl	8000d1c <HAL_GetTick>
 8001a04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a06:	e008      	b.n	8001a1a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a08:	f7ff f988 	bl	8000d1c <HAL_GetTick>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	2b64      	cmp	r3, #100	@ 0x64
 8001a14:	d901      	bls.n	8001a1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a16:	2303      	movs	r3, #3
 8001a18:	e28a      	b.n	8001f30 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a1a:	4b60      	ldr	r3, [pc, #384]	@ (8001b9c <HAL_RCC_OscConfig+0x27c>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d1f0      	bne.n	8001a08 <HAL_RCC_OscConfig+0xe8>
 8001a26:	e000      	b.n	8001a2a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 0302 	and.w	r3, r3, #2
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d075      	beq.n	8001b22 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a36:	4b59      	ldr	r3, [pc, #356]	@ (8001b9c <HAL_RCC_OscConfig+0x27c>)
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	f003 030c 	and.w	r3, r3, #12
 8001a3e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a40:	4b56      	ldr	r3, [pc, #344]	@ (8001b9c <HAL_RCC_OscConfig+0x27c>)
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	f003 0303 	and.w	r3, r3, #3
 8001a48:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001a4a:	69bb      	ldr	r3, [r7, #24]
 8001a4c:	2b0c      	cmp	r3, #12
 8001a4e:	d102      	bne.n	8001a56 <HAL_RCC_OscConfig+0x136>
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	2b02      	cmp	r3, #2
 8001a54:	d002      	beq.n	8001a5c <HAL_RCC_OscConfig+0x13c>
 8001a56:	69bb      	ldr	r3, [r7, #24]
 8001a58:	2b04      	cmp	r3, #4
 8001a5a:	d11f      	bne.n	8001a9c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a5c:	4b4f      	ldr	r3, [pc, #316]	@ (8001b9c <HAL_RCC_OscConfig+0x27c>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d005      	beq.n	8001a74 <HAL_RCC_OscConfig+0x154>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d101      	bne.n	8001a74 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	e25d      	b.n	8001f30 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a74:	4b49      	ldr	r3, [pc, #292]	@ (8001b9c <HAL_RCC_OscConfig+0x27c>)
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	691b      	ldr	r3, [r3, #16]
 8001a80:	061b      	lsls	r3, r3, #24
 8001a82:	4946      	ldr	r1, [pc, #280]	@ (8001b9c <HAL_RCC_OscConfig+0x27c>)
 8001a84:	4313      	orrs	r3, r2
 8001a86:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001a88:	4b45      	ldr	r3, [pc, #276]	@ (8001ba0 <HAL_RCC_OscConfig+0x280>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f7ff f8f9 	bl	8000c84 <HAL_InitTick>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d043      	beq.n	8001b20 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e249      	b.n	8001f30 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d023      	beq.n	8001aec <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001aa4:	4b3d      	ldr	r3, [pc, #244]	@ (8001b9c <HAL_RCC_OscConfig+0x27c>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a3c      	ldr	r2, [pc, #240]	@ (8001b9c <HAL_RCC_OscConfig+0x27c>)
 8001aaa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001aae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ab0:	f7ff f934 	bl	8000d1c <HAL_GetTick>
 8001ab4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ab6:	e008      	b.n	8001aca <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ab8:	f7ff f930 	bl	8000d1c <HAL_GetTick>
 8001abc:	4602      	mov	r2, r0
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d901      	bls.n	8001aca <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	e232      	b.n	8001f30 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001aca:	4b34      	ldr	r3, [pc, #208]	@ (8001b9c <HAL_RCC_OscConfig+0x27c>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d0f0      	beq.n	8001ab8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ad6:	4b31      	ldr	r3, [pc, #196]	@ (8001b9c <HAL_RCC_OscConfig+0x27c>)
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	691b      	ldr	r3, [r3, #16]
 8001ae2:	061b      	lsls	r3, r3, #24
 8001ae4:	492d      	ldr	r1, [pc, #180]	@ (8001b9c <HAL_RCC_OscConfig+0x27c>)
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	604b      	str	r3, [r1, #4]
 8001aea:	e01a      	b.n	8001b22 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001aec:	4b2b      	ldr	r3, [pc, #172]	@ (8001b9c <HAL_RCC_OscConfig+0x27c>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a2a      	ldr	r2, [pc, #168]	@ (8001b9c <HAL_RCC_OscConfig+0x27c>)
 8001af2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001af6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001af8:	f7ff f910 	bl	8000d1c <HAL_GetTick>
 8001afc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001afe:	e008      	b.n	8001b12 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b00:	f7ff f90c 	bl	8000d1c <HAL_GetTick>
 8001b04:	4602      	mov	r2, r0
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d901      	bls.n	8001b12 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e20e      	b.n	8001f30 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b12:	4b22      	ldr	r3, [pc, #136]	@ (8001b9c <HAL_RCC_OscConfig+0x27c>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d1f0      	bne.n	8001b00 <HAL_RCC_OscConfig+0x1e0>
 8001b1e:	e000      	b.n	8001b22 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b20:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 0308 	and.w	r3, r3, #8
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d041      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	695b      	ldr	r3, [r3, #20]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d01c      	beq.n	8001b70 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b36:	4b19      	ldr	r3, [pc, #100]	@ (8001b9c <HAL_RCC_OscConfig+0x27c>)
 8001b38:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b3c:	4a17      	ldr	r2, [pc, #92]	@ (8001b9c <HAL_RCC_OscConfig+0x27c>)
 8001b3e:	f043 0301 	orr.w	r3, r3, #1
 8001b42:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b46:	f7ff f8e9 	bl	8000d1c <HAL_GetTick>
 8001b4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b4c:	e008      	b.n	8001b60 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b4e:	f7ff f8e5 	bl	8000d1c <HAL_GetTick>
 8001b52:	4602      	mov	r2, r0
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	1ad3      	subs	r3, r2, r3
 8001b58:	2b02      	cmp	r3, #2
 8001b5a:	d901      	bls.n	8001b60 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	e1e7      	b.n	8001f30 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b60:	4b0e      	ldr	r3, [pc, #56]	@ (8001b9c <HAL_RCC_OscConfig+0x27c>)
 8001b62:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b66:	f003 0302 	and.w	r3, r3, #2
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d0ef      	beq.n	8001b4e <HAL_RCC_OscConfig+0x22e>
 8001b6e:	e020      	b.n	8001bb2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b70:	4b0a      	ldr	r3, [pc, #40]	@ (8001b9c <HAL_RCC_OscConfig+0x27c>)
 8001b72:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b76:	4a09      	ldr	r2, [pc, #36]	@ (8001b9c <HAL_RCC_OscConfig+0x27c>)
 8001b78:	f023 0301 	bic.w	r3, r3, #1
 8001b7c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b80:	f7ff f8cc 	bl	8000d1c <HAL_GetTick>
 8001b84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b86:	e00d      	b.n	8001ba4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b88:	f7ff f8c8 	bl	8000d1c <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d906      	bls.n	8001ba4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e1ca      	b.n	8001f30 <HAL_RCC_OscConfig+0x610>
 8001b9a:	bf00      	nop
 8001b9c:	40021000 	.word	0x40021000
 8001ba0:	2001b58c 	.word	0x2001b58c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ba4:	4b8c      	ldr	r3, [pc, #560]	@ (8001dd8 <HAL_RCC_OscConfig+0x4b8>)
 8001ba6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001baa:	f003 0302 	and.w	r3, r3, #2
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d1ea      	bne.n	8001b88 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 0304 	and.w	r3, r3, #4
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	f000 80a6 	beq.w	8001d0c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001bc4:	4b84      	ldr	r3, [pc, #528]	@ (8001dd8 <HAL_RCC_OscConfig+0x4b8>)
 8001bc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bc8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d101      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x2b4>
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e000      	b.n	8001bd6 <HAL_RCC_OscConfig+0x2b6>
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d00d      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bda:	4b7f      	ldr	r3, [pc, #508]	@ (8001dd8 <HAL_RCC_OscConfig+0x4b8>)
 8001bdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bde:	4a7e      	ldr	r2, [pc, #504]	@ (8001dd8 <HAL_RCC_OscConfig+0x4b8>)
 8001be0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001be4:	6593      	str	r3, [r2, #88]	@ 0x58
 8001be6:	4b7c      	ldr	r3, [pc, #496]	@ (8001dd8 <HAL_RCC_OscConfig+0x4b8>)
 8001be8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bee:	60fb      	str	r3, [r7, #12]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bf6:	4b79      	ldr	r3, [pc, #484]	@ (8001ddc <HAL_RCC_OscConfig+0x4bc>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d118      	bne.n	8001c34 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c02:	4b76      	ldr	r3, [pc, #472]	@ (8001ddc <HAL_RCC_OscConfig+0x4bc>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a75      	ldr	r2, [pc, #468]	@ (8001ddc <HAL_RCC_OscConfig+0x4bc>)
 8001c08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c0e:	f7ff f885 	bl	8000d1c <HAL_GetTick>
 8001c12:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c14:	e008      	b.n	8001c28 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c16:	f7ff f881 	bl	8000d1c <HAL_GetTick>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	1ad3      	subs	r3, r2, r3
 8001c20:	2b02      	cmp	r3, #2
 8001c22:	d901      	bls.n	8001c28 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001c24:	2303      	movs	r3, #3
 8001c26:	e183      	b.n	8001f30 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c28:	4b6c      	ldr	r3, [pc, #432]	@ (8001ddc <HAL_RCC_OscConfig+0x4bc>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d0f0      	beq.n	8001c16 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d108      	bne.n	8001c4e <HAL_RCC_OscConfig+0x32e>
 8001c3c:	4b66      	ldr	r3, [pc, #408]	@ (8001dd8 <HAL_RCC_OscConfig+0x4b8>)
 8001c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c42:	4a65      	ldr	r2, [pc, #404]	@ (8001dd8 <HAL_RCC_OscConfig+0x4b8>)
 8001c44:	f043 0301 	orr.w	r3, r3, #1
 8001c48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c4c:	e024      	b.n	8001c98 <HAL_RCC_OscConfig+0x378>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	2b05      	cmp	r3, #5
 8001c54:	d110      	bne.n	8001c78 <HAL_RCC_OscConfig+0x358>
 8001c56:	4b60      	ldr	r3, [pc, #384]	@ (8001dd8 <HAL_RCC_OscConfig+0x4b8>)
 8001c58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c5c:	4a5e      	ldr	r2, [pc, #376]	@ (8001dd8 <HAL_RCC_OscConfig+0x4b8>)
 8001c5e:	f043 0304 	orr.w	r3, r3, #4
 8001c62:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c66:	4b5c      	ldr	r3, [pc, #368]	@ (8001dd8 <HAL_RCC_OscConfig+0x4b8>)
 8001c68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c6c:	4a5a      	ldr	r2, [pc, #360]	@ (8001dd8 <HAL_RCC_OscConfig+0x4b8>)
 8001c6e:	f043 0301 	orr.w	r3, r3, #1
 8001c72:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c76:	e00f      	b.n	8001c98 <HAL_RCC_OscConfig+0x378>
 8001c78:	4b57      	ldr	r3, [pc, #348]	@ (8001dd8 <HAL_RCC_OscConfig+0x4b8>)
 8001c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c7e:	4a56      	ldr	r2, [pc, #344]	@ (8001dd8 <HAL_RCC_OscConfig+0x4b8>)
 8001c80:	f023 0301 	bic.w	r3, r3, #1
 8001c84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c88:	4b53      	ldr	r3, [pc, #332]	@ (8001dd8 <HAL_RCC_OscConfig+0x4b8>)
 8001c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c8e:	4a52      	ldr	r2, [pc, #328]	@ (8001dd8 <HAL_RCC_OscConfig+0x4b8>)
 8001c90:	f023 0304 	bic.w	r3, r3, #4
 8001c94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d016      	beq.n	8001cce <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ca0:	f7ff f83c 	bl	8000d1c <HAL_GetTick>
 8001ca4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ca6:	e00a      	b.n	8001cbe <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ca8:	f7ff f838 	bl	8000d1c <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d901      	bls.n	8001cbe <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e138      	b.n	8001f30 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cbe:	4b46      	ldr	r3, [pc, #280]	@ (8001dd8 <HAL_RCC_OscConfig+0x4b8>)
 8001cc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cc4:	f003 0302 	and.w	r3, r3, #2
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d0ed      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x388>
 8001ccc:	e015      	b.n	8001cfa <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cce:	f7ff f825 	bl	8000d1c <HAL_GetTick>
 8001cd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001cd4:	e00a      	b.n	8001cec <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cd6:	f7ff f821 	bl	8000d1c <HAL_GetTick>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d901      	bls.n	8001cec <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001ce8:	2303      	movs	r3, #3
 8001cea:	e121      	b.n	8001f30 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001cec:	4b3a      	ldr	r3, [pc, #232]	@ (8001dd8 <HAL_RCC_OscConfig+0x4b8>)
 8001cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cf2:	f003 0302 	and.w	r3, r3, #2
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d1ed      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001cfa:	7ffb      	ldrb	r3, [r7, #31]
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d105      	bne.n	8001d0c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d00:	4b35      	ldr	r3, [pc, #212]	@ (8001dd8 <HAL_RCC_OscConfig+0x4b8>)
 8001d02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d04:	4a34      	ldr	r2, [pc, #208]	@ (8001dd8 <HAL_RCC_OscConfig+0x4b8>)
 8001d06:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d0a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 0320 	and.w	r3, r3, #32
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d03c      	beq.n	8001d92 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	699b      	ldr	r3, [r3, #24]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d01c      	beq.n	8001d5a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001d20:	4b2d      	ldr	r3, [pc, #180]	@ (8001dd8 <HAL_RCC_OscConfig+0x4b8>)
 8001d22:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001d26:	4a2c      	ldr	r2, [pc, #176]	@ (8001dd8 <HAL_RCC_OscConfig+0x4b8>)
 8001d28:	f043 0301 	orr.w	r3, r3, #1
 8001d2c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d30:	f7fe fff4 	bl	8000d1c <HAL_GetTick>
 8001d34:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d36:	e008      	b.n	8001d4a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d38:	f7fe fff0 	bl	8000d1c <HAL_GetTick>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	2b02      	cmp	r3, #2
 8001d44:	d901      	bls.n	8001d4a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e0f2      	b.n	8001f30 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d4a:	4b23      	ldr	r3, [pc, #140]	@ (8001dd8 <HAL_RCC_OscConfig+0x4b8>)
 8001d4c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001d50:	f003 0302 	and.w	r3, r3, #2
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d0ef      	beq.n	8001d38 <HAL_RCC_OscConfig+0x418>
 8001d58:	e01b      	b.n	8001d92 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001d5a:	4b1f      	ldr	r3, [pc, #124]	@ (8001dd8 <HAL_RCC_OscConfig+0x4b8>)
 8001d5c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001d60:	4a1d      	ldr	r2, [pc, #116]	@ (8001dd8 <HAL_RCC_OscConfig+0x4b8>)
 8001d62:	f023 0301 	bic.w	r3, r3, #1
 8001d66:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d6a:	f7fe ffd7 	bl	8000d1c <HAL_GetTick>
 8001d6e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d70:	e008      	b.n	8001d84 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d72:	f7fe ffd3 	bl	8000d1c <HAL_GetTick>
 8001d76:	4602      	mov	r2, r0
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	1ad3      	subs	r3, r2, r3
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d901      	bls.n	8001d84 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001d80:	2303      	movs	r3, #3
 8001d82:	e0d5      	b.n	8001f30 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d84:	4b14      	ldr	r3, [pc, #80]	@ (8001dd8 <HAL_RCC_OscConfig+0x4b8>)
 8001d86:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001d8a:	f003 0302 	and.w	r3, r3, #2
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d1ef      	bne.n	8001d72 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	69db      	ldr	r3, [r3, #28]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	f000 80c9 	beq.w	8001f2e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d9c:	4b0e      	ldr	r3, [pc, #56]	@ (8001dd8 <HAL_RCC_OscConfig+0x4b8>)
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	f003 030c 	and.w	r3, r3, #12
 8001da4:	2b0c      	cmp	r3, #12
 8001da6:	f000 8083 	beq.w	8001eb0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	69db      	ldr	r3, [r3, #28]
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d15e      	bne.n	8001e70 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001db2:	4b09      	ldr	r3, [pc, #36]	@ (8001dd8 <HAL_RCC_OscConfig+0x4b8>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a08      	ldr	r2, [pc, #32]	@ (8001dd8 <HAL_RCC_OscConfig+0x4b8>)
 8001db8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001dbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dbe:	f7fe ffad 	bl	8000d1c <HAL_GetTick>
 8001dc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dc4:	e00c      	b.n	8001de0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dc6:	f7fe ffa9 	bl	8000d1c <HAL_GetTick>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	1ad3      	subs	r3, r2, r3
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	d905      	bls.n	8001de0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	e0ab      	b.n	8001f30 <HAL_RCC_OscConfig+0x610>
 8001dd8:	40021000 	.word	0x40021000
 8001ddc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001de0:	4b55      	ldr	r3, [pc, #340]	@ (8001f38 <HAL_RCC_OscConfig+0x618>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d1ec      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dec:	4b52      	ldr	r3, [pc, #328]	@ (8001f38 <HAL_RCC_OscConfig+0x618>)
 8001dee:	68da      	ldr	r2, [r3, #12]
 8001df0:	4b52      	ldr	r3, [pc, #328]	@ (8001f3c <HAL_RCC_OscConfig+0x61c>)
 8001df2:	4013      	ands	r3, r2
 8001df4:	687a      	ldr	r2, [r7, #4]
 8001df6:	6a11      	ldr	r1, [r2, #32]
 8001df8:	687a      	ldr	r2, [r7, #4]
 8001dfa:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001dfc:	3a01      	subs	r2, #1
 8001dfe:	0112      	lsls	r2, r2, #4
 8001e00:	4311      	orrs	r1, r2
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001e06:	0212      	lsls	r2, r2, #8
 8001e08:	4311      	orrs	r1, r2
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001e0e:	0852      	lsrs	r2, r2, #1
 8001e10:	3a01      	subs	r2, #1
 8001e12:	0552      	lsls	r2, r2, #21
 8001e14:	4311      	orrs	r1, r2
 8001e16:	687a      	ldr	r2, [r7, #4]
 8001e18:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001e1a:	0852      	lsrs	r2, r2, #1
 8001e1c:	3a01      	subs	r2, #1
 8001e1e:	0652      	lsls	r2, r2, #25
 8001e20:	4311      	orrs	r1, r2
 8001e22:	687a      	ldr	r2, [r7, #4]
 8001e24:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001e26:	06d2      	lsls	r2, r2, #27
 8001e28:	430a      	orrs	r2, r1
 8001e2a:	4943      	ldr	r1, [pc, #268]	@ (8001f38 <HAL_RCC_OscConfig+0x618>)
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e30:	4b41      	ldr	r3, [pc, #260]	@ (8001f38 <HAL_RCC_OscConfig+0x618>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a40      	ldr	r2, [pc, #256]	@ (8001f38 <HAL_RCC_OscConfig+0x618>)
 8001e36:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e3a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e3c:	4b3e      	ldr	r3, [pc, #248]	@ (8001f38 <HAL_RCC_OscConfig+0x618>)
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	4a3d      	ldr	r2, [pc, #244]	@ (8001f38 <HAL_RCC_OscConfig+0x618>)
 8001e42:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e46:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e48:	f7fe ff68 	bl	8000d1c <HAL_GetTick>
 8001e4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e4e:	e008      	b.n	8001e62 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e50:	f7fe ff64 	bl	8000d1c <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	d901      	bls.n	8001e62 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e066      	b.n	8001f30 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e62:	4b35      	ldr	r3, [pc, #212]	@ (8001f38 <HAL_RCC_OscConfig+0x618>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d0f0      	beq.n	8001e50 <HAL_RCC_OscConfig+0x530>
 8001e6e:	e05e      	b.n	8001f2e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e70:	4b31      	ldr	r3, [pc, #196]	@ (8001f38 <HAL_RCC_OscConfig+0x618>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a30      	ldr	r2, [pc, #192]	@ (8001f38 <HAL_RCC_OscConfig+0x618>)
 8001e76:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001e7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e7c:	f7fe ff4e 	bl	8000d1c <HAL_GetTick>
 8001e80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e82:	e008      	b.n	8001e96 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e84:	f7fe ff4a 	bl	8000d1c <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d901      	bls.n	8001e96 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e04c      	b.n	8001f30 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e96:	4b28      	ldr	r3, [pc, #160]	@ (8001f38 <HAL_RCC_OscConfig+0x618>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d1f0      	bne.n	8001e84 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001ea2:	4b25      	ldr	r3, [pc, #148]	@ (8001f38 <HAL_RCC_OscConfig+0x618>)
 8001ea4:	68da      	ldr	r2, [r3, #12]
 8001ea6:	4924      	ldr	r1, [pc, #144]	@ (8001f38 <HAL_RCC_OscConfig+0x618>)
 8001ea8:	4b25      	ldr	r3, [pc, #148]	@ (8001f40 <HAL_RCC_OscConfig+0x620>)
 8001eaa:	4013      	ands	r3, r2
 8001eac:	60cb      	str	r3, [r1, #12]
 8001eae:	e03e      	b.n	8001f2e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	69db      	ldr	r3, [r3, #28]
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d101      	bne.n	8001ebc <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e039      	b.n	8001f30 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001ebc:	4b1e      	ldr	r3, [pc, #120]	@ (8001f38 <HAL_RCC_OscConfig+0x618>)
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	f003 0203 	and.w	r2, r3, #3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6a1b      	ldr	r3, [r3, #32]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d12c      	bne.n	8001f2a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eda:	3b01      	subs	r3, #1
 8001edc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d123      	bne.n	8001f2a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eec:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d11b      	bne.n	8001f2a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001efc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d113      	bne.n	8001f2a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f0c:	085b      	lsrs	r3, r3, #1
 8001f0e:	3b01      	subs	r3, #1
 8001f10:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d109      	bne.n	8001f2a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f20:	085b      	lsrs	r3, r3, #1
 8001f22:	3b01      	subs	r3, #1
 8001f24:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d001      	beq.n	8001f2e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e000      	b.n	8001f30 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001f2e:	2300      	movs	r3, #0
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3720      	adds	r7, #32
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	40021000 	.word	0x40021000
 8001f3c:	019f800c 	.word	0x019f800c
 8001f40:	feeefffc 	.word	0xfeeefffc

08001f44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b086      	sub	sp, #24
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d101      	bne.n	8001f5c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e11e      	b.n	800219a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f5c:	4b91      	ldr	r3, [pc, #580]	@ (80021a4 <HAL_RCC_ClockConfig+0x260>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 030f 	and.w	r3, r3, #15
 8001f64:	683a      	ldr	r2, [r7, #0]
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d910      	bls.n	8001f8c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f6a:	4b8e      	ldr	r3, [pc, #568]	@ (80021a4 <HAL_RCC_ClockConfig+0x260>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f023 020f 	bic.w	r2, r3, #15
 8001f72:	498c      	ldr	r1, [pc, #560]	@ (80021a4 <HAL_RCC_ClockConfig+0x260>)
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f7a:	4b8a      	ldr	r3, [pc, #552]	@ (80021a4 <HAL_RCC_ClockConfig+0x260>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 030f 	and.w	r3, r3, #15
 8001f82:	683a      	ldr	r2, [r7, #0]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d001      	beq.n	8001f8c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e106      	b.n	800219a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0301 	and.w	r3, r3, #1
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d073      	beq.n	8002080 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	2b03      	cmp	r3, #3
 8001f9e:	d129      	bne.n	8001ff4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fa0:	4b81      	ldr	r3, [pc, #516]	@ (80021a8 <HAL_RCC_ClockConfig+0x264>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d101      	bne.n	8001fb0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e0f4      	b.n	800219a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001fb0:	f000 f99e 	bl	80022f0 <RCC_GetSysClockFreqFromPLLSource>
 8001fb4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	4a7c      	ldr	r2, [pc, #496]	@ (80021ac <HAL_RCC_ClockConfig+0x268>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d93f      	bls.n	800203e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001fbe:	4b7a      	ldr	r3, [pc, #488]	@ (80021a8 <HAL_RCC_ClockConfig+0x264>)
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d009      	beq.n	8001fde <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d033      	beq.n	800203e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d12f      	bne.n	800203e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001fde:	4b72      	ldr	r3, [pc, #456]	@ (80021a8 <HAL_RCC_ClockConfig+0x264>)
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001fe6:	4a70      	ldr	r2, [pc, #448]	@ (80021a8 <HAL_RCC_ClockConfig+0x264>)
 8001fe8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001fec:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001fee:	2380      	movs	r3, #128	@ 0x80
 8001ff0:	617b      	str	r3, [r7, #20]
 8001ff2:	e024      	b.n	800203e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	d107      	bne.n	800200c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ffc:	4b6a      	ldr	r3, [pc, #424]	@ (80021a8 <HAL_RCC_ClockConfig+0x264>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002004:	2b00      	cmp	r3, #0
 8002006:	d109      	bne.n	800201c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e0c6      	b.n	800219a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800200c:	4b66      	ldr	r3, [pc, #408]	@ (80021a8 <HAL_RCC_ClockConfig+0x264>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002014:	2b00      	cmp	r3, #0
 8002016:	d101      	bne.n	800201c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	e0be      	b.n	800219a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800201c:	f000 f8ce 	bl	80021bc <HAL_RCC_GetSysClockFreq>
 8002020:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	4a61      	ldr	r2, [pc, #388]	@ (80021ac <HAL_RCC_ClockConfig+0x268>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d909      	bls.n	800203e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800202a:	4b5f      	ldr	r3, [pc, #380]	@ (80021a8 <HAL_RCC_ClockConfig+0x264>)
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002032:	4a5d      	ldr	r2, [pc, #372]	@ (80021a8 <HAL_RCC_ClockConfig+0x264>)
 8002034:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002038:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800203a:	2380      	movs	r3, #128	@ 0x80
 800203c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800203e:	4b5a      	ldr	r3, [pc, #360]	@ (80021a8 <HAL_RCC_ClockConfig+0x264>)
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	f023 0203 	bic.w	r2, r3, #3
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	4957      	ldr	r1, [pc, #348]	@ (80021a8 <HAL_RCC_ClockConfig+0x264>)
 800204c:	4313      	orrs	r3, r2
 800204e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002050:	f7fe fe64 	bl	8000d1c <HAL_GetTick>
 8002054:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002056:	e00a      	b.n	800206e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002058:	f7fe fe60 	bl	8000d1c <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002066:	4293      	cmp	r3, r2
 8002068:	d901      	bls.n	800206e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e095      	b.n	800219a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800206e:	4b4e      	ldr	r3, [pc, #312]	@ (80021a8 <HAL_RCC_ClockConfig+0x264>)
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	f003 020c 	and.w	r2, r3, #12
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	429a      	cmp	r2, r3
 800207e:	d1eb      	bne.n	8002058 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0302 	and.w	r3, r3, #2
 8002088:	2b00      	cmp	r3, #0
 800208a:	d023      	beq.n	80020d4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0304 	and.w	r3, r3, #4
 8002094:	2b00      	cmp	r3, #0
 8002096:	d005      	beq.n	80020a4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002098:	4b43      	ldr	r3, [pc, #268]	@ (80021a8 <HAL_RCC_ClockConfig+0x264>)
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	4a42      	ldr	r2, [pc, #264]	@ (80021a8 <HAL_RCC_ClockConfig+0x264>)
 800209e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80020a2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0308 	and.w	r3, r3, #8
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d007      	beq.n	80020c0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80020b0:	4b3d      	ldr	r3, [pc, #244]	@ (80021a8 <HAL_RCC_ClockConfig+0x264>)
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80020b8:	4a3b      	ldr	r2, [pc, #236]	@ (80021a8 <HAL_RCC_ClockConfig+0x264>)
 80020ba:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80020be:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020c0:	4b39      	ldr	r3, [pc, #228]	@ (80021a8 <HAL_RCC_ClockConfig+0x264>)
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	4936      	ldr	r1, [pc, #216]	@ (80021a8 <HAL_RCC_ClockConfig+0x264>)
 80020ce:	4313      	orrs	r3, r2
 80020d0:	608b      	str	r3, [r1, #8]
 80020d2:	e008      	b.n	80020e6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	2b80      	cmp	r3, #128	@ 0x80
 80020d8:	d105      	bne.n	80020e6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80020da:	4b33      	ldr	r3, [pc, #204]	@ (80021a8 <HAL_RCC_ClockConfig+0x264>)
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	4a32      	ldr	r2, [pc, #200]	@ (80021a8 <HAL_RCC_ClockConfig+0x264>)
 80020e0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80020e4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020e6:	4b2f      	ldr	r3, [pc, #188]	@ (80021a4 <HAL_RCC_ClockConfig+0x260>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 030f 	and.w	r3, r3, #15
 80020ee:	683a      	ldr	r2, [r7, #0]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d21d      	bcs.n	8002130 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020f4:	4b2b      	ldr	r3, [pc, #172]	@ (80021a4 <HAL_RCC_ClockConfig+0x260>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f023 020f 	bic.w	r2, r3, #15
 80020fc:	4929      	ldr	r1, [pc, #164]	@ (80021a4 <HAL_RCC_ClockConfig+0x260>)
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	4313      	orrs	r3, r2
 8002102:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002104:	f7fe fe0a 	bl	8000d1c <HAL_GetTick>
 8002108:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800210a:	e00a      	b.n	8002122 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800210c:	f7fe fe06 	bl	8000d1c <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	f241 3288 	movw	r2, #5000	@ 0x1388
 800211a:	4293      	cmp	r3, r2
 800211c:	d901      	bls.n	8002122 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e03b      	b.n	800219a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002122:	4b20      	ldr	r3, [pc, #128]	@ (80021a4 <HAL_RCC_ClockConfig+0x260>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 030f 	and.w	r3, r3, #15
 800212a:	683a      	ldr	r2, [r7, #0]
 800212c:	429a      	cmp	r2, r3
 800212e:	d1ed      	bne.n	800210c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 0304 	and.w	r3, r3, #4
 8002138:	2b00      	cmp	r3, #0
 800213a:	d008      	beq.n	800214e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800213c:	4b1a      	ldr	r3, [pc, #104]	@ (80021a8 <HAL_RCC_ClockConfig+0x264>)
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	4917      	ldr	r1, [pc, #92]	@ (80021a8 <HAL_RCC_ClockConfig+0x264>)
 800214a:	4313      	orrs	r3, r2
 800214c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 0308 	and.w	r3, r3, #8
 8002156:	2b00      	cmp	r3, #0
 8002158:	d009      	beq.n	800216e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800215a:	4b13      	ldr	r3, [pc, #76]	@ (80021a8 <HAL_RCC_ClockConfig+0x264>)
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	691b      	ldr	r3, [r3, #16]
 8002166:	00db      	lsls	r3, r3, #3
 8002168:	490f      	ldr	r1, [pc, #60]	@ (80021a8 <HAL_RCC_ClockConfig+0x264>)
 800216a:	4313      	orrs	r3, r2
 800216c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800216e:	f000 f825 	bl	80021bc <HAL_RCC_GetSysClockFreq>
 8002172:	4602      	mov	r2, r0
 8002174:	4b0c      	ldr	r3, [pc, #48]	@ (80021a8 <HAL_RCC_ClockConfig+0x264>)
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	091b      	lsrs	r3, r3, #4
 800217a:	f003 030f 	and.w	r3, r3, #15
 800217e:	490c      	ldr	r1, [pc, #48]	@ (80021b0 <HAL_RCC_ClockConfig+0x26c>)
 8002180:	5ccb      	ldrb	r3, [r1, r3]
 8002182:	f003 031f 	and.w	r3, r3, #31
 8002186:	fa22 f303 	lsr.w	r3, r2, r3
 800218a:	4a0a      	ldr	r2, [pc, #40]	@ (80021b4 <HAL_RCC_ClockConfig+0x270>)
 800218c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800218e:	4b0a      	ldr	r3, [pc, #40]	@ (80021b8 <HAL_RCC_ClockConfig+0x274>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4618      	mov	r0, r3
 8002194:	f7fe fd76 	bl	8000c84 <HAL_InitTick>
 8002198:	4603      	mov	r3, r0
}
 800219a:	4618      	mov	r0, r3
 800219c:	3718      	adds	r7, #24
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	40022000 	.word	0x40022000
 80021a8:	40021000 	.word	0x40021000
 80021ac:	04c4b400 	.word	0x04c4b400
 80021b0:	08003ba0 	.word	0x08003ba0
 80021b4:	2001b588 	.word	0x2001b588
 80021b8:	2001b58c 	.word	0x2001b58c

080021bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	b087      	sub	sp, #28
 80021c0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80021c2:	4b2c      	ldr	r3, [pc, #176]	@ (8002274 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	f003 030c 	and.w	r3, r3, #12
 80021ca:	2b04      	cmp	r3, #4
 80021cc:	d102      	bne.n	80021d4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80021ce:	4b2a      	ldr	r3, [pc, #168]	@ (8002278 <HAL_RCC_GetSysClockFreq+0xbc>)
 80021d0:	613b      	str	r3, [r7, #16]
 80021d2:	e047      	b.n	8002264 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80021d4:	4b27      	ldr	r3, [pc, #156]	@ (8002274 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	f003 030c 	and.w	r3, r3, #12
 80021dc:	2b08      	cmp	r3, #8
 80021de:	d102      	bne.n	80021e6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80021e0:	4b26      	ldr	r3, [pc, #152]	@ (800227c <HAL_RCC_GetSysClockFreq+0xc0>)
 80021e2:	613b      	str	r3, [r7, #16]
 80021e4:	e03e      	b.n	8002264 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80021e6:	4b23      	ldr	r3, [pc, #140]	@ (8002274 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	f003 030c 	and.w	r3, r3, #12
 80021ee:	2b0c      	cmp	r3, #12
 80021f0:	d136      	bne.n	8002260 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80021f2:	4b20      	ldr	r3, [pc, #128]	@ (8002274 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021f4:	68db      	ldr	r3, [r3, #12]
 80021f6:	f003 0303 	and.w	r3, r3, #3
 80021fa:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80021fc:	4b1d      	ldr	r3, [pc, #116]	@ (8002274 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	091b      	lsrs	r3, r3, #4
 8002202:	f003 030f 	and.w	r3, r3, #15
 8002206:	3301      	adds	r3, #1
 8002208:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2b03      	cmp	r3, #3
 800220e:	d10c      	bne.n	800222a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002210:	4a1a      	ldr	r2, [pc, #104]	@ (800227c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	fbb2 f3f3 	udiv	r3, r2, r3
 8002218:	4a16      	ldr	r2, [pc, #88]	@ (8002274 <HAL_RCC_GetSysClockFreq+0xb8>)
 800221a:	68d2      	ldr	r2, [r2, #12]
 800221c:	0a12      	lsrs	r2, r2, #8
 800221e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002222:	fb02 f303 	mul.w	r3, r2, r3
 8002226:	617b      	str	r3, [r7, #20]
      break;
 8002228:	e00c      	b.n	8002244 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800222a:	4a13      	ldr	r2, [pc, #76]	@ (8002278 <HAL_RCC_GetSysClockFreq+0xbc>)
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002232:	4a10      	ldr	r2, [pc, #64]	@ (8002274 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002234:	68d2      	ldr	r2, [r2, #12]
 8002236:	0a12      	lsrs	r2, r2, #8
 8002238:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800223c:	fb02 f303 	mul.w	r3, r2, r3
 8002240:	617b      	str	r3, [r7, #20]
      break;
 8002242:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002244:	4b0b      	ldr	r3, [pc, #44]	@ (8002274 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	0e5b      	lsrs	r3, r3, #25
 800224a:	f003 0303 	and.w	r3, r3, #3
 800224e:	3301      	adds	r3, #1
 8002250:	005b      	lsls	r3, r3, #1
 8002252:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002254:	697a      	ldr	r2, [r7, #20]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	fbb2 f3f3 	udiv	r3, r2, r3
 800225c:	613b      	str	r3, [r7, #16]
 800225e:	e001      	b.n	8002264 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002260:	2300      	movs	r3, #0
 8002262:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002264:	693b      	ldr	r3, [r7, #16]
}
 8002266:	4618      	mov	r0, r3
 8002268:	371c      	adds	r7, #28
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	40021000 	.word	0x40021000
 8002278:	00f42400 	.word	0x00f42400
 800227c:	016e3600 	.word	0x016e3600

08002280 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002284:	4b03      	ldr	r3, [pc, #12]	@ (8002294 <HAL_RCC_GetHCLKFreq+0x14>)
 8002286:	681b      	ldr	r3, [r3, #0]
}
 8002288:	4618      	mov	r0, r3
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr
 8002292:	bf00      	nop
 8002294:	2001b588 	.word	0x2001b588

08002298 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800229c:	f7ff fff0 	bl	8002280 <HAL_RCC_GetHCLKFreq>
 80022a0:	4602      	mov	r2, r0
 80022a2:	4b06      	ldr	r3, [pc, #24]	@ (80022bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	0a1b      	lsrs	r3, r3, #8
 80022a8:	f003 0307 	and.w	r3, r3, #7
 80022ac:	4904      	ldr	r1, [pc, #16]	@ (80022c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80022ae:	5ccb      	ldrb	r3, [r1, r3]
 80022b0:	f003 031f 	and.w	r3, r3, #31
 80022b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	40021000 	.word	0x40021000
 80022c0:	08003bb0 	.word	0x08003bb0

080022c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80022c8:	f7ff ffda 	bl	8002280 <HAL_RCC_GetHCLKFreq>
 80022cc:	4602      	mov	r2, r0
 80022ce:	4b06      	ldr	r3, [pc, #24]	@ (80022e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	0adb      	lsrs	r3, r3, #11
 80022d4:	f003 0307 	and.w	r3, r3, #7
 80022d8:	4904      	ldr	r1, [pc, #16]	@ (80022ec <HAL_RCC_GetPCLK2Freq+0x28>)
 80022da:	5ccb      	ldrb	r3, [r1, r3]
 80022dc:	f003 031f 	and.w	r3, r3, #31
 80022e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	40021000 	.word	0x40021000
 80022ec:	08003bb0 	.word	0x08003bb0

080022f0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b087      	sub	sp, #28
 80022f4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80022f6:	4b1e      	ldr	r3, [pc, #120]	@ (8002370 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	f003 0303 	and.w	r3, r3, #3
 80022fe:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002300:	4b1b      	ldr	r3, [pc, #108]	@ (8002370 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	091b      	lsrs	r3, r3, #4
 8002306:	f003 030f 	and.w	r3, r3, #15
 800230a:	3301      	adds	r3, #1
 800230c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	2b03      	cmp	r3, #3
 8002312:	d10c      	bne.n	800232e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002314:	4a17      	ldr	r2, [pc, #92]	@ (8002374 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	fbb2 f3f3 	udiv	r3, r2, r3
 800231c:	4a14      	ldr	r2, [pc, #80]	@ (8002370 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800231e:	68d2      	ldr	r2, [r2, #12]
 8002320:	0a12      	lsrs	r2, r2, #8
 8002322:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002326:	fb02 f303 	mul.w	r3, r2, r3
 800232a:	617b      	str	r3, [r7, #20]
    break;
 800232c:	e00c      	b.n	8002348 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800232e:	4a12      	ldr	r2, [pc, #72]	@ (8002378 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	fbb2 f3f3 	udiv	r3, r2, r3
 8002336:	4a0e      	ldr	r2, [pc, #56]	@ (8002370 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002338:	68d2      	ldr	r2, [r2, #12]
 800233a:	0a12      	lsrs	r2, r2, #8
 800233c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002340:	fb02 f303 	mul.w	r3, r2, r3
 8002344:	617b      	str	r3, [r7, #20]
    break;
 8002346:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002348:	4b09      	ldr	r3, [pc, #36]	@ (8002370 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	0e5b      	lsrs	r3, r3, #25
 800234e:	f003 0303 	and.w	r3, r3, #3
 8002352:	3301      	adds	r3, #1
 8002354:	005b      	lsls	r3, r3, #1
 8002356:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002358:	697a      	ldr	r2, [r7, #20]
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002360:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002362:	687b      	ldr	r3, [r7, #4]
}
 8002364:	4618      	mov	r0, r3
 8002366:	371c      	adds	r7, #28
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr
 8002370:	40021000 	.word	0x40021000
 8002374:	016e3600 	.word	0x016e3600
 8002378:	00f42400 	.word	0x00f42400

0800237c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b086      	sub	sp, #24
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002384:	2300      	movs	r3, #0
 8002386:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002388:	2300      	movs	r3, #0
 800238a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002394:	2b00      	cmp	r3, #0
 8002396:	f000 8098 	beq.w	80024ca <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800239a:	2300      	movs	r3, #0
 800239c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800239e:	4b43      	ldr	r3, [pc, #268]	@ (80024ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d10d      	bne.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023aa:	4b40      	ldr	r3, [pc, #256]	@ (80024ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023ae:	4a3f      	ldr	r2, [pc, #252]	@ (80024ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80023b6:	4b3d      	ldr	r3, [pc, #244]	@ (80024ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023be:	60bb      	str	r3, [r7, #8]
 80023c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023c2:	2301      	movs	r3, #1
 80023c4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023c6:	4b3a      	ldr	r3, [pc, #232]	@ (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a39      	ldr	r2, [pc, #228]	@ (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80023cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023d0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80023d2:	f7fe fca3 	bl	8000d1c <HAL_GetTick>
 80023d6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80023d8:	e009      	b.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023da:	f7fe fc9f 	bl	8000d1c <HAL_GetTick>
 80023de:	4602      	mov	r2, r0
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	2b02      	cmp	r3, #2
 80023e6:	d902      	bls.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80023e8:	2303      	movs	r3, #3
 80023ea:	74fb      	strb	r3, [r7, #19]
        break;
 80023ec:	e005      	b.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80023ee:	4b30      	ldr	r3, [pc, #192]	@ (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d0ef      	beq.n	80023da <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80023fa:	7cfb      	ldrb	r3, [r7, #19]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d159      	bne.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002400:	4b2a      	ldr	r3, [pc, #168]	@ (80024ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002402:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002406:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800240a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d01e      	beq.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002416:	697a      	ldr	r2, [r7, #20]
 8002418:	429a      	cmp	r2, r3
 800241a:	d019      	beq.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800241c:	4b23      	ldr	r3, [pc, #140]	@ (80024ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800241e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002422:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002426:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002428:	4b20      	ldr	r3, [pc, #128]	@ (80024ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800242a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800242e:	4a1f      	ldr	r2, [pc, #124]	@ (80024ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002430:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002434:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002438:	4b1c      	ldr	r3, [pc, #112]	@ (80024ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800243a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800243e:	4a1b      	ldr	r2, [pc, #108]	@ (80024ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002440:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002444:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002448:	4a18      	ldr	r2, [pc, #96]	@ (80024ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	f003 0301 	and.w	r3, r3, #1
 8002456:	2b00      	cmp	r3, #0
 8002458:	d016      	beq.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800245a:	f7fe fc5f 	bl	8000d1c <HAL_GetTick>
 800245e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002460:	e00b      	b.n	800247a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002462:	f7fe fc5b 	bl	8000d1c <HAL_GetTick>
 8002466:	4602      	mov	r2, r0
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002470:	4293      	cmp	r3, r2
 8002472:	d902      	bls.n	800247a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002474:	2303      	movs	r3, #3
 8002476:	74fb      	strb	r3, [r7, #19]
            break;
 8002478:	e006      	b.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800247a:	4b0c      	ldr	r3, [pc, #48]	@ (80024ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800247c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002480:	f003 0302 	and.w	r3, r3, #2
 8002484:	2b00      	cmp	r3, #0
 8002486:	d0ec      	beq.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002488:	7cfb      	ldrb	r3, [r7, #19]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d10b      	bne.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800248e:	4b07      	ldr	r3, [pc, #28]	@ (80024ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002490:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002494:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800249c:	4903      	ldr	r1, [pc, #12]	@ (80024ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800249e:	4313      	orrs	r3, r2
 80024a0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80024a4:	e008      	b.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80024a6:	7cfb      	ldrb	r3, [r7, #19]
 80024a8:	74bb      	strb	r3, [r7, #18]
 80024aa:	e005      	b.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80024ac:	40021000 	.word	0x40021000
 80024b0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024b4:	7cfb      	ldrb	r3, [r7, #19]
 80024b6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024b8:	7c7b      	ldrb	r3, [r7, #17]
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d105      	bne.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024be:	4ba7      	ldr	r3, [pc, #668]	@ (800275c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024c2:	4aa6      	ldr	r2, [pc, #664]	@ (800275c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80024c8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0301 	and.w	r3, r3, #1
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d00a      	beq.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80024d6:	4ba1      	ldr	r3, [pc, #644]	@ (800275c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024dc:	f023 0203 	bic.w	r2, r3, #3
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	499d      	ldr	r1, [pc, #628]	@ (800275c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024e6:	4313      	orrs	r3, r2
 80024e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 0302 	and.w	r3, r3, #2
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d00a      	beq.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80024f8:	4b98      	ldr	r3, [pc, #608]	@ (800275c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024fe:	f023 020c 	bic.w	r2, r3, #12
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	4995      	ldr	r1, [pc, #596]	@ (800275c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002508:	4313      	orrs	r3, r2
 800250a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0304 	and.w	r3, r3, #4
 8002516:	2b00      	cmp	r3, #0
 8002518:	d00a      	beq.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800251a:	4b90      	ldr	r3, [pc, #576]	@ (800275c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800251c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002520:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	498c      	ldr	r1, [pc, #560]	@ (800275c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800252a:	4313      	orrs	r3, r2
 800252c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0308 	and.w	r3, r3, #8
 8002538:	2b00      	cmp	r3, #0
 800253a:	d00a      	beq.n	8002552 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800253c:	4b87      	ldr	r3, [pc, #540]	@ (800275c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800253e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002542:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	691b      	ldr	r3, [r3, #16]
 800254a:	4984      	ldr	r1, [pc, #528]	@ (800275c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800254c:	4313      	orrs	r3, r2
 800254e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0310 	and.w	r3, r3, #16
 800255a:	2b00      	cmp	r3, #0
 800255c:	d00a      	beq.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800255e:	4b7f      	ldr	r3, [pc, #508]	@ (800275c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002560:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002564:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	695b      	ldr	r3, [r3, #20]
 800256c:	497b      	ldr	r1, [pc, #492]	@ (800275c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800256e:	4313      	orrs	r3, r2
 8002570:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0320 	and.w	r3, r3, #32
 800257c:	2b00      	cmp	r3, #0
 800257e:	d00a      	beq.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002580:	4b76      	ldr	r3, [pc, #472]	@ (800275c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002582:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002586:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	699b      	ldr	r3, [r3, #24]
 800258e:	4973      	ldr	r1, [pc, #460]	@ (800275c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002590:	4313      	orrs	r3, r2
 8002592:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d00a      	beq.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025a2:	4b6e      	ldr	r3, [pc, #440]	@ (800275c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025a8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	69db      	ldr	r3, [r3, #28]
 80025b0:	496a      	ldr	r1, [pc, #424]	@ (800275c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025b2:	4313      	orrs	r3, r2
 80025b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d00a      	beq.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80025c4:	4b65      	ldr	r3, [pc, #404]	@ (800275c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025ca:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6a1b      	ldr	r3, [r3, #32]
 80025d2:	4962      	ldr	r1, [pc, #392]	@ (800275c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025d4:	4313      	orrs	r3, r2
 80025d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d00a      	beq.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80025e6:	4b5d      	ldr	r3, [pc, #372]	@ (800275c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025ec:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025f4:	4959      	ldr	r1, [pc, #356]	@ (800275c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025f6:	4313      	orrs	r3, r2
 80025f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002604:	2b00      	cmp	r3, #0
 8002606:	d00a      	beq.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002608:	4b54      	ldr	r3, [pc, #336]	@ (800275c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800260a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800260e:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002616:	4951      	ldr	r1, [pc, #324]	@ (800275c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002618:	4313      	orrs	r3, r2
 800261a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002626:	2b00      	cmp	r3, #0
 8002628:	d015      	beq.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800262a:	4b4c      	ldr	r3, [pc, #304]	@ (800275c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800262c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002630:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002638:	4948      	ldr	r1, [pc, #288]	@ (800275c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800263a:	4313      	orrs	r3, r2
 800263c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002644:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002648:	d105      	bne.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800264a:	4b44      	ldr	r3, [pc, #272]	@ (800275c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800264c:	68db      	ldr	r3, [r3, #12]
 800264e:	4a43      	ldr	r2, [pc, #268]	@ (800275c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002650:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002654:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800265e:	2b00      	cmp	r3, #0
 8002660:	d015      	beq.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002662:	4b3e      	ldr	r3, [pc, #248]	@ (800275c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002664:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002668:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002670:	493a      	ldr	r1, [pc, #232]	@ (800275c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002672:	4313      	orrs	r3, r2
 8002674:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800267c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002680:	d105      	bne.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002682:	4b36      	ldr	r3, [pc, #216]	@ (800275c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002684:	68db      	ldr	r3, [r3, #12]
 8002686:	4a35      	ldr	r2, [pc, #212]	@ (800275c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002688:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800268c:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d015      	beq.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800269a:	4b30      	ldr	r3, [pc, #192]	@ (800275c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800269c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026a0:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026a8:	492c      	ldr	r1, [pc, #176]	@ (800275c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026aa:	4313      	orrs	r3, r2
 80026ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80026b8:	d105      	bne.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026ba:	4b28      	ldr	r3, [pc, #160]	@ (800275c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026bc:	68db      	ldr	r3, [r3, #12]
 80026be:	4a27      	ldr	r2, [pc, #156]	@ (800275c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026c0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80026c4:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d015      	beq.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80026d2:	4b22      	ldr	r3, [pc, #136]	@ (800275c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026d8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026e0:	491e      	ldr	r1, [pc, #120]	@ (800275c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026e2:	4313      	orrs	r3, r2
 80026e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026ec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80026f0:	d105      	bne.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026f2:	4b1a      	ldr	r3, [pc, #104]	@ (800275c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026f4:	68db      	ldr	r3, [r3, #12]
 80026f6:	4a19      	ldr	r2, [pc, #100]	@ (800275c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026f8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80026fc:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d015      	beq.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800270a:	4b14      	ldr	r3, [pc, #80]	@ (800275c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800270c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002710:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002718:	4910      	ldr	r1, [pc, #64]	@ (800275c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800271a:	4313      	orrs	r3, r2
 800271c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002724:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002728:	d105      	bne.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800272a:	4b0c      	ldr	r3, [pc, #48]	@ (800275c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800272c:	68db      	ldr	r3, [r3, #12]
 800272e:	4a0b      	ldr	r2, [pc, #44]	@ (800275c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002730:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002734:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d018      	beq.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002742:	4b06      	ldr	r3, [pc, #24]	@ (800275c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002744:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002748:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002750:	4902      	ldr	r1, [pc, #8]	@ (800275c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002752:	4313      	orrs	r3, r2
 8002754:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	e001      	b.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800275c:	40021000 	.word	0x40021000
 8002760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002762:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002766:	d105      	bne.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002768:	4b21      	ldr	r3, [pc, #132]	@ (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	4a20      	ldr	r2, [pc, #128]	@ (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800276e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002772:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800277c:	2b00      	cmp	r3, #0
 800277e:	d015      	beq.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002780:	4b1b      	ldr	r3, [pc, #108]	@ (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002782:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002786:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800278e:	4918      	ldr	r1, [pc, #96]	@ (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002790:	4313      	orrs	r3, r2
 8002792:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800279a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800279e:	d105      	bne.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80027a0:	4b13      	ldr	r3, [pc, #76]	@ (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	4a12      	ldr	r2, [pc, #72]	@ (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80027a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027aa:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d015      	beq.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80027b8:	4b0d      	ldr	r3, [pc, #52]	@ (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80027ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80027be:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027c6:	490a      	ldr	r1, [pc, #40]	@ (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80027c8:	4313      	orrs	r3, r2
 80027ca:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027d2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80027d6:	d105      	bne.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027d8:	4b05      	ldr	r3, [pc, #20]	@ (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	4a04      	ldr	r2, [pc, #16]	@ (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80027de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80027e2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80027e4:	7cbb      	ldrb	r3, [r7, #18]
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3718      	adds	r7, #24
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	40021000 	.word	0x40021000

080027f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b082      	sub	sp, #8
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d101      	bne.n	8002806 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e049      	b.n	800289a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800280c:	b2db      	uxtb	r3, r3
 800280e:	2b00      	cmp	r3, #0
 8002810:	d106      	bne.n	8002820 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2200      	movs	r2, #0
 8002816:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f7fe f976 	bl	8000b0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2202      	movs	r2, #2
 8002824:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	3304      	adds	r3, #4
 8002830:	4619      	mov	r1, r3
 8002832:	4610      	mov	r0, r2
 8002834:	f000 fa1e 	bl	8002c74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2201      	movs	r2, #1
 800283c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2201      	movs	r2, #1
 8002844:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2201      	movs	r2, #1
 800284c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2201      	movs	r2, #1
 8002854:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2201      	movs	r2, #1
 800285c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2201      	movs	r2, #1
 800286c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2201      	movs	r2, #1
 800287c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2201      	movs	r2, #1
 8002884:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2201      	movs	r2, #1
 800288c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2201      	movs	r2, #1
 8002894:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002898:	2300      	movs	r3, #0
}
 800289a:	4618      	mov	r0, r3
 800289c:	3708      	adds	r7, #8
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
	...

080028a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b085      	sub	sp, #20
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d001      	beq.n	80028bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e04f      	b.n	800295c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2202      	movs	r2, #2
 80028c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	68da      	ldr	r2, [r3, #12]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f042 0201 	orr.w	r2, r2, #1
 80028d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a23      	ldr	r2, [pc, #140]	@ (8002968 <HAL_TIM_Base_Start_IT+0xc4>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d01d      	beq.n	800291a <HAL_TIM_Base_Start_IT+0x76>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028e6:	d018      	beq.n	800291a <HAL_TIM_Base_Start_IT+0x76>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a1f      	ldr	r2, [pc, #124]	@ (800296c <HAL_TIM_Base_Start_IT+0xc8>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d013      	beq.n	800291a <HAL_TIM_Base_Start_IT+0x76>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a1e      	ldr	r2, [pc, #120]	@ (8002970 <HAL_TIM_Base_Start_IT+0xcc>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d00e      	beq.n	800291a <HAL_TIM_Base_Start_IT+0x76>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a1c      	ldr	r2, [pc, #112]	@ (8002974 <HAL_TIM_Base_Start_IT+0xd0>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d009      	beq.n	800291a <HAL_TIM_Base_Start_IT+0x76>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a1b      	ldr	r2, [pc, #108]	@ (8002978 <HAL_TIM_Base_Start_IT+0xd4>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d004      	beq.n	800291a <HAL_TIM_Base_Start_IT+0x76>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a19      	ldr	r2, [pc, #100]	@ (800297c <HAL_TIM_Base_Start_IT+0xd8>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d115      	bne.n	8002946 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	689a      	ldr	r2, [r3, #8]
 8002920:	4b17      	ldr	r3, [pc, #92]	@ (8002980 <HAL_TIM_Base_Start_IT+0xdc>)
 8002922:	4013      	ands	r3, r2
 8002924:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2b06      	cmp	r3, #6
 800292a:	d015      	beq.n	8002958 <HAL_TIM_Base_Start_IT+0xb4>
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002932:	d011      	beq.n	8002958 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f042 0201 	orr.w	r2, r2, #1
 8002942:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002944:	e008      	b.n	8002958 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f042 0201 	orr.w	r2, r2, #1
 8002954:	601a      	str	r2, [r3, #0]
 8002956:	e000      	b.n	800295a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002958:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800295a:	2300      	movs	r3, #0
}
 800295c:	4618      	mov	r0, r3
 800295e:	3714      	adds	r7, #20
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr
 8002968:	40012c00 	.word	0x40012c00
 800296c:	40000400 	.word	0x40000400
 8002970:	40000800 	.word	0x40000800
 8002974:	40013400 	.word	0x40013400
 8002978:	40014000 	.word	0x40014000
 800297c:	40015000 	.word	0x40015000
 8002980:	00010007 	.word	0x00010007

08002984 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b084      	sub	sp, #16
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	691b      	ldr	r3, [r3, #16]
 800299a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	f003 0302 	and.w	r3, r3, #2
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d020      	beq.n	80029e8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	f003 0302 	and.w	r3, r3, #2
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d01b      	beq.n	80029e8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f06f 0202 	mvn.w	r2, #2
 80029b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2201      	movs	r2, #1
 80029be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	699b      	ldr	r3, [r3, #24]
 80029c6:	f003 0303 	and.w	r3, r3, #3
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d003      	beq.n	80029d6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f000 f931 	bl	8002c36 <HAL_TIM_IC_CaptureCallback>
 80029d4:	e005      	b.n	80029e2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f000 f923 	bl	8002c22 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	f000 f934 	bl	8002c4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	f003 0304 	and.w	r3, r3, #4
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d020      	beq.n	8002a34 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	f003 0304 	and.w	r3, r3, #4
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d01b      	beq.n	8002a34 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f06f 0204 	mvn.w	r2, #4
 8002a04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2202      	movs	r2, #2
 8002a0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	699b      	ldr	r3, [r3, #24]
 8002a12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d003      	beq.n	8002a22 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f000 f90b 	bl	8002c36 <HAL_TIM_IC_CaptureCallback>
 8002a20:	e005      	b.n	8002a2e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f000 f8fd 	bl	8002c22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	f000 f90e 	bl	8002c4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	f003 0308 	and.w	r3, r3, #8
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d020      	beq.n	8002a80 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	f003 0308 	and.w	r3, r3, #8
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d01b      	beq.n	8002a80 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f06f 0208 	mvn.w	r2, #8
 8002a50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2204      	movs	r2, #4
 8002a56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	69db      	ldr	r3, [r3, #28]
 8002a5e:	f003 0303 	and.w	r3, r3, #3
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d003      	beq.n	8002a6e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f000 f8e5 	bl	8002c36 <HAL_TIM_IC_CaptureCallback>
 8002a6c:	e005      	b.n	8002a7a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f000 f8d7 	bl	8002c22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	f000 f8e8 	bl	8002c4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	f003 0310 	and.w	r3, r3, #16
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d020      	beq.n	8002acc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	f003 0310 	and.w	r3, r3, #16
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d01b      	beq.n	8002acc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f06f 0210 	mvn.w	r2, #16
 8002a9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2208      	movs	r2, #8
 8002aa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	69db      	ldr	r3, [r3, #28]
 8002aaa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d003      	beq.n	8002aba <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f000 f8bf 	bl	8002c36 <HAL_TIM_IC_CaptureCallback>
 8002ab8:	e005      	b.n	8002ac6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f000 f8b1 	bl	8002c22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	f000 f8c2 	bl	8002c4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	f003 0301 	and.w	r3, r3, #1
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d00c      	beq.n	8002af0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	f003 0301 	and.w	r3, r3, #1
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d007      	beq.n	8002af0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f06f 0201 	mvn.w	r2, #1
 8002ae8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f7fd fed8 	bl	80008a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d104      	bne.n	8002b04 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d00c      	beq.n	8002b1e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d007      	beq.n	8002b1e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8002b16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f000 f95f 	bl	8002ddc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d00c      	beq.n	8002b42 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d007      	beq.n	8002b42 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002b3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	f000 f957 	bl	8002df0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d00c      	beq.n	8002b66 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d007      	beq.n	8002b66 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002b5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	f000 f87c 	bl	8002c5e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	f003 0320 	and.w	r3, r3, #32
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d00c      	beq.n	8002b8a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	f003 0320 	and.w	r3, r3, #32
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d007      	beq.n	8002b8a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f06f 0220 	mvn.w	r2, #32
 8002b82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	f000 f91f 	bl	8002dc8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d00c      	beq.n	8002bae <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d007      	beq.n	8002bae <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8002ba6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f000 f92b 	bl	8002e04 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d00c      	beq.n	8002bd2 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d007      	beq.n	8002bd2 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8002bca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8002bcc:	6878      	ldr	r0, [r7, #4]
 8002bce:	f000 f923 	bl	8002e18 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d00c      	beq.n	8002bf6 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d007      	beq.n	8002bf6 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8002bee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	f000 f91b 	bl	8002e2c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d00c      	beq.n	8002c1a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d007      	beq.n	8002c1a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8002c12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	f000 f913 	bl	8002e40 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c1a:	bf00      	nop
 8002c1c:	3710      	adds	r7, #16
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}

08002c22 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c22:	b480      	push	{r7}
 8002c24:	b083      	sub	sp, #12
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c2a:	bf00      	nop
 8002c2c:	370c      	adds	r7, #12
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr

08002c36 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c36:	b480      	push	{r7}
 8002c38:	b083      	sub	sp, #12
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c3e:	bf00      	nop
 8002c40:	370c      	adds	r7, #12
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr

08002c4a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c4a:	b480      	push	{r7}
 8002c4c:	b083      	sub	sp, #12
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c52:	bf00      	nop
 8002c54:	370c      	adds	r7, #12
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr

08002c5e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c5e:	b480      	push	{r7}
 8002c60:	b083      	sub	sp, #12
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c66:	bf00      	nop
 8002c68:	370c      	adds	r7, #12
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr
	...

08002c74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b085      	sub	sp, #20
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	4a48      	ldr	r2, [pc, #288]	@ (8002da8 <TIM_Base_SetConfig+0x134>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d013      	beq.n	8002cb4 <TIM_Base_SetConfig+0x40>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c92:	d00f      	beq.n	8002cb4 <TIM_Base_SetConfig+0x40>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	4a45      	ldr	r2, [pc, #276]	@ (8002dac <TIM_Base_SetConfig+0x138>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d00b      	beq.n	8002cb4 <TIM_Base_SetConfig+0x40>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	4a44      	ldr	r2, [pc, #272]	@ (8002db0 <TIM_Base_SetConfig+0x13c>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d007      	beq.n	8002cb4 <TIM_Base_SetConfig+0x40>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	4a43      	ldr	r2, [pc, #268]	@ (8002db4 <TIM_Base_SetConfig+0x140>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d003      	beq.n	8002cb4 <TIM_Base_SetConfig+0x40>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	4a42      	ldr	r2, [pc, #264]	@ (8002db8 <TIM_Base_SetConfig+0x144>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d108      	bne.n	8002cc6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002cba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	68fa      	ldr	r2, [r7, #12]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a37      	ldr	r2, [pc, #220]	@ (8002da8 <TIM_Base_SetConfig+0x134>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d01f      	beq.n	8002d0e <TIM_Base_SetConfig+0x9a>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cd4:	d01b      	beq.n	8002d0e <TIM_Base_SetConfig+0x9a>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4a34      	ldr	r2, [pc, #208]	@ (8002dac <TIM_Base_SetConfig+0x138>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d017      	beq.n	8002d0e <TIM_Base_SetConfig+0x9a>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4a33      	ldr	r2, [pc, #204]	@ (8002db0 <TIM_Base_SetConfig+0x13c>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d013      	beq.n	8002d0e <TIM_Base_SetConfig+0x9a>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4a32      	ldr	r2, [pc, #200]	@ (8002db4 <TIM_Base_SetConfig+0x140>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d00f      	beq.n	8002d0e <TIM_Base_SetConfig+0x9a>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4a32      	ldr	r2, [pc, #200]	@ (8002dbc <TIM_Base_SetConfig+0x148>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d00b      	beq.n	8002d0e <TIM_Base_SetConfig+0x9a>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4a31      	ldr	r2, [pc, #196]	@ (8002dc0 <TIM_Base_SetConfig+0x14c>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d007      	beq.n	8002d0e <TIM_Base_SetConfig+0x9a>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4a30      	ldr	r2, [pc, #192]	@ (8002dc4 <TIM_Base_SetConfig+0x150>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d003      	beq.n	8002d0e <TIM_Base_SetConfig+0x9a>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4a2b      	ldr	r2, [pc, #172]	@ (8002db8 <TIM_Base_SetConfig+0x144>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d108      	bne.n	8002d20 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	68fa      	ldr	r2, [r7, #12]
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	695b      	ldr	r3, [r3, #20]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	68fa      	ldr	r2, [r7, #12]
 8002d32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	689a      	ldr	r2, [r3, #8]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	4a18      	ldr	r2, [pc, #96]	@ (8002da8 <TIM_Base_SetConfig+0x134>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d013      	beq.n	8002d74 <TIM_Base_SetConfig+0x100>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	4a19      	ldr	r2, [pc, #100]	@ (8002db4 <TIM_Base_SetConfig+0x140>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d00f      	beq.n	8002d74 <TIM_Base_SetConfig+0x100>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	4a19      	ldr	r2, [pc, #100]	@ (8002dbc <TIM_Base_SetConfig+0x148>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d00b      	beq.n	8002d74 <TIM_Base_SetConfig+0x100>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	4a18      	ldr	r2, [pc, #96]	@ (8002dc0 <TIM_Base_SetConfig+0x14c>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d007      	beq.n	8002d74 <TIM_Base_SetConfig+0x100>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	4a17      	ldr	r2, [pc, #92]	@ (8002dc4 <TIM_Base_SetConfig+0x150>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d003      	beq.n	8002d74 <TIM_Base_SetConfig+0x100>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	4a12      	ldr	r2, [pc, #72]	@ (8002db8 <TIM_Base_SetConfig+0x144>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d103      	bne.n	8002d7c <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	691a      	ldr	r2, [r3, #16]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	691b      	ldr	r3, [r3, #16]
 8002d86:	f003 0301 	and.w	r3, r3, #1
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d105      	bne.n	8002d9a <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	691b      	ldr	r3, [r3, #16]
 8002d92:	f023 0201 	bic.w	r2, r3, #1
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	611a      	str	r2, [r3, #16]
  }
}
 8002d9a:	bf00      	nop
 8002d9c:	3714      	adds	r7, #20
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr
 8002da6:	bf00      	nop
 8002da8:	40012c00 	.word	0x40012c00
 8002dac:	40000400 	.word	0x40000400
 8002db0:	40000800 	.word	0x40000800
 8002db4:	40013400 	.word	0x40013400
 8002db8:	40015000 	.word	0x40015000
 8002dbc:	40014000 	.word	0x40014000
 8002dc0:	40014400 	.word	0x40014400
 8002dc4:	40014800 	.word	0x40014800

08002dc8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002dd0:	bf00      	nop
 8002dd2:	370c      	adds	r7, #12
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr

08002ddc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b083      	sub	sp, #12
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002de4:	bf00      	nop
 8002de6:	370c      	adds	r7, #12
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr

08002df0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002df8:	bf00      	nop
 8002dfa:	370c      	adds	r7, #12
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr

08002e04 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8002e0c:	bf00      	nop
 8002e0e:	370c      	adds	r7, #12
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr

08002e18 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8002e20:	bf00      	nop
 8002e22:	370c      	adds	r7, #12
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr

08002e2c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8002e34:	bf00      	nop
 8002e36:	370c      	adds	r7, #12
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr

08002e40 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8002e48:	bf00      	nop
 8002e4a:	370c      	adds	r7, #12
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr

08002e54 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d101      	bne.n	8002e66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e042      	b.n	8002eec <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d106      	bne.n	8002e7e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	f7fd fdaf 	bl	80009dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2224      	movs	r2, #36	@ 0x24
 8002e82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f022 0201 	bic.w	r2, r2, #1
 8002e94:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d002      	beq.n	8002ea4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f000 fb24 	bl	80034ec <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f000 f825 	bl	8002ef4 <UART_SetConfig>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d101      	bne.n	8002eb4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e01b      	b.n	8002eec <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	685a      	ldr	r2, [r3, #4]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002ec2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	689a      	ldr	r2, [r3, #8]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002ed2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f042 0201 	orr.w	r2, r2, #1
 8002ee2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	f000 fba3 	bl	8003630 <UART_CheckIdleState>
 8002eea:	4603      	mov	r3, r0
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3708      	adds	r7, #8
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}

08002ef4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ef4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ef8:	b08c      	sub	sp, #48	@ 0x30
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002efe:	2300      	movs	r3, #0
 8002f00:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	689a      	ldr	r2, [r3, #8]
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	691b      	ldr	r3, [r3, #16]
 8002f0c:	431a      	orrs	r2, r3
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	695b      	ldr	r3, [r3, #20]
 8002f12:	431a      	orrs	r2, r3
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	69db      	ldr	r3, [r3, #28]
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	4baa      	ldr	r3, [pc, #680]	@ (80031cc <UART_SetConfig+0x2d8>)
 8002f24:	4013      	ands	r3, r2
 8002f26:	697a      	ldr	r2, [r7, #20]
 8002f28:	6812      	ldr	r2, [r2, #0]
 8002f2a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002f2c:	430b      	orrs	r3, r1
 8002f2e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	68da      	ldr	r2, [r3, #12]
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	430a      	orrs	r2, r1
 8002f44:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	699b      	ldr	r3, [r3, #24]
 8002f4a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a9f      	ldr	r2, [pc, #636]	@ (80031d0 <UART_SetConfig+0x2dc>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d004      	beq.n	8002f60 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	6a1b      	ldr	r3, [r3, #32]
 8002f5a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8002f6a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8002f6e:	697a      	ldr	r2, [r7, #20]
 8002f70:	6812      	ldr	r2, [r2, #0]
 8002f72:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002f74:	430b      	orrs	r3, r1
 8002f76:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f7e:	f023 010f 	bic.w	r1, r3, #15
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	430a      	orrs	r2, r1
 8002f8c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a90      	ldr	r2, [pc, #576]	@ (80031d4 <UART_SetConfig+0x2e0>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d125      	bne.n	8002fe4 <UART_SetConfig+0xf0>
 8002f98:	4b8f      	ldr	r3, [pc, #572]	@ (80031d8 <UART_SetConfig+0x2e4>)
 8002f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f9e:	f003 0303 	and.w	r3, r3, #3
 8002fa2:	2b03      	cmp	r3, #3
 8002fa4:	d81a      	bhi.n	8002fdc <UART_SetConfig+0xe8>
 8002fa6:	a201      	add	r2, pc, #4	@ (adr r2, 8002fac <UART_SetConfig+0xb8>)
 8002fa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fac:	08002fbd 	.word	0x08002fbd
 8002fb0:	08002fcd 	.word	0x08002fcd
 8002fb4:	08002fc5 	.word	0x08002fc5
 8002fb8:	08002fd5 	.word	0x08002fd5
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002fc2:	e116      	b.n	80031f2 <UART_SetConfig+0x2fe>
 8002fc4:	2302      	movs	r3, #2
 8002fc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002fca:	e112      	b.n	80031f2 <UART_SetConfig+0x2fe>
 8002fcc:	2304      	movs	r3, #4
 8002fce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002fd2:	e10e      	b.n	80031f2 <UART_SetConfig+0x2fe>
 8002fd4:	2308      	movs	r3, #8
 8002fd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002fda:	e10a      	b.n	80031f2 <UART_SetConfig+0x2fe>
 8002fdc:	2310      	movs	r3, #16
 8002fde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002fe2:	e106      	b.n	80031f2 <UART_SetConfig+0x2fe>
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a7c      	ldr	r2, [pc, #496]	@ (80031dc <UART_SetConfig+0x2e8>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d138      	bne.n	8003060 <UART_SetConfig+0x16c>
 8002fee:	4b7a      	ldr	r3, [pc, #488]	@ (80031d8 <UART_SetConfig+0x2e4>)
 8002ff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ff4:	f003 030c 	and.w	r3, r3, #12
 8002ff8:	2b0c      	cmp	r3, #12
 8002ffa:	d82d      	bhi.n	8003058 <UART_SetConfig+0x164>
 8002ffc:	a201      	add	r2, pc, #4	@ (adr r2, 8003004 <UART_SetConfig+0x110>)
 8002ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003002:	bf00      	nop
 8003004:	08003039 	.word	0x08003039
 8003008:	08003059 	.word	0x08003059
 800300c:	08003059 	.word	0x08003059
 8003010:	08003059 	.word	0x08003059
 8003014:	08003049 	.word	0x08003049
 8003018:	08003059 	.word	0x08003059
 800301c:	08003059 	.word	0x08003059
 8003020:	08003059 	.word	0x08003059
 8003024:	08003041 	.word	0x08003041
 8003028:	08003059 	.word	0x08003059
 800302c:	08003059 	.word	0x08003059
 8003030:	08003059 	.word	0x08003059
 8003034:	08003051 	.word	0x08003051
 8003038:	2300      	movs	r3, #0
 800303a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800303e:	e0d8      	b.n	80031f2 <UART_SetConfig+0x2fe>
 8003040:	2302      	movs	r3, #2
 8003042:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003046:	e0d4      	b.n	80031f2 <UART_SetConfig+0x2fe>
 8003048:	2304      	movs	r3, #4
 800304a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800304e:	e0d0      	b.n	80031f2 <UART_SetConfig+0x2fe>
 8003050:	2308      	movs	r3, #8
 8003052:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003056:	e0cc      	b.n	80031f2 <UART_SetConfig+0x2fe>
 8003058:	2310      	movs	r3, #16
 800305a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800305e:	e0c8      	b.n	80031f2 <UART_SetConfig+0x2fe>
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a5e      	ldr	r2, [pc, #376]	@ (80031e0 <UART_SetConfig+0x2ec>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d125      	bne.n	80030b6 <UART_SetConfig+0x1c2>
 800306a:	4b5b      	ldr	r3, [pc, #364]	@ (80031d8 <UART_SetConfig+0x2e4>)
 800306c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003070:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003074:	2b30      	cmp	r3, #48	@ 0x30
 8003076:	d016      	beq.n	80030a6 <UART_SetConfig+0x1b2>
 8003078:	2b30      	cmp	r3, #48	@ 0x30
 800307a:	d818      	bhi.n	80030ae <UART_SetConfig+0x1ba>
 800307c:	2b20      	cmp	r3, #32
 800307e:	d00a      	beq.n	8003096 <UART_SetConfig+0x1a2>
 8003080:	2b20      	cmp	r3, #32
 8003082:	d814      	bhi.n	80030ae <UART_SetConfig+0x1ba>
 8003084:	2b00      	cmp	r3, #0
 8003086:	d002      	beq.n	800308e <UART_SetConfig+0x19a>
 8003088:	2b10      	cmp	r3, #16
 800308a:	d008      	beq.n	800309e <UART_SetConfig+0x1aa>
 800308c:	e00f      	b.n	80030ae <UART_SetConfig+0x1ba>
 800308e:	2300      	movs	r3, #0
 8003090:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003094:	e0ad      	b.n	80031f2 <UART_SetConfig+0x2fe>
 8003096:	2302      	movs	r3, #2
 8003098:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800309c:	e0a9      	b.n	80031f2 <UART_SetConfig+0x2fe>
 800309e:	2304      	movs	r3, #4
 80030a0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80030a4:	e0a5      	b.n	80031f2 <UART_SetConfig+0x2fe>
 80030a6:	2308      	movs	r3, #8
 80030a8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80030ac:	e0a1      	b.n	80031f2 <UART_SetConfig+0x2fe>
 80030ae:	2310      	movs	r3, #16
 80030b0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80030b4:	e09d      	b.n	80031f2 <UART_SetConfig+0x2fe>
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a4a      	ldr	r2, [pc, #296]	@ (80031e4 <UART_SetConfig+0x2f0>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d125      	bne.n	800310c <UART_SetConfig+0x218>
 80030c0:	4b45      	ldr	r3, [pc, #276]	@ (80031d8 <UART_SetConfig+0x2e4>)
 80030c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030c6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80030ca:	2bc0      	cmp	r3, #192	@ 0xc0
 80030cc:	d016      	beq.n	80030fc <UART_SetConfig+0x208>
 80030ce:	2bc0      	cmp	r3, #192	@ 0xc0
 80030d0:	d818      	bhi.n	8003104 <UART_SetConfig+0x210>
 80030d2:	2b80      	cmp	r3, #128	@ 0x80
 80030d4:	d00a      	beq.n	80030ec <UART_SetConfig+0x1f8>
 80030d6:	2b80      	cmp	r3, #128	@ 0x80
 80030d8:	d814      	bhi.n	8003104 <UART_SetConfig+0x210>
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d002      	beq.n	80030e4 <UART_SetConfig+0x1f0>
 80030de:	2b40      	cmp	r3, #64	@ 0x40
 80030e0:	d008      	beq.n	80030f4 <UART_SetConfig+0x200>
 80030e2:	e00f      	b.n	8003104 <UART_SetConfig+0x210>
 80030e4:	2300      	movs	r3, #0
 80030e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80030ea:	e082      	b.n	80031f2 <UART_SetConfig+0x2fe>
 80030ec:	2302      	movs	r3, #2
 80030ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80030f2:	e07e      	b.n	80031f2 <UART_SetConfig+0x2fe>
 80030f4:	2304      	movs	r3, #4
 80030f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80030fa:	e07a      	b.n	80031f2 <UART_SetConfig+0x2fe>
 80030fc:	2308      	movs	r3, #8
 80030fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003102:	e076      	b.n	80031f2 <UART_SetConfig+0x2fe>
 8003104:	2310      	movs	r3, #16
 8003106:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800310a:	e072      	b.n	80031f2 <UART_SetConfig+0x2fe>
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a35      	ldr	r2, [pc, #212]	@ (80031e8 <UART_SetConfig+0x2f4>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d12a      	bne.n	800316c <UART_SetConfig+0x278>
 8003116:	4b30      	ldr	r3, [pc, #192]	@ (80031d8 <UART_SetConfig+0x2e4>)
 8003118:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800311c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003120:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003124:	d01a      	beq.n	800315c <UART_SetConfig+0x268>
 8003126:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800312a:	d81b      	bhi.n	8003164 <UART_SetConfig+0x270>
 800312c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003130:	d00c      	beq.n	800314c <UART_SetConfig+0x258>
 8003132:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003136:	d815      	bhi.n	8003164 <UART_SetConfig+0x270>
 8003138:	2b00      	cmp	r3, #0
 800313a:	d003      	beq.n	8003144 <UART_SetConfig+0x250>
 800313c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003140:	d008      	beq.n	8003154 <UART_SetConfig+0x260>
 8003142:	e00f      	b.n	8003164 <UART_SetConfig+0x270>
 8003144:	2300      	movs	r3, #0
 8003146:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800314a:	e052      	b.n	80031f2 <UART_SetConfig+0x2fe>
 800314c:	2302      	movs	r3, #2
 800314e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003152:	e04e      	b.n	80031f2 <UART_SetConfig+0x2fe>
 8003154:	2304      	movs	r3, #4
 8003156:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800315a:	e04a      	b.n	80031f2 <UART_SetConfig+0x2fe>
 800315c:	2308      	movs	r3, #8
 800315e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003162:	e046      	b.n	80031f2 <UART_SetConfig+0x2fe>
 8003164:	2310      	movs	r3, #16
 8003166:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800316a:	e042      	b.n	80031f2 <UART_SetConfig+0x2fe>
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a17      	ldr	r2, [pc, #92]	@ (80031d0 <UART_SetConfig+0x2dc>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d13a      	bne.n	80031ec <UART_SetConfig+0x2f8>
 8003176:	4b18      	ldr	r3, [pc, #96]	@ (80031d8 <UART_SetConfig+0x2e4>)
 8003178:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800317c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003180:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003184:	d01a      	beq.n	80031bc <UART_SetConfig+0x2c8>
 8003186:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800318a:	d81b      	bhi.n	80031c4 <UART_SetConfig+0x2d0>
 800318c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003190:	d00c      	beq.n	80031ac <UART_SetConfig+0x2b8>
 8003192:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003196:	d815      	bhi.n	80031c4 <UART_SetConfig+0x2d0>
 8003198:	2b00      	cmp	r3, #0
 800319a:	d003      	beq.n	80031a4 <UART_SetConfig+0x2b0>
 800319c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031a0:	d008      	beq.n	80031b4 <UART_SetConfig+0x2c0>
 80031a2:	e00f      	b.n	80031c4 <UART_SetConfig+0x2d0>
 80031a4:	2300      	movs	r3, #0
 80031a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80031aa:	e022      	b.n	80031f2 <UART_SetConfig+0x2fe>
 80031ac:	2302      	movs	r3, #2
 80031ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80031b2:	e01e      	b.n	80031f2 <UART_SetConfig+0x2fe>
 80031b4:	2304      	movs	r3, #4
 80031b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80031ba:	e01a      	b.n	80031f2 <UART_SetConfig+0x2fe>
 80031bc:	2308      	movs	r3, #8
 80031be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80031c2:	e016      	b.n	80031f2 <UART_SetConfig+0x2fe>
 80031c4:	2310      	movs	r3, #16
 80031c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80031ca:	e012      	b.n	80031f2 <UART_SetConfig+0x2fe>
 80031cc:	cfff69f3 	.word	0xcfff69f3
 80031d0:	40008000 	.word	0x40008000
 80031d4:	40013800 	.word	0x40013800
 80031d8:	40021000 	.word	0x40021000
 80031dc:	40004400 	.word	0x40004400
 80031e0:	40004800 	.word	0x40004800
 80031e4:	40004c00 	.word	0x40004c00
 80031e8:	40005000 	.word	0x40005000
 80031ec:	2310      	movs	r3, #16
 80031ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4aae      	ldr	r2, [pc, #696]	@ (80034b0 <UART_SetConfig+0x5bc>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	f040 8097 	bne.w	800332c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80031fe:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003202:	2b08      	cmp	r3, #8
 8003204:	d823      	bhi.n	800324e <UART_SetConfig+0x35a>
 8003206:	a201      	add	r2, pc, #4	@ (adr r2, 800320c <UART_SetConfig+0x318>)
 8003208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800320c:	08003231 	.word	0x08003231
 8003210:	0800324f 	.word	0x0800324f
 8003214:	08003239 	.word	0x08003239
 8003218:	0800324f 	.word	0x0800324f
 800321c:	0800323f 	.word	0x0800323f
 8003220:	0800324f 	.word	0x0800324f
 8003224:	0800324f 	.word	0x0800324f
 8003228:	0800324f 	.word	0x0800324f
 800322c:	08003247 	.word	0x08003247
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003230:	f7ff f832 	bl	8002298 <HAL_RCC_GetPCLK1Freq>
 8003234:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003236:	e010      	b.n	800325a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003238:	4b9e      	ldr	r3, [pc, #632]	@ (80034b4 <UART_SetConfig+0x5c0>)
 800323a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800323c:	e00d      	b.n	800325a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800323e:	f7fe ffbd 	bl	80021bc <HAL_RCC_GetSysClockFreq>
 8003242:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003244:	e009      	b.n	800325a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003246:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800324a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800324c:	e005      	b.n	800325a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800324e:	2300      	movs	r3, #0
 8003250:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003258:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800325a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800325c:	2b00      	cmp	r3, #0
 800325e:	f000 8130 	beq.w	80034c2 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003266:	4a94      	ldr	r2, [pc, #592]	@ (80034b8 <UART_SetConfig+0x5c4>)
 8003268:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800326c:	461a      	mov	r2, r3
 800326e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003270:	fbb3 f3f2 	udiv	r3, r3, r2
 8003274:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	685a      	ldr	r2, [r3, #4]
 800327a:	4613      	mov	r3, r2
 800327c:	005b      	lsls	r3, r3, #1
 800327e:	4413      	add	r3, r2
 8003280:	69ba      	ldr	r2, [r7, #24]
 8003282:	429a      	cmp	r2, r3
 8003284:	d305      	bcc.n	8003292 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800328c:	69ba      	ldr	r2, [r7, #24]
 800328e:	429a      	cmp	r2, r3
 8003290:	d903      	bls.n	800329a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003298:	e113      	b.n	80034c2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800329a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800329c:	2200      	movs	r2, #0
 800329e:	60bb      	str	r3, [r7, #8]
 80032a0:	60fa      	str	r2, [r7, #12]
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032a6:	4a84      	ldr	r2, [pc, #528]	@ (80034b8 <UART_SetConfig+0x5c4>)
 80032a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	2200      	movs	r2, #0
 80032b0:	603b      	str	r3, [r7, #0]
 80032b2:	607a      	str	r2, [r7, #4]
 80032b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80032b8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80032bc:	f7fc ffac 	bl	8000218 <__aeabi_uldivmod>
 80032c0:	4602      	mov	r2, r0
 80032c2:	460b      	mov	r3, r1
 80032c4:	4610      	mov	r0, r2
 80032c6:	4619      	mov	r1, r3
 80032c8:	f04f 0200 	mov.w	r2, #0
 80032cc:	f04f 0300 	mov.w	r3, #0
 80032d0:	020b      	lsls	r3, r1, #8
 80032d2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80032d6:	0202      	lsls	r2, r0, #8
 80032d8:	6979      	ldr	r1, [r7, #20]
 80032da:	6849      	ldr	r1, [r1, #4]
 80032dc:	0849      	lsrs	r1, r1, #1
 80032de:	2000      	movs	r0, #0
 80032e0:	460c      	mov	r4, r1
 80032e2:	4605      	mov	r5, r0
 80032e4:	eb12 0804 	adds.w	r8, r2, r4
 80032e8:	eb43 0905 	adc.w	r9, r3, r5
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	2200      	movs	r2, #0
 80032f2:	469a      	mov	sl, r3
 80032f4:	4693      	mov	fp, r2
 80032f6:	4652      	mov	r2, sl
 80032f8:	465b      	mov	r3, fp
 80032fa:	4640      	mov	r0, r8
 80032fc:	4649      	mov	r1, r9
 80032fe:	f7fc ff8b 	bl	8000218 <__aeabi_uldivmod>
 8003302:	4602      	mov	r2, r0
 8003304:	460b      	mov	r3, r1
 8003306:	4613      	mov	r3, r2
 8003308:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800330a:	6a3b      	ldr	r3, [r7, #32]
 800330c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003310:	d308      	bcc.n	8003324 <UART_SetConfig+0x430>
 8003312:	6a3b      	ldr	r3, [r7, #32]
 8003314:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003318:	d204      	bcs.n	8003324 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	6a3a      	ldr	r2, [r7, #32]
 8003320:	60da      	str	r2, [r3, #12]
 8003322:	e0ce      	b.n	80034c2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800332a:	e0ca      	b.n	80034c2 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	69db      	ldr	r3, [r3, #28]
 8003330:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003334:	d166      	bne.n	8003404 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8003336:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800333a:	2b08      	cmp	r3, #8
 800333c:	d827      	bhi.n	800338e <UART_SetConfig+0x49a>
 800333e:	a201      	add	r2, pc, #4	@ (adr r2, 8003344 <UART_SetConfig+0x450>)
 8003340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003344:	08003369 	.word	0x08003369
 8003348:	08003371 	.word	0x08003371
 800334c:	08003379 	.word	0x08003379
 8003350:	0800338f 	.word	0x0800338f
 8003354:	0800337f 	.word	0x0800337f
 8003358:	0800338f 	.word	0x0800338f
 800335c:	0800338f 	.word	0x0800338f
 8003360:	0800338f 	.word	0x0800338f
 8003364:	08003387 	.word	0x08003387
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003368:	f7fe ff96 	bl	8002298 <HAL_RCC_GetPCLK1Freq>
 800336c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800336e:	e014      	b.n	800339a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003370:	f7fe ffa8 	bl	80022c4 <HAL_RCC_GetPCLK2Freq>
 8003374:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003376:	e010      	b.n	800339a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003378:	4b4e      	ldr	r3, [pc, #312]	@ (80034b4 <UART_SetConfig+0x5c0>)
 800337a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800337c:	e00d      	b.n	800339a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800337e:	f7fe ff1d 	bl	80021bc <HAL_RCC_GetSysClockFreq>
 8003382:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003384:	e009      	b.n	800339a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003386:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800338a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800338c:	e005      	b.n	800339a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800338e:	2300      	movs	r3, #0
 8003390:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003398:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800339a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800339c:	2b00      	cmp	r3, #0
 800339e:	f000 8090 	beq.w	80034c2 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033a6:	4a44      	ldr	r2, [pc, #272]	@ (80034b8 <UART_SetConfig+0x5c4>)
 80033a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80033ac:	461a      	mov	r2, r3
 80033ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80033b4:	005a      	lsls	r2, r3, #1
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	085b      	lsrs	r3, r3, #1
 80033bc:	441a      	add	r2, r3
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80033c6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033c8:	6a3b      	ldr	r3, [r7, #32]
 80033ca:	2b0f      	cmp	r3, #15
 80033cc:	d916      	bls.n	80033fc <UART_SetConfig+0x508>
 80033ce:	6a3b      	ldr	r3, [r7, #32]
 80033d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033d4:	d212      	bcs.n	80033fc <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80033d6:	6a3b      	ldr	r3, [r7, #32]
 80033d8:	b29b      	uxth	r3, r3
 80033da:	f023 030f 	bic.w	r3, r3, #15
 80033de:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80033e0:	6a3b      	ldr	r3, [r7, #32]
 80033e2:	085b      	lsrs	r3, r3, #1
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	f003 0307 	and.w	r3, r3, #7
 80033ea:	b29a      	uxth	r2, r3
 80033ec:	8bfb      	ldrh	r3, [r7, #30]
 80033ee:	4313      	orrs	r3, r2
 80033f0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	8bfa      	ldrh	r2, [r7, #30]
 80033f8:	60da      	str	r2, [r3, #12]
 80033fa:	e062      	b.n	80034c2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003402:	e05e      	b.n	80034c2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003404:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003408:	2b08      	cmp	r3, #8
 800340a:	d828      	bhi.n	800345e <UART_SetConfig+0x56a>
 800340c:	a201      	add	r2, pc, #4	@ (adr r2, 8003414 <UART_SetConfig+0x520>)
 800340e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003412:	bf00      	nop
 8003414:	08003439 	.word	0x08003439
 8003418:	08003441 	.word	0x08003441
 800341c:	08003449 	.word	0x08003449
 8003420:	0800345f 	.word	0x0800345f
 8003424:	0800344f 	.word	0x0800344f
 8003428:	0800345f 	.word	0x0800345f
 800342c:	0800345f 	.word	0x0800345f
 8003430:	0800345f 	.word	0x0800345f
 8003434:	08003457 	.word	0x08003457
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003438:	f7fe ff2e 	bl	8002298 <HAL_RCC_GetPCLK1Freq>
 800343c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800343e:	e014      	b.n	800346a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003440:	f7fe ff40 	bl	80022c4 <HAL_RCC_GetPCLK2Freq>
 8003444:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003446:	e010      	b.n	800346a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003448:	4b1a      	ldr	r3, [pc, #104]	@ (80034b4 <UART_SetConfig+0x5c0>)
 800344a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800344c:	e00d      	b.n	800346a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800344e:	f7fe feb5 	bl	80021bc <HAL_RCC_GetSysClockFreq>
 8003452:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003454:	e009      	b.n	800346a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003456:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800345a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800345c:	e005      	b.n	800346a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800345e:	2300      	movs	r3, #0
 8003460:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003468:	bf00      	nop
    }

    if (pclk != 0U)
 800346a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800346c:	2b00      	cmp	r3, #0
 800346e:	d028      	beq.n	80034c2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003474:	4a10      	ldr	r2, [pc, #64]	@ (80034b8 <UART_SetConfig+0x5c4>)
 8003476:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800347a:	461a      	mov	r2, r3
 800347c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800347e:	fbb3 f2f2 	udiv	r2, r3, r2
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	085b      	lsrs	r3, r3, #1
 8003488:	441a      	add	r2, r3
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003492:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003494:	6a3b      	ldr	r3, [r7, #32]
 8003496:	2b0f      	cmp	r3, #15
 8003498:	d910      	bls.n	80034bc <UART_SetConfig+0x5c8>
 800349a:	6a3b      	ldr	r3, [r7, #32]
 800349c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034a0:	d20c      	bcs.n	80034bc <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80034a2:	6a3b      	ldr	r3, [r7, #32]
 80034a4:	b29a      	uxth	r2, r3
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	60da      	str	r2, [r3, #12]
 80034ac:	e009      	b.n	80034c2 <UART_SetConfig+0x5ce>
 80034ae:	bf00      	nop
 80034b0:	40008000 	.word	0x40008000
 80034b4:	00f42400 	.word	0x00f42400
 80034b8:	08003bb8 	.word	0x08003bb8
      }
      else
      {
        ret = HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	2201      	movs	r2, #1
 80034c6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	2201      	movs	r2, #1
 80034ce:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	2200      	movs	r2, #0
 80034d6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	2200      	movs	r2, #0
 80034dc:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80034de:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3730      	adds	r7, #48	@ 0x30
 80034e6:	46bd      	mov	sp, r7
 80034e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080034ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b083      	sub	sp, #12
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034f8:	f003 0308 	and.w	r3, r3, #8
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d00a      	beq.n	8003516 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	430a      	orrs	r2, r1
 8003514:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800351a:	f003 0301 	and.w	r3, r3, #1
 800351e:	2b00      	cmp	r3, #0
 8003520:	d00a      	beq.n	8003538 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	430a      	orrs	r2, r1
 8003536:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800353c:	f003 0302 	and.w	r3, r3, #2
 8003540:	2b00      	cmp	r3, #0
 8003542:	d00a      	beq.n	800355a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	430a      	orrs	r2, r1
 8003558:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800355e:	f003 0304 	and.w	r3, r3, #4
 8003562:	2b00      	cmp	r3, #0
 8003564:	d00a      	beq.n	800357c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	430a      	orrs	r2, r1
 800357a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003580:	f003 0310 	and.w	r3, r3, #16
 8003584:	2b00      	cmp	r3, #0
 8003586:	d00a      	beq.n	800359e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	430a      	orrs	r2, r1
 800359c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035a2:	f003 0320 	and.w	r3, r3, #32
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d00a      	beq.n	80035c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	430a      	orrs	r2, r1
 80035be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d01a      	beq.n	8003602 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	430a      	orrs	r2, r1
 80035e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80035ea:	d10a      	bne.n	8003602 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	430a      	orrs	r2, r1
 8003600:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003606:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800360a:	2b00      	cmp	r3, #0
 800360c:	d00a      	beq.n	8003624 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	430a      	orrs	r2, r1
 8003622:	605a      	str	r2, [r3, #4]
  }
}
 8003624:	bf00      	nop
 8003626:	370c      	adds	r7, #12
 8003628:	46bd      	mov	sp, r7
 800362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362e:	4770      	bx	lr

08003630 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b098      	sub	sp, #96	@ 0x60
 8003634:	af02      	add	r7, sp, #8
 8003636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2200      	movs	r2, #0
 800363c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003640:	f7fd fb6c 	bl	8000d1c <HAL_GetTick>
 8003644:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0308 	and.w	r3, r3, #8
 8003650:	2b08      	cmp	r3, #8
 8003652:	d12f      	bne.n	80036b4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003654:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003658:	9300      	str	r3, [sp, #0]
 800365a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800365c:	2200      	movs	r2, #0
 800365e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f000 f88e 	bl	8003784 <UART_WaitOnFlagUntilTimeout>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d022      	beq.n	80036b4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003674:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003676:	e853 3f00 	ldrex	r3, [r3]
 800367a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800367c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800367e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003682:	653b      	str	r3, [r7, #80]	@ 0x50
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	461a      	mov	r2, r3
 800368a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800368c:	647b      	str	r3, [r7, #68]	@ 0x44
 800368e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003690:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003692:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003694:	e841 2300 	strex	r3, r2, [r1]
 8003698:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800369a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800369c:	2b00      	cmp	r3, #0
 800369e:	d1e6      	bne.n	800366e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2220      	movs	r2, #32
 80036a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80036b0:	2303      	movs	r3, #3
 80036b2:	e063      	b.n	800377c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0304 	and.w	r3, r3, #4
 80036be:	2b04      	cmp	r3, #4
 80036c0:	d149      	bne.n	8003756 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80036c2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80036c6:	9300      	str	r3, [sp, #0]
 80036c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036ca:	2200      	movs	r2, #0
 80036cc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f000 f857 	bl	8003784 <UART_WaitOnFlagUntilTimeout>
 80036d6:	4603      	mov	r3, r0
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d03c      	beq.n	8003756 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036e4:	e853 3f00 	ldrex	r3, [r3]
 80036e8:	623b      	str	r3, [r7, #32]
   return(result);
 80036ea:	6a3b      	ldr	r3, [r7, #32]
 80036ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80036f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	461a      	mov	r2, r3
 80036f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80036fa:	633b      	str	r3, [r7, #48]	@ 0x30
 80036fc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003700:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003702:	e841 2300 	strex	r3, r2, [r1]
 8003706:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003708:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800370a:	2b00      	cmp	r3, #0
 800370c:	d1e6      	bne.n	80036dc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	3308      	adds	r3, #8
 8003714:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	e853 3f00 	ldrex	r3, [r3]
 800371c:	60fb      	str	r3, [r7, #12]
   return(result);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	f023 0301 	bic.w	r3, r3, #1
 8003724:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	3308      	adds	r3, #8
 800372c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800372e:	61fa      	str	r2, [r7, #28]
 8003730:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003732:	69b9      	ldr	r1, [r7, #24]
 8003734:	69fa      	ldr	r2, [r7, #28]
 8003736:	e841 2300 	strex	r3, r2, [r1]
 800373a:	617b      	str	r3, [r7, #20]
   return(result);
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d1e5      	bne.n	800370e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2220      	movs	r2, #32
 8003746:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003752:	2303      	movs	r3, #3
 8003754:	e012      	b.n	800377c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2220      	movs	r2, #32
 800375a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2220      	movs	r2, #32
 8003762:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2200      	movs	r2, #0
 8003770:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800377a:	2300      	movs	r3, #0
}
 800377c:	4618      	mov	r0, r3
 800377e:	3758      	adds	r7, #88	@ 0x58
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}

08003784 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b084      	sub	sp, #16
 8003788:	af00      	add	r7, sp, #0
 800378a:	60f8      	str	r0, [r7, #12]
 800378c:	60b9      	str	r1, [r7, #8]
 800378e:	603b      	str	r3, [r7, #0]
 8003790:	4613      	mov	r3, r2
 8003792:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003794:	e04f      	b.n	8003836 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003796:	69bb      	ldr	r3, [r7, #24]
 8003798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800379c:	d04b      	beq.n	8003836 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800379e:	f7fd fabd 	bl	8000d1c <HAL_GetTick>
 80037a2:	4602      	mov	r2, r0
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	1ad3      	subs	r3, r2, r3
 80037a8:	69ba      	ldr	r2, [r7, #24]
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d302      	bcc.n	80037b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80037ae:	69bb      	ldr	r3, [r7, #24]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d101      	bne.n	80037b8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80037b4:	2303      	movs	r3, #3
 80037b6:	e04e      	b.n	8003856 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0304 	and.w	r3, r3, #4
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d037      	beq.n	8003836 <UART_WaitOnFlagUntilTimeout+0xb2>
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	2b80      	cmp	r3, #128	@ 0x80
 80037ca:	d034      	beq.n	8003836 <UART_WaitOnFlagUntilTimeout+0xb2>
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	2b40      	cmp	r3, #64	@ 0x40
 80037d0:	d031      	beq.n	8003836 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	69db      	ldr	r3, [r3, #28]
 80037d8:	f003 0308 	and.w	r3, r3, #8
 80037dc:	2b08      	cmp	r3, #8
 80037de:	d110      	bne.n	8003802 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	2208      	movs	r2, #8
 80037e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80037e8:	68f8      	ldr	r0, [r7, #12]
 80037ea:	f000 f838 	bl	800385e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2208      	movs	r2, #8
 80037f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2200      	movs	r2, #0
 80037fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e029      	b.n	8003856 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	69db      	ldr	r3, [r3, #28]
 8003808:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800380c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003810:	d111      	bne.n	8003836 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800381a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800381c:	68f8      	ldr	r0, [r7, #12]
 800381e:	f000 f81e 	bl	800385e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2220      	movs	r2, #32
 8003826:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2200      	movs	r2, #0
 800382e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8003832:	2303      	movs	r3, #3
 8003834:	e00f      	b.n	8003856 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	69da      	ldr	r2, [r3, #28]
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	4013      	ands	r3, r2
 8003840:	68ba      	ldr	r2, [r7, #8]
 8003842:	429a      	cmp	r2, r3
 8003844:	bf0c      	ite	eq
 8003846:	2301      	moveq	r3, #1
 8003848:	2300      	movne	r3, #0
 800384a:	b2db      	uxtb	r3, r3
 800384c:	461a      	mov	r2, r3
 800384e:	79fb      	ldrb	r3, [r7, #7]
 8003850:	429a      	cmp	r2, r3
 8003852:	d0a0      	beq.n	8003796 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003854:	2300      	movs	r3, #0
}
 8003856:	4618      	mov	r0, r3
 8003858:	3710      	adds	r7, #16
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}

0800385e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800385e:	b480      	push	{r7}
 8003860:	b095      	sub	sp, #84	@ 0x54
 8003862:	af00      	add	r7, sp, #0
 8003864:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800386c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800386e:	e853 3f00 	ldrex	r3, [r3]
 8003872:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003876:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800387a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	461a      	mov	r2, r3
 8003882:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003884:	643b      	str	r3, [r7, #64]	@ 0x40
 8003886:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003888:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800388a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800388c:	e841 2300 	strex	r3, r2, [r1]
 8003890:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003892:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003894:	2b00      	cmp	r3, #0
 8003896:	d1e6      	bne.n	8003866 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	3308      	adds	r3, #8
 800389e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038a0:	6a3b      	ldr	r3, [r7, #32]
 80038a2:	e853 3f00 	ldrex	r3, [r3]
 80038a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80038a8:	69fb      	ldr	r3, [r7, #28]
 80038aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80038ae:	f023 0301 	bic.w	r3, r3, #1
 80038b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	3308      	adds	r3, #8
 80038ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80038bc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80038be:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80038c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80038c4:	e841 2300 	strex	r3, r2, [r1]
 80038c8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80038ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d1e3      	bne.n	8003898 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d118      	bne.n	800390a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	e853 3f00 	ldrex	r3, [r3]
 80038e4:	60bb      	str	r3, [r7, #8]
   return(result);
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	f023 0310 	bic.w	r3, r3, #16
 80038ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	461a      	mov	r2, r3
 80038f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80038f6:	61bb      	str	r3, [r7, #24]
 80038f8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038fa:	6979      	ldr	r1, [r7, #20]
 80038fc:	69ba      	ldr	r2, [r7, #24]
 80038fe:	e841 2300 	strex	r3, r2, [r1]
 8003902:	613b      	str	r3, [r7, #16]
   return(result);
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d1e6      	bne.n	80038d8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2220      	movs	r2, #32
 800390e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2200      	movs	r2, #0
 8003916:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2200      	movs	r2, #0
 800391c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800391e:	bf00      	nop
 8003920:	3754      	adds	r7, #84	@ 0x54
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr

0800392a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800392a:	b480      	push	{r7}
 800392c:	b085      	sub	sp, #20
 800392e:	af00      	add	r7, sp, #0
 8003930:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003938:	2b01      	cmp	r3, #1
 800393a:	d101      	bne.n	8003940 <HAL_UARTEx_DisableFifoMode+0x16>
 800393c:	2302      	movs	r3, #2
 800393e:	e027      	b.n	8003990 <HAL_UARTEx_DisableFifoMode+0x66>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2201      	movs	r2, #1
 8003944:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2224      	movs	r2, #36	@ 0x24
 800394c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f022 0201 	bic.w	r2, r2, #1
 8003966:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800396e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2200      	movs	r2, #0
 8003974:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	68fa      	ldr	r2, [r7, #12]
 800397c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2220      	movs	r2, #32
 8003982:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2200      	movs	r2, #0
 800398a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800398e:	2300      	movs	r3, #0
}
 8003990:	4618      	mov	r0, r3
 8003992:	3714      	adds	r7, #20
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr

0800399c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b084      	sub	sp, #16
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d101      	bne.n	80039b4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80039b0:	2302      	movs	r3, #2
 80039b2:	e02d      	b.n	8003a10 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2201      	movs	r2, #1
 80039b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2224      	movs	r2, #36	@ 0x24
 80039c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f022 0201 	bic.w	r2, r2, #1
 80039da:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	683a      	ldr	r2, [r7, #0]
 80039ec:	430a      	orrs	r2, r1
 80039ee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	f000 f84f 	bl	8003a94 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	68fa      	ldr	r2, [r7, #12]
 80039fc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2220      	movs	r2, #32
 8003a02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003a0e:	2300      	movs	r3, #0
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3710      	adds	r7, #16
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}

08003a18 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b084      	sub	sp, #16
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d101      	bne.n	8003a30 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003a2c:	2302      	movs	r3, #2
 8003a2e:	e02d      	b.n	8003a8c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2224      	movs	r2, #36	@ 0x24
 8003a3c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f022 0201 	bic.w	r2, r2, #1
 8003a56:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	683a      	ldr	r2, [r7, #0]
 8003a68:	430a      	orrs	r2, r1
 8003a6a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	f000 f811 	bl	8003a94 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	68fa      	ldr	r2, [r7, #12]
 8003a78:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2220      	movs	r2, #32
 8003a7e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003a8a:	2300      	movs	r3, #0
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3710      	adds	r7, #16
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}

08003a94 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b085      	sub	sp, #20
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d108      	bne.n	8003ab6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003ab4:	e031      	b.n	8003b1a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003ab6:	2308      	movs	r3, #8
 8003ab8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003aba:	2308      	movs	r3, #8
 8003abc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	0e5b      	lsrs	r3, r3, #25
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	f003 0307 	and.w	r3, r3, #7
 8003acc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	0f5b      	lsrs	r3, r3, #29
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	f003 0307 	and.w	r3, r3, #7
 8003adc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003ade:	7bbb      	ldrb	r3, [r7, #14]
 8003ae0:	7b3a      	ldrb	r2, [r7, #12]
 8003ae2:	4911      	ldr	r1, [pc, #68]	@ (8003b28 <UARTEx_SetNbDataToProcess+0x94>)
 8003ae4:	5c8a      	ldrb	r2, [r1, r2]
 8003ae6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003aea:	7b3a      	ldrb	r2, [r7, #12]
 8003aec:	490f      	ldr	r1, [pc, #60]	@ (8003b2c <UARTEx_SetNbDataToProcess+0x98>)
 8003aee:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003af0:	fb93 f3f2 	sdiv	r3, r3, r2
 8003af4:	b29a      	uxth	r2, r3
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003afc:	7bfb      	ldrb	r3, [r7, #15]
 8003afe:	7b7a      	ldrb	r2, [r7, #13]
 8003b00:	4909      	ldr	r1, [pc, #36]	@ (8003b28 <UARTEx_SetNbDataToProcess+0x94>)
 8003b02:	5c8a      	ldrb	r2, [r1, r2]
 8003b04:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003b08:	7b7a      	ldrb	r2, [r7, #13]
 8003b0a:	4908      	ldr	r1, [pc, #32]	@ (8003b2c <UARTEx_SetNbDataToProcess+0x98>)
 8003b0c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003b0e:	fb93 f3f2 	sdiv	r3, r3, r2
 8003b12:	b29a      	uxth	r2, r3
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8003b1a:	bf00      	nop
 8003b1c:	3714      	adds	r7, #20
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b24:	4770      	bx	lr
 8003b26:	bf00      	nop
 8003b28:	08003bd0 	.word	0x08003bd0
 8003b2c:	08003bd8 	.word	0x08003bd8

08003b30 <memset>:
 8003b30:	4402      	add	r2, r0
 8003b32:	4603      	mov	r3, r0
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d100      	bne.n	8003b3a <memset+0xa>
 8003b38:	4770      	bx	lr
 8003b3a:	f803 1b01 	strb.w	r1, [r3], #1
 8003b3e:	e7f9      	b.n	8003b34 <memset+0x4>

08003b40 <__libc_init_array>:
 8003b40:	b570      	push	{r4, r5, r6, lr}
 8003b42:	4d0d      	ldr	r5, [pc, #52]	@ (8003b78 <__libc_init_array+0x38>)
 8003b44:	4c0d      	ldr	r4, [pc, #52]	@ (8003b7c <__libc_init_array+0x3c>)
 8003b46:	1b64      	subs	r4, r4, r5
 8003b48:	10a4      	asrs	r4, r4, #2
 8003b4a:	2600      	movs	r6, #0
 8003b4c:	42a6      	cmp	r6, r4
 8003b4e:	d109      	bne.n	8003b64 <__libc_init_array+0x24>
 8003b50:	4d0b      	ldr	r5, [pc, #44]	@ (8003b80 <__libc_init_array+0x40>)
 8003b52:	4c0c      	ldr	r4, [pc, #48]	@ (8003b84 <__libc_init_array+0x44>)
 8003b54:	f000 f818 	bl	8003b88 <_init>
 8003b58:	1b64      	subs	r4, r4, r5
 8003b5a:	10a4      	asrs	r4, r4, #2
 8003b5c:	2600      	movs	r6, #0
 8003b5e:	42a6      	cmp	r6, r4
 8003b60:	d105      	bne.n	8003b6e <__libc_init_array+0x2e>
 8003b62:	bd70      	pop	{r4, r5, r6, pc}
 8003b64:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b68:	4798      	blx	r3
 8003b6a:	3601      	adds	r6, #1
 8003b6c:	e7ee      	b.n	8003b4c <__libc_init_array+0xc>
 8003b6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b72:	4798      	blx	r3
 8003b74:	3601      	adds	r6, #1
 8003b76:	e7f2      	b.n	8003b5e <__libc_init_array+0x1e>
 8003b78:	08003be8 	.word	0x08003be8
 8003b7c:	08003be8 	.word	0x08003be8
 8003b80:	08003be8 	.word	0x08003be8
 8003b84:	08003bec 	.word	0x08003bec

08003b88 <_init>:
 8003b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b8a:	bf00      	nop
 8003b8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b8e:	bc08      	pop	{r3}
 8003b90:	469e      	mov	lr, r3
 8003b92:	4770      	bx	lr

08003b94 <_fini>:
 8003b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b96:	bf00      	nop
 8003b98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b9a:	bc08      	pop	{r3}
 8003b9c:	469e      	mov	lr, r3
 8003b9e:	4770      	bx	lr
