
Lora_example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003af0  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08003cc8  08003cc8  00004cc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d1c  08003d1c  00005024  2**0
                  CONTENTS
  4 .ARM          00000008  08003d1c  08003d1c  00004d1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003d24  08003d24  00005024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d24  08003d24  00004d24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003d28  08003d28  00004d28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000024  20000000  08003d2c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b0  20000024  08003d50  00005024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001d4  08003d50  000051d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005024  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012ed9  00000000  00000000  00005054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002471  00000000  00000000  00017f2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001080  00000000  00000000  0001a3a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ce9  00000000  00000000  0001b420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f4ce  00000000  00000000  0001c109  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013259  00000000  00000000  0003b5d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cf85b  00000000  00000000  0004e830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011e08b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004658  00000000  00000000  0011e0d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  00122728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000024 	.word	0x20000024
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08003cb0 	.word	0x08003cb0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000028 	.word	0x20000028
 8000214:	08003cb0 	.word	0x08003cb0

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b5b0      	push	{r4, r5, r7, lr}
 800050a:	b086      	sub	sp, #24
 800050c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050e:	f000 fbe4 	bl	8000cda <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000512:	f000 f85b 	bl	80005cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000516:	f000 f999 	bl	800084c <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 800051a:	f000 f8db 	bl	80006d4 <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 800051e:	f000 f923 	bl	8000768 <MX_USART1_UART_Init>
  MX_TIM16_Init();
 8000522:	f000 f96d 	bl	8000800 <MX_TIM16_Init>
  MX_DAC1_Init();
 8000526:	f000 f89b 	bl	8000660 <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 800052a:	2100      	movs	r1, #0
 800052c:	4822      	ldr	r0, [pc, #136]	@ (80005b8 <main+0xb0>)
 800052e:	f000 fd99 	bl	8001064 <HAL_DAC_Start>

  // array for the ARR vals for ramp up (26-31 kHz) when the PSC is (5-1), just reordered the arra
//  int arr_array []= {(115-1),(110-1),(107-1),(103-1),(100-1),(96-1)};

  // testing edge cases (correct array)
  int arr_array[] = {(115-1),(110-1),(107-1),(103-1),(100-1)};
 8000532:	4b22      	ldr	r3, [pc, #136]	@ (80005bc <main+0xb4>)
 8000534:	463c      	mov	r4, r7
 8000536:	461d      	mov	r5, r3
 8000538:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800053a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800053c:	682b      	ldr	r3, [r5, #0]
 800053e:	6023      	str	r3, [r4, #0]
  // array of fixed frequency
//  int arr_array[] = {(107-1)};

  // array for the ARR vals for 10-25 kHz
//  int arr_array[] = {(100-1),(67-1),(50-1),(40-1)};
  int arr_idx = 0;
 8000540:	2300      	movs	r3, #0
 8000542:	617b      	str	r3, [r7, #20]

//  // Start timer (for non-interrupt)
//  HAL_TIM_Base_Start(&htim16);

  // Start timer (for interrupt)
  HAL_TIM_Base_Start_IT(&htim16);
 8000544:	481e      	ldr	r0, [pc, #120]	@ (80005c0 <main+0xb8>)
 8000546:	f002 fa13 	bl	8002970 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if (count >= 2000){
 800054a:	4b1e      	ldr	r3, [pc, #120]	@ (80005c4 <main+0xbc>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000552:	d3fa      	bcc.n	800054a <main+0x42>
//
////		  lpuart_buf_len_2 = sprintf(lpuart_buf_2, "the count value is %ld before the reset\r\n", count);
////		  HAL_UART_Transmit(&hlpuart1, (uint8_t *) lpuart_buf_2, lpuart_buf_len_2, 100);
//
		  count = 0;
 8000554:	4b1b      	ldr	r3, [pc, #108]	@ (80005c4 <main+0xbc>)
 8000556:	2200      	movs	r2, #0
 8000558:	601a      	str	r2, [r3, #0]
//
//		  lpuart_buf_len_2 = sprintf(lpuart_buf_2, "the count value is %ld after the reset\r\n", count);
//		  HAL_UART_Transmit(&hlpuart1, (uint8_t *) lpuart_buf_2, lpuart_buf_len_2, 100);
//
		  // this code is for the ARR array
		  arr_idx = (arr_idx+1) % (sizeof(arr_array)/sizeof(arr_array[0]));
 800055a:	697b      	ldr	r3, [r7, #20]
 800055c:	3301      	adds	r3, #1
 800055e:	4619      	mov	r1, r3
 8000560:	4b19      	ldr	r3, [pc, #100]	@ (80005c8 <main+0xc0>)
 8000562:	fba3 2301 	umull	r2, r3, r3, r1
 8000566:	089a      	lsrs	r2, r3, #2
 8000568:	4613      	mov	r3, r2
 800056a:	009b      	lsls	r3, r3, #2
 800056c:	4413      	add	r3, r2
 800056e:	1aca      	subs	r2, r1, r3
 8000570:	617a      	str	r2, [r7, #20]
		  __HAL_TIM_SET_AUTORELOAD(&htim16,arr_array[arr_idx]);
 8000572:	697b      	ldr	r3, [r7, #20]
 8000574:	009b      	lsls	r3, r3, #2
 8000576:	3318      	adds	r3, #24
 8000578:	443b      	add	r3, r7
 800057a:	f853 2c18 	ldr.w	r2, [r3, #-24]
 800057e:	4b10      	ldr	r3, [pc, #64]	@ (80005c0 <main+0xb8>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000584:	697b      	ldr	r3, [r7, #20]
 8000586:	009b      	lsls	r3, r3, #2
 8000588:	3318      	adds	r3, #24
 800058a:	443b      	add	r3, r7
 800058c:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8000590:	461a      	mov	r2, r3
 8000592:	4b0b      	ldr	r3, [pc, #44]	@ (80005c0 <main+0xb8>)
 8000594:	60da      	str	r2, [r3, #12]


		  if (!arr_idx) {
 8000596:	697b      	ldr	r3, [r7, #20]
 8000598:	2b00      	cmp	r3, #0
 800059a:	d108      	bne.n	80005ae <main+0xa6>
			  HAL_TIM_Base_Stop_IT(&htim16);
 800059c:	4808      	ldr	r0, [pc, #32]	@ (80005c0 <main+0xb8>)
 800059e:	f002 fa57 	bl	8002a50 <HAL_TIM_Base_Stop_IT>
			  HAL_Delay(100);
 80005a2:	2064      	movs	r0, #100	@ 0x64
 80005a4:	f000 fc0a 	bl	8000dbc <HAL_Delay>
			  HAL_TIM_Base_Start_IT(&htim16);
 80005a8:	4805      	ldr	r0, [pc, #20]	@ (80005c0 <main+0xb8>)
 80005aa:	f002 f9e1 	bl	8002970 <HAL_TIM_Base_Start_IT>
//
//		  else if (htim16.Instance->ARR == (25-1)){
//			  __HAL_TIM_SET_AUTORELOAD(&htim16,(30-1));
//		  }
//		  __HAL_TIM_SET_AUTORELOAD(&htim16,100);
		  __HAL_TIM_SET_COUNTER(&htim16,0);
 80005ae:	4b04      	ldr	r3, [pc, #16]	@ (80005c0 <main+0xb8>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	2200      	movs	r2, #0
 80005b4:	625a      	str	r2, [r3, #36]	@ 0x24
	  if (count >= 2000){
 80005b6:	e7c8      	b.n	800054a <main+0x42>
 80005b8:	20000040 	.word	0x20000040
 80005bc:	08003cc8 	.word	0x08003cc8
 80005c0:	2000017c 	.word	0x2000017c
 80005c4:	200001cc 	.word	0x200001cc
 80005c8:	cccccccd 	.word	0xcccccccd

080005cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b094      	sub	sp, #80	@ 0x50
 80005d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d2:	f107 0318 	add.w	r3, r7, #24
 80005d6:	2238      	movs	r2, #56	@ 0x38
 80005d8:	2100      	movs	r1, #0
 80005da:	4618      	mov	r0, r3
 80005dc:	f003 fb3c 	bl	8003c58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e0:	1d3b      	adds	r3, r7, #4
 80005e2:	2200      	movs	r2, #0
 80005e4:	601a      	str	r2, [r3, #0]
 80005e6:	605a      	str	r2, [r3, #4]
 80005e8:	609a      	str	r2, [r3, #8]
 80005ea:	60da      	str	r2, [r3, #12]
 80005ec:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005ee:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80005f2:	f001 f947 	bl	8001884 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005f6:	2301      	movs	r3, #1
 80005f8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005fa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005fe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000600:	2302      	movs	r3, #2
 8000602:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000604:	2303      	movs	r3, #3
 8000606:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV8;
 8000608:	2308      	movs	r3, #8
 800060a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 100;
 800060c:	2364      	movs	r3, #100	@ 0x64
 800060e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000610:	2302      	movs	r3, #2
 8000612:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000614:	2302      	movs	r3, #2
 8000616:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000618:	2302      	movs	r3, #2
 800061a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800061c:	f107 0318 	add.w	r3, r7, #24
 8000620:	4618      	mov	r0, r3
 8000622:	f001 f9e3 	bl	80019ec <HAL_RCC_OscConfig>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <SystemClock_Config+0x64>
  {
    Error_Handler();
 800062c:	f000 f9b2 	bl	8000994 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000630:	230f      	movs	r3, #15
 8000632:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000634:	2303      	movs	r3, #3
 8000636:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000638:	2300      	movs	r3, #0
 800063a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800063c:	2300      	movs	r3, #0
 800063e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000640:	2300      	movs	r3, #0
 8000642:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000644:	1d3b      	adds	r3, r7, #4
 8000646:	2104      	movs	r1, #4
 8000648:	4618      	mov	r0, r3
 800064a:	f001 fce1 	bl	8002010 <HAL_RCC_ClockConfig>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000654:	f000 f99e 	bl	8000994 <Error_Handler>
  }
}
 8000658:	bf00      	nop
 800065a:	3750      	adds	r7, #80	@ 0x50
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}

08000660 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b08c      	sub	sp, #48	@ 0x30
 8000664:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000666:	463b      	mov	r3, r7
 8000668:	2230      	movs	r2, #48	@ 0x30
 800066a:	2100      	movs	r1, #0
 800066c:	4618      	mov	r0, r3
 800066e:	f003 faf3 	bl	8003c58 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000672:	4b16      	ldr	r3, [pc, #88]	@ (80006cc <MX_DAC1_Init+0x6c>)
 8000674:	4a16      	ldr	r2, [pc, #88]	@ (80006d0 <MX_DAC1_Init+0x70>)
 8000676:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000678:	4814      	ldr	r0, [pc, #80]	@ (80006cc <MX_DAC1_Init+0x6c>)
 800067a:	f000 fcd0 	bl	800101e <HAL_DAC_Init>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000684:	f000 f986 	bl	8000994 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000688:	2302      	movs	r3, #2
 800068a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 800068c:	2300      	movs	r3, #0
 800068e:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000690:	2300      	movs	r3, #0
 8000692:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000694:	2300      	movs	r3, #0
 8000696:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000698:	2300      	movs	r3, #0
 800069a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 800069c:	2300      	movs	r3, #0
 800069e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80006a0:	2300      	movs	r3, #0
 80006a2:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 80006a4:	2301      	movs	r3, #1
 80006a6:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80006a8:	2300      	movs	r3, #0
 80006aa:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80006ac:	463b      	mov	r3, r7
 80006ae:	2200      	movs	r2, #0
 80006b0:	4619      	mov	r1, r3
 80006b2:	4806      	ldr	r0, [pc, #24]	@ (80006cc <MX_DAC1_Init+0x6c>)
 80006b4:	f000 fd70 	bl	8001198 <HAL_DAC_ConfigChannel>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 80006be:	f000 f969 	bl	8000994 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80006c2:	bf00      	nop
 80006c4:	3730      	adds	r7, #48	@ 0x30
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	20000040 	.word	0x20000040
 80006d0:	50000800 	.word	0x50000800

080006d4 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80006d8:	4b21      	ldr	r3, [pc, #132]	@ (8000760 <MX_LPUART1_UART_Init+0x8c>)
 80006da:	4a22      	ldr	r2, [pc, #136]	@ (8000764 <MX_LPUART1_UART_Init+0x90>)
 80006dc:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80006de:	4b20      	ldr	r3, [pc, #128]	@ (8000760 <MX_LPUART1_UART_Init+0x8c>)
 80006e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006e4:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006e6:	4b1e      	ldr	r3, [pc, #120]	@ (8000760 <MX_LPUART1_UART_Init+0x8c>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80006ec:	4b1c      	ldr	r3, [pc, #112]	@ (8000760 <MX_LPUART1_UART_Init+0x8c>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80006f2:	4b1b      	ldr	r3, [pc, #108]	@ (8000760 <MX_LPUART1_UART_Init+0x8c>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80006f8:	4b19      	ldr	r3, [pc, #100]	@ (8000760 <MX_LPUART1_UART_Init+0x8c>)
 80006fa:	220c      	movs	r2, #12
 80006fc:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006fe:	4b18      	ldr	r3, [pc, #96]	@ (8000760 <MX_LPUART1_UART_Init+0x8c>)
 8000700:	2200      	movs	r2, #0
 8000702:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000704:	4b16      	ldr	r3, [pc, #88]	@ (8000760 <MX_LPUART1_UART_Init+0x8c>)
 8000706:	2200      	movs	r2, #0
 8000708:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800070a:	4b15      	ldr	r3, [pc, #84]	@ (8000760 <MX_LPUART1_UART_Init+0x8c>)
 800070c:	2200      	movs	r2, #0
 800070e:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000710:	4b13      	ldr	r3, [pc, #76]	@ (8000760 <MX_LPUART1_UART_Init+0x8c>)
 8000712:	2200      	movs	r2, #0
 8000714:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000716:	4812      	ldr	r0, [pc, #72]	@ (8000760 <MX_LPUART1_UART_Init+0x8c>)
 8000718:	f002 fc30 	bl	8002f7c <HAL_UART_Init>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000722:	f000 f937 	bl	8000994 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000726:	2100      	movs	r1, #0
 8000728:	480d      	ldr	r0, [pc, #52]	@ (8000760 <MX_LPUART1_UART_Init+0x8c>)
 800072a:	f003 f9cb 	bl	8003ac4 <HAL_UARTEx_SetTxFifoThreshold>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000734:	f000 f92e 	bl	8000994 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000738:	2100      	movs	r1, #0
 800073a:	4809      	ldr	r0, [pc, #36]	@ (8000760 <MX_LPUART1_UART_Init+0x8c>)
 800073c:	f003 fa00 	bl	8003b40 <HAL_UARTEx_SetRxFifoThreshold>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000746:	f000 f925 	bl	8000994 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800074a:	4805      	ldr	r0, [pc, #20]	@ (8000760 <MX_LPUART1_UART_Init+0x8c>)
 800074c:	f003 f981 	bl	8003a52 <HAL_UARTEx_DisableFifoMode>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000756:	f000 f91d 	bl	8000994 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800075a:	bf00      	nop
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	20000054 	.word	0x20000054
 8000764:	40008000 	.word	0x40008000

08000768 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800076c:	4b22      	ldr	r3, [pc, #136]	@ (80007f8 <MX_USART1_UART_Init+0x90>)
 800076e:	4a23      	ldr	r2, [pc, #140]	@ (80007fc <MX_USART1_UART_Init+0x94>)
 8000770:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000772:	4b21      	ldr	r3, [pc, #132]	@ (80007f8 <MX_USART1_UART_Init+0x90>)
 8000774:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000778:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800077a:	4b1f      	ldr	r3, [pc, #124]	@ (80007f8 <MX_USART1_UART_Init+0x90>)
 800077c:	2200      	movs	r2, #0
 800077e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000780:	4b1d      	ldr	r3, [pc, #116]	@ (80007f8 <MX_USART1_UART_Init+0x90>)
 8000782:	2200      	movs	r2, #0
 8000784:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000786:	4b1c      	ldr	r3, [pc, #112]	@ (80007f8 <MX_USART1_UART_Init+0x90>)
 8000788:	2200      	movs	r2, #0
 800078a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800078c:	4b1a      	ldr	r3, [pc, #104]	@ (80007f8 <MX_USART1_UART_Init+0x90>)
 800078e:	220c      	movs	r2, #12
 8000790:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000792:	4b19      	ldr	r3, [pc, #100]	@ (80007f8 <MX_USART1_UART_Init+0x90>)
 8000794:	2200      	movs	r2, #0
 8000796:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000798:	4b17      	ldr	r3, [pc, #92]	@ (80007f8 <MX_USART1_UART_Init+0x90>)
 800079a:	2200      	movs	r2, #0
 800079c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800079e:	4b16      	ldr	r3, [pc, #88]	@ (80007f8 <MX_USART1_UART_Init+0x90>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007a4:	4b14      	ldr	r3, [pc, #80]	@ (80007f8 <MX_USART1_UART_Init+0x90>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007aa:	4b13      	ldr	r3, [pc, #76]	@ (80007f8 <MX_USART1_UART_Init+0x90>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007b0:	4811      	ldr	r0, [pc, #68]	@ (80007f8 <MX_USART1_UART_Init+0x90>)
 80007b2:	f002 fbe3 	bl	8002f7c <HAL_UART_Init>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80007bc:	f000 f8ea 	bl	8000994 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007c0:	2100      	movs	r1, #0
 80007c2:	480d      	ldr	r0, [pc, #52]	@ (80007f8 <MX_USART1_UART_Init+0x90>)
 80007c4:	f003 f97e 	bl	8003ac4 <HAL_UARTEx_SetTxFifoThreshold>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80007ce:	f000 f8e1 	bl	8000994 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007d2:	2100      	movs	r1, #0
 80007d4:	4808      	ldr	r0, [pc, #32]	@ (80007f8 <MX_USART1_UART_Init+0x90>)
 80007d6:	f003 f9b3 	bl	8003b40 <HAL_UARTEx_SetRxFifoThreshold>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80007e0:	f000 f8d8 	bl	8000994 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80007e4:	4804      	ldr	r0, [pc, #16]	@ (80007f8 <MX_USART1_UART_Init+0x90>)
 80007e6:	f003 f934 	bl	8003a52 <HAL_UARTEx_DisableFifoMode>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80007f0:	f000 f8d0 	bl	8000994 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007f4:	bf00      	nop
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	200000e8 	.word	0x200000e8
 80007fc:	40013800 	.word	0x40013800

08000800 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000804:	4b0f      	ldr	r3, [pc, #60]	@ (8000844 <MX_TIM16_Init+0x44>)
 8000806:	4a10      	ldr	r2, [pc, #64]	@ (8000848 <MX_TIM16_Init+0x48>)
 8000808:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 5 - 1;
 800080a:	4b0e      	ldr	r3, [pc, #56]	@ (8000844 <MX_TIM16_Init+0x44>)
 800080c:	2204      	movs	r2, #4
 800080e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000810:	4b0c      	ldr	r3, [pc, #48]	@ (8000844 <MX_TIM16_Init+0x44>)
 8000812:	2200      	movs	r2, #0
 8000814:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 107 - 1;
 8000816:	4b0b      	ldr	r3, [pc, #44]	@ (8000844 <MX_TIM16_Init+0x44>)
 8000818:	226a      	movs	r2, #106	@ 0x6a
 800081a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800081c:	4b09      	ldr	r3, [pc, #36]	@ (8000844 <MX_TIM16_Init+0x44>)
 800081e:	2200      	movs	r2, #0
 8000820:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000822:	4b08      	ldr	r3, [pc, #32]	@ (8000844 <MX_TIM16_Init+0x44>)
 8000824:	2200      	movs	r2, #0
 8000826:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000828:	4b06      	ldr	r3, [pc, #24]	@ (8000844 <MX_TIM16_Init+0x44>)
 800082a:	2280      	movs	r2, #128	@ 0x80
 800082c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800082e:	4805      	ldr	r0, [pc, #20]	@ (8000844 <MX_TIM16_Init+0x44>)
 8000830:	f002 f846 	bl	80028c0 <HAL_TIM_Base_Init>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 800083a:	f000 f8ab 	bl	8000994 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800083e:	bf00      	nop
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	2000017c 	.word	0x2000017c
 8000848:	40014400 	.word	0x40014400

0800084c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b08a      	sub	sp, #40	@ 0x28
 8000850:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000852:	f107 0314 	add.w	r3, r7, #20
 8000856:	2200      	movs	r2, #0
 8000858:	601a      	str	r2, [r3, #0]
 800085a:	605a      	str	r2, [r3, #4]
 800085c:	609a      	str	r2, [r3, #8]
 800085e:	60da      	str	r2, [r3, #12]
 8000860:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000862:	4b2f      	ldr	r3, [pc, #188]	@ (8000920 <MX_GPIO_Init+0xd4>)
 8000864:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000866:	4a2e      	ldr	r2, [pc, #184]	@ (8000920 <MX_GPIO_Init+0xd4>)
 8000868:	f043 0304 	orr.w	r3, r3, #4
 800086c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800086e:	4b2c      	ldr	r3, [pc, #176]	@ (8000920 <MX_GPIO_Init+0xd4>)
 8000870:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000872:	f003 0304 	and.w	r3, r3, #4
 8000876:	613b      	str	r3, [r7, #16]
 8000878:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800087a:	4b29      	ldr	r3, [pc, #164]	@ (8000920 <MX_GPIO_Init+0xd4>)
 800087c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800087e:	4a28      	ldr	r2, [pc, #160]	@ (8000920 <MX_GPIO_Init+0xd4>)
 8000880:	f043 0320 	orr.w	r3, r3, #32
 8000884:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000886:	4b26      	ldr	r3, [pc, #152]	@ (8000920 <MX_GPIO_Init+0xd4>)
 8000888:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800088a:	f003 0320 	and.w	r3, r3, #32
 800088e:	60fb      	str	r3, [r7, #12]
 8000890:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000892:	4b23      	ldr	r3, [pc, #140]	@ (8000920 <MX_GPIO_Init+0xd4>)
 8000894:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000896:	4a22      	ldr	r2, [pc, #136]	@ (8000920 <MX_GPIO_Init+0xd4>)
 8000898:	f043 0301 	orr.w	r3, r3, #1
 800089c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800089e:	4b20      	ldr	r3, [pc, #128]	@ (8000920 <MX_GPIO_Init+0xd4>)
 80008a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008a2:	f003 0301 	and.w	r3, r3, #1
 80008a6:	60bb      	str	r3, [r7, #8]
 80008a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008aa:	4b1d      	ldr	r3, [pc, #116]	@ (8000920 <MX_GPIO_Init+0xd4>)
 80008ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ae:	4a1c      	ldr	r2, [pc, #112]	@ (8000920 <MX_GPIO_Init+0xd4>)
 80008b0:	f043 0302 	orr.w	r3, r3, #2
 80008b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008b6:	4b1a      	ldr	r3, [pc, #104]	@ (8000920 <MX_GPIO_Init+0xd4>)
 80008b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ba:	f003 0302 	and.w	r3, r3, #2
 80008be:	607b      	str	r3, [r7, #4]
 80008c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008c2:	2200      	movs	r2, #0
 80008c4:	2120      	movs	r1, #32
 80008c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008ca:	f000 ff9f 	bl	800180c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008ce:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008d4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80008d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008da:	2300      	movs	r3, #0
 80008dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008de:	f107 0314 	add.w	r3, r7, #20
 80008e2:	4619      	mov	r1, r3
 80008e4:	480f      	ldr	r0, [pc, #60]	@ (8000924 <MX_GPIO_Init+0xd8>)
 80008e6:	f000 fe0f 	bl	8001508 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008ea:	2320      	movs	r3, #32
 80008ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ee:	2301      	movs	r3, #1
 80008f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f2:	2300      	movs	r3, #0
 80008f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f6:	2300      	movs	r3, #0
 80008f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008fa:	f107 0314 	add.w	r3, r7, #20
 80008fe:	4619      	mov	r1, r3
 8000900:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000904:	f000 fe00 	bl	8001508 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000908:	2200      	movs	r2, #0
 800090a:	2100      	movs	r1, #0
 800090c:	2028      	movs	r0, #40	@ 0x28
 800090e:	f000 fb52 	bl	8000fb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000912:	2028      	movs	r0, #40	@ 0x28
 8000914:	f000 fb69 	bl	8000fea <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000918:	bf00      	nop
 800091a:	3728      	adds	r7, #40	@ 0x28
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	40021000 	.word	0x40021000
 8000924:	48000800 	.word	0x48000800

08000928 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
//	char lpuart_buf_3[50];
//	int lpuart_buf_len_3;
//	int iterations = 0;

	// if there is an interrupt, send a point from the array signal
	if (htim == &htim16){
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	4a12      	ldr	r2, [pc, #72]	@ (800097c <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000934:	4293      	cmp	r3, r2
 8000936:	d11c      	bne.n	8000972 <HAL_TIM_PeriodElapsedCallback+0x4a>

		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, sine_wave[idx]);
 8000938:	4b11      	ldr	r3, [pc, #68]	@ (8000980 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a11      	ldr	r2, [pc, #68]	@ (8000984 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800093e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000942:	2200      	movs	r2, #0
 8000944:	2100      	movs	r1, #0
 8000946:	4810      	ldr	r0, [pc, #64]	@ (8000988 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000948:	f000 fbf8 	bl	800113c <HAL_DAC_SetValue>
//
//		}

//		lpuart_buf_len_3 = sprintf(lpuart_buf_3, "the count value is %ld after the reset\r\n", count);
//		HAL_UART_Transmit(&hlpuart1, (uint8_t *) lpuart_buf_3, lpuart_buf_len_3, 100);
		idx++;
 800094c:	4b0c      	ldr	r3, [pc, #48]	@ (8000980 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	3301      	adds	r3, #1
 8000952:	4a0b      	ldr	r2, [pc, #44]	@ (8000980 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000954:	6013      	str	r3, [r2, #0]



		if (idx == wave_size){
 8000956:	4b0a      	ldr	r3, [pc, #40]	@ (8000980 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000958:	681a      	ldr	r2, [r3, #0]
 800095a:	4b0c      	ldr	r3, [pc, #48]	@ (800098c <HAL_TIM_PeriodElapsedCallback+0x64>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	429a      	cmp	r2, r3
 8000960:	d107      	bne.n	8000972 <HAL_TIM_PeriodElapsedCallback+0x4a>

			// increment the iterations and then check to see if 7 total signals were sent out
			count++;
 8000962:	4b0b      	ldr	r3, [pc, #44]	@ (8000990 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	3301      	adds	r3, #1
 8000968:	4a09      	ldr	r2, [pc, #36]	@ (8000990 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800096a:	6013      	str	r3, [r2, #0]
//			if (count >= 7){
//				count = 0;
//			}

			// reset the index
			idx =0;
 800096c:	4b04      	ldr	r3, [pc, #16]	@ (8000980 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800096e:	2200      	movs	r2, #0
 8000970:	601a      	str	r2, [r3, #0]
//			}
			// incrementing the counter
			}

	}
}
 8000972:	bf00      	nop
 8000974:	3708      	adds	r7, #8
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	2000017c 	.word	0x2000017c
 8000980:	200001c8 	.word	0x200001c8
 8000984:	20000000 	.word	0x20000000
 8000988:	20000040 	.word	0x20000040
 800098c:	20000014 	.word	0x20000014
 8000990:	200001cc 	.word	0x200001cc

08000994 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000998:	b672      	cpsid	i
}
 800099a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800099c:	bf00      	nop
 800099e:	e7fd      	b.n	800099c <Error_Handler+0x8>

080009a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009a6:	4b0f      	ldr	r3, [pc, #60]	@ (80009e4 <HAL_MspInit+0x44>)
 80009a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009aa:	4a0e      	ldr	r2, [pc, #56]	@ (80009e4 <HAL_MspInit+0x44>)
 80009ac:	f043 0301 	orr.w	r3, r3, #1
 80009b0:	6613      	str	r3, [r2, #96]	@ 0x60
 80009b2:	4b0c      	ldr	r3, [pc, #48]	@ (80009e4 <HAL_MspInit+0x44>)
 80009b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009b6:	f003 0301 	and.w	r3, r3, #1
 80009ba:	607b      	str	r3, [r7, #4]
 80009bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009be:	4b09      	ldr	r3, [pc, #36]	@ (80009e4 <HAL_MspInit+0x44>)
 80009c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009c2:	4a08      	ldr	r2, [pc, #32]	@ (80009e4 <HAL_MspInit+0x44>)
 80009c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80009ca:	4b06      	ldr	r3, [pc, #24]	@ (80009e4 <HAL_MspInit+0x44>)
 80009cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009d2:	603b      	str	r3, [r7, #0]
 80009d4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80009d6:	f000 fff9 	bl	80019cc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009da:	bf00      	nop
 80009dc:	3708      	adds	r7, #8
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	40021000 	.word	0x40021000

080009e8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b08a      	sub	sp, #40	@ 0x28
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f0:	f107 0314 	add.w	r3, r7, #20
 80009f4:	2200      	movs	r2, #0
 80009f6:	601a      	str	r2, [r3, #0]
 80009f8:	605a      	str	r2, [r3, #4]
 80009fa:	609a      	str	r2, [r3, #8]
 80009fc:	60da      	str	r2, [r3, #12]
 80009fe:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a15      	ldr	r2, [pc, #84]	@ (8000a5c <HAL_DAC_MspInit+0x74>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d124      	bne.n	8000a54 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000a0a:	4b15      	ldr	r3, [pc, #84]	@ (8000a60 <HAL_DAC_MspInit+0x78>)
 8000a0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a0e:	4a14      	ldr	r2, [pc, #80]	@ (8000a60 <HAL_DAC_MspInit+0x78>)
 8000a10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000a14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a16:	4b12      	ldr	r3, [pc, #72]	@ (8000a60 <HAL_DAC_MspInit+0x78>)
 8000a18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a1a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000a1e:	613b      	str	r3, [r7, #16]
 8000a20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a22:	4b0f      	ldr	r3, [pc, #60]	@ (8000a60 <HAL_DAC_MspInit+0x78>)
 8000a24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a26:	4a0e      	ldr	r2, [pc, #56]	@ (8000a60 <HAL_DAC_MspInit+0x78>)
 8000a28:	f043 0301 	orr.w	r3, r3, #1
 8000a2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a2e:	4b0c      	ldr	r3, [pc, #48]	@ (8000a60 <HAL_DAC_MspInit+0x78>)
 8000a30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a32:	f003 0301 	and.w	r3, r3, #1
 8000a36:	60fb      	str	r3, [r7, #12]
 8000a38:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000a3a:	2310      	movs	r3, #16
 8000a3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a3e:	2303      	movs	r3, #3
 8000a40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a46:	f107 0314 	add.w	r3, r7, #20
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a50:	f000 fd5a 	bl	8001508 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8000a54:	bf00      	nop
 8000a56:	3728      	adds	r7, #40	@ 0x28
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	50000800 	.word	0x50000800
 8000a60:	40021000 	.word	0x40021000

08000a64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b0a0      	sub	sp, #128	@ 0x80
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a6c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000a70:	2200      	movs	r2, #0
 8000a72:	601a      	str	r2, [r3, #0]
 8000a74:	605a      	str	r2, [r3, #4]
 8000a76:	609a      	str	r2, [r3, #8]
 8000a78:	60da      	str	r2, [r3, #12]
 8000a7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a7c:	f107 031c 	add.w	r3, r7, #28
 8000a80:	2250      	movs	r2, #80	@ 0x50
 8000a82:	2100      	movs	r1, #0
 8000a84:	4618      	mov	r0, r3
 8000a86:	f003 f8e7 	bl	8003c58 <memset>
  if(huart->Instance==LPUART1)
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4a3d      	ldr	r2, [pc, #244]	@ (8000b84 <HAL_UART_MspInit+0x120>)
 8000a90:	4293      	cmp	r3, r2
 8000a92:	d137      	bne.n	8000b04 <HAL_UART_MspInit+0xa0>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000a94:	2320      	movs	r3, #32
 8000a96:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a9c:	f107 031c 	add.w	r3, r7, #28
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f001 fcd1 	bl	8002448 <HAL_RCCEx_PeriphCLKConfig>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000aac:	f7ff ff72 	bl	8000994 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000ab0:	4b35      	ldr	r3, [pc, #212]	@ (8000b88 <HAL_UART_MspInit+0x124>)
 8000ab2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000ab4:	4a34      	ldr	r2, [pc, #208]	@ (8000b88 <HAL_UART_MspInit+0x124>)
 8000ab6:	f043 0301 	orr.w	r3, r3, #1
 8000aba:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000abc:	4b32      	ldr	r3, [pc, #200]	@ (8000b88 <HAL_UART_MspInit+0x124>)
 8000abe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000ac0:	f003 0301 	and.w	r3, r3, #1
 8000ac4:	61bb      	str	r3, [r7, #24]
 8000ac6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac8:	4b2f      	ldr	r3, [pc, #188]	@ (8000b88 <HAL_UART_MspInit+0x124>)
 8000aca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000acc:	4a2e      	ldr	r2, [pc, #184]	@ (8000b88 <HAL_UART_MspInit+0x124>)
 8000ace:	f043 0301 	orr.w	r3, r3, #1
 8000ad2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ad4:	4b2c      	ldr	r3, [pc, #176]	@ (8000b88 <HAL_UART_MspInit+0x124>)
 8000ad6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ad8:	f003 0301 	and.w	r3, r3, #1
 8000adc:	617b      	str	r3, [r7, #20]
 8000ade:	697b      	ldr	r3, [r7, #20]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000ae0:	230c      	movs	r3, #12
 8000ae2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aec:	2300      	movs	r3, #0
 8000aee:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000af0:	230c      	movs	r3, #12
 8000af2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000af8:	4619      	mov	r1, r3
 8000afa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000afe:	f000 fd03 	bl	8001508 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000b02:	e03a      	b.n	8000b7a <HAL_UART_MspInit+0x116>
  else if(huart->Instance==USART1)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a20      	ldr	r2, [pc, #128]	@ (8000b8c <HAL_UART_MspInit+0x128>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d135      	bne.n	8000b7a <HAL_UART_MspInit+0x116>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000b12:	2300      	movs	r3, #0
 8000b14:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b16:	f107 031c 	add.w	r3, r7, #28
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f001 fc94 	bl	8002448 <HAL_RCCEx_PeriphCLKConfig>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <HAL_UART_MspInit+0xc6>
      Error_Handler();
 8000b26:	f7ff ff35 	bl	8000994 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b2a:	4b17      	ldr	r3, [pc, #92]	@ (8000b88 <HAL_UART_MspInit+0x124>)
 8000b2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b2e:	4a16      	ldr	r2, [pc, #88]	@ (8000b88 <HAL_UART_MspInit+0x124>)
 8000b30:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b34:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b36:	4b14      	ldr	r3, [pc, #80]	@ (8000b88 <HAL_UART_MspInit+0x124>)
 8000b38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b3e:	613b      	str	r3, [r7, #16]
 8000b40:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b42:	4b11      	ldr	r3, [pc, #68]	@ (8000b88 <HAL_UART_MspInit+0x124>)
 8000b44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b46:	4a10      	ldr	r2, [pc, #64]	@ (8000b88 <HAL_UART_MspInit+0x124>)
 8000b48:	f043 0304 	orr.w	r3, r3, #4
 8000b4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b88 <HAL_UART_MspInit+0x124>)
 8000b50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b52:	f003 0304 	and.w	r3, r3, #4
 8000b56:	60fb      	str	r3, [r7, #12]
 8000b58:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000b5a:	2330      	movs	r3, #48	@ 0x30
 8000b5c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b62:	2300      	movs	r3, #0
 8000b64:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b66:	2300      	movs	r3, #0
 8000b68:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b6a:	2307      	movs	r3, #7
 8000b6c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b6e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000b72:	4619      	mov	r1, r3
 8000b74:	4806      	ldr	r0, [pc, #24]	@ (8000b90 <HAL_UART_MspInit+0x12c>)
 8000b76:	f000 fcc7 	bl	8001508 <HAL_GPIO_Init>
}
 8000b7a:	bf00      	nop
 8000b7c:	3780      	adds	r7, #128	@ 0x80
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	40008000 	.word	0x40008000
 8000b88:	40021000 	.word	0x40021000
 8000b8c:	40013800 	.word	0x40013800
 8000b90:	48000800 	.word	0x48000800

08000b94 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b084      	sub	sp, #16
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a0d      	ldr	r2, [pc, #52]	@ (8000bd8 <HAL_TIM_Base_MspInit+0x44>)
 8000ba2:	4293      	cmp	r3, r2
 8000ba4:	d113      	bne.n	8000bce <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000ba6:	4b0d      	ldr	r3, [pc, #52]	@ (8000bdc <HAL_TIM_Base_MspInit+0x48>)
 8000ba8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000baa:	4a0c      	ldr	r2, [pc, #48]	@ (8000bdc <HAL_TIM_Base_MspInit+0x48>)
 8000bac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bb0:	6613      	str	r3, [r2, #96]	@ 0x60
 8000bb2:	4b0a      	ldr	r3, [pc, #40]	@ (8000bdc <HAL_TIM_Base_MspInit+0x48>)
 8000bb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000bb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bba:	60fb      	str	r3, [r7, #12]
 8000bbc:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	2019      	movs	r0, #25
 8000bc4:	f000 f9f7 	bl	8000fb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000bc8:	2019      	movs	r0, #25
 8000bca:	f000 fa0e 	bl	8000fea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000bce:	bf00      	nop
 8000bd0:	3710      	adds	r7, #16
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	40014400 	.word	0x40014400
 8000bdc:	40021000 	.word	0x40021000

08000be0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000be4:	bf00      	nop
 8000be6:	e7fd      	b.n	8000be4 <NMI_Handler+0x4>

08000be8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bec:	bf00      	nop
 8000bee:	e7fd      	b.n	8000bec <HardFault_Handler+0x4>

08000bf0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bf4:	bf00      	nop
 8000bf6:	e7fd      	b.n	8000bf4 <MemManage_Handler+0x4>

08000bf8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bfc:	bf00      	nop
 8000bfe:	e7fd      	b.n	8000bfc <BusFault_Handler+0x4>

08000c00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c04:	bf00      	nop
 8000c06:	e7fd      	b.n	8000c04 <UsageFault_Handler+0x4>

08000c08 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c0c:	bf00      	nop
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr

08000c16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c16:	b480      	push	{r7}
 8000c18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c1a:	bf00      	nop
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr

08000c24 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c28:	bf00      	nop
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr

08000c32 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c32:	b580      	push	{r7, lr}
 8000c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c36:	f000 f8a3 	bl	8000d80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	bd80      	pop	{r7, pc}
	...

08000c40 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000c44:	4802      	ldr	r0, [pc, #8]	@ (8000c50 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000c46:	f001 ff32 	bl	8002aae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000c4a:	bf00      	nop
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	2000017c 	.word	0x2000017c

08000c54 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000c58:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000c5c:	f000 fdee 	bl	800183c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000c60:	bf00      	nop
 8000c62:	bd80      	pop	{r7, pc}

08000c64 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000c68:	4b06      	ldr	r3, [pc, #24]	@ (8000c84 <SystemInit+0x20>)
 8000c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c6e:	4a05      	ldr	r2, [pc, #20]	@ (8000c84 <SystemInit+0x20>)
 8000c70:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c74:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	e000ed00 	.word	0xe000ed00

08000c88 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c88:	480d      	ldr	r0, [pc, #52]	@ (8000cc0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c8a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c8c:	f7ff ffea 	bl	8000c64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c90:	480c      	ldr	r0, [pc, #48]	@ (8000cc4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c92:	490d      	ldr	r1, [pc, #52]	@ (8000cc8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c94:	4a0d      	ldr	r2, [pc, #52]	@ (8000ccc <LoopForever+0xe>)
  movs r3, #0
 8000c96:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000c98:	e002      	b.n	8000ca0 <LoopCopyDataInit>

08000c9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c9e:	3304      	adds	r3, #4

08000ca0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ca0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ca2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ca4:	d3f9      	bcc.n	8000c9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ca6:	4a0a      	ldr	r2, [pc, #40]	@ (8000cd0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ca8:	4c0a      	ldr	r4, [pc, #40]	@ (8000cd4 <LoopForever+0x16>)
  movs r3, #0
 8000caa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cac:	e001      	b.n	8000cb2 <LoopFillZerobss>

08000cae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cb0:	3204      	adds	r2, #4

08000cb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cb4:	d3fb      	bcc.n	8000cae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cb6:	f002 ffd7 	bl	8003c68 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000cba:	f7ff fc25 	bl	8000508 <main>

08000cbe <LoopForever>:

LoopForever:
    b LoopForever
 8000cbe:	e7fe      	b.n	8000cbe <LoopForever>
  ldr   r0, =_estack
 8000cc0:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8000cc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cc8:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8000ccc:	08003d2c 	.word	0x08003d2c
  ldr r2, =_sbss
 8000cd0:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8000cd4:	200001d4 	.word	0x200001d4

08000cd8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000cd8:	e7fe      	b.n	8000cd8 <ADC1_2_IRQHandler>

08000cda <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cda:	b580      	push	{r7, lr}
 8000cdc:	b082      	sub	sp, #8
 8000cde:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ce4:	2003      	movs	r0, #3
 8000ce6:	f000 f95b 	bl	8000fa0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cea:	2000      	movs	r0, #0
 8000cec:	f000 f80e 	bl	8000d0c <HAL_InitTick>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d002      	beq.n	8000cfc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	71fb      	strb	r3, [r7, #7]
 8000cfa:	e001      	b.n	8000d00 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cfc:	f7ff fe50 	bl	80009a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d00:	79fb      	ldrb	r3, [r7, #7]

}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
	...

08000d0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b084      	sub	sp, #16
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d14:	2300      	movs	r3, #0
 8000d16:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000d18:	4b16      	ldr	r3, [pc, #88]	@ (8000d74 <HAL_InitTick+0x68>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d022      	beq.n	8000d66 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000d20:	4b15      	ldr	r3, [pc, #84]	@ (8000d78 <HAL_InitTick+0x6c>)
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	4b13      	ldr	r3, [pc, #76]	@ (8000d74 <HAL_InitTick+0x68>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000d2c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000d30:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d34:	4618      	mov	r0, r3
 8000d36:	f000 f966 	bl	8001006 <HAL_SYSTICK_Config>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d10f      	bne.n	8000d60 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	2b0f      	cmp	r3, #15
 8000d44:	d809      	bhi.n	8000d5a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d46:	2200      	movs	r2, #0
 8000d48:	6879      	ldr	r1, [r7, #4]
 8000d4a:	f04f 30ff 	mov.w	r0, #4294967295
 8000d4e:	f000 f932 	bl	8000fb6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d52:	4a0a      	ldr	r2, [pc, #40]	@ (8000d7c <HAL_InitTick+0x70>)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	6013      	str	r3, [r2, #0]
 8000d58:	e007      	b.n	8000d6a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	73fb      	strb	r3, [r7, #15]
 8000d5e:	e004      	b.n	8000d6a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d60:	2301      	movs	r3, #1
 8000d62:	73fb      	strb	r3, [r7, #15]
 8000d64:	e001      	b.n	8000d6a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d66:	2301      	movs	r3, #1
 8000d68:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	3710      	adds	r7, #16
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	20000020 	.word	0x20000020
 8000d78:	20000018 	.word	0x20000018
 8000d7c:	2000001c 	.word	0x2000001c

08000d80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d84:	4b05      	ldr	r3, [pc, #20]	@ (8000d9c <HAL_IncTick+0x1c>)
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	4b05      	ldr	r3, [pc, #20]	@ (8000da0 <HAL_IncTick+0x20>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4413      	add	r3, r2
 8000d8e:	4a03      	ldr	r2, [pc, #12]	@ (8000d9c <HAL_IncTick+0x1c>)
 8000d90:	6013      	str	r3, [r2, #0]
}
 8000d92:	bf00      	nop
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr
 8000d9c:	200001d0 	.word	0x200001d0
 8000da0:	20000020 	.word	0x20000020

08000da4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  return uwTick;
 8000da8:	4b03      	ldr	r3, [pc, #12]	@ (8000db8 <HAL_GetTick+0x14>)
 8000daa:	681b      	ldr	r3, [r3, #0]
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	200001d0 	.word	0x200001d0

08000dbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b084      	sub	sp, #16
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dc4:	f7ff ffee 	bl	8000da4 <HAL_GetTick>
 8000dc8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dd4:	d004      	beq.n	8000de0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dd6:	4b09      	ldr	r3, [pc, #36]	@ (8000dfc <HAL_Delay+0x40>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	68fa      	ldr	r2, [r7, #12]
 8000ddc:	4413      	add	r3, r2
 8000dde:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000de0:	bf00      	nop
 8000de2:	f7ff ffdf 	bl	8000da4 <HAL_GetTick>
 8000de6:	4602      	mov	r2, r0
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	1ad3      	subs	r3, r2, r3
 8000dec:	68fa      	ldr	r2, [r7, #12]
 8000dee:	429a      	cmp	r2, r3
 8000df0:	d8f7      	bhi.n	8000de2 <HAL_Delay+0x26>
  {
  }
}
 8000df2:	bf00      	nop
 8000df4:	bf00      	nop
 8000df6:	3710      	adds	r7, #16
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	20000020 	.word	0x20000020

08000e00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b085      	sub	sp, #20
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	f003 0307 	and.w	r3, r3, #7
 8000e0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e10:	4b0c      	ldr	r3, [pc, #48]	@ (8000e44 <__NVIC_SetPriorityGrouping+0x44>)
 8000e12:	68db      	ldr	r3, [r3, #12]
 8000e14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e16:	68ba      	ldr	r2, [r7, #8]
 8000e18:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e28:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e32:	4a04      	ldr	r2, [pc, #16]	@ (8000e44 <__NVIC_SetPriorityGrouping+0x44>)
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	60d3      	str	r3, [r2, #12]
}
 8000e38:	bf00      	nop
 8000e3a:	3714      	adds	r7, #20
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr
 8000e44:	e000ed00 	.word	0xe000ed00

08000e48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e4c:	4b04      	ldr	r3, [pc, #16]	@ (8000e60 <__NVIC_GetPriorityGrouping+0x18>)
 8000e4e:	68db      	ldr	r3, [r3, #12]
 8000e50:	0a1b      	lsrs	r3, r3, #8
 8000e52:	f003 0307 	and.w	r3, r3, #7
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr
 8000e60:	e000ed00 	.word	0xe000ed00

08000e64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	db0b      	blt.n	8000e8e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e76:	79fb      	ldrb	r3, [r7, #7]
 8000e78:	f003 021f 	and.w	r2, r3, #31
 8000e7c:	4907      	ldr	r1, [pc, #28]	@ (8000e9c <__NVIC_EnableIRQ+0x38>)
 8000e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e82:	095b      	lsrs	r3, r3, #5
 8000e84:	2001      	movs	r0, #1
 8000e86:	fa00 f202 	lsl.w	r2, r0, r2
 8000e8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e8e:	bf00      	nop
 8000e90:	370c      	adds	r7, #12
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	e000e100 	.word	0xe000e100

08000ea0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	6039      	str	r1, [r7, #0]
 8000eaa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	db0a      	blt.n	8000eca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	b2da      	uxtb	r2, r3
 8000eb8:	490c      	ldr	r1, [pc, #48]	@ (8000eec <__NVIC_SetPriority+0x4c>)
 8000eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ebe:	0112      	lsls	r2, r2, #4
 8000ec0:	b2d2      	uxtb	r2, r2
 8000ec2:	440b      	add	r3, r1
 8000ec4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ec8:	e00a      	b.n	8000ee0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	b2da      	uxtb	r2, r3
 8000ece:	4908      	ldr	r1, [pc, #32]	@ (8000ef0 <__NVIC_SetPriority+0x50>)
 8000ed0:	79fb      	ldrb	r3, [r7, #7]
 8000ed2:	f003 030f 	and.w	r3, r3, #15
 8000ed6:	3b04      	subs	r3, #4
 8000ed8:	0112      	lsls	r2, r2, #4
 8000eda:	b2d2      	uxtb	r2, r2
 8000edc:	440b      	add	r3, r1
 8000ede:	761a      	strb	r2, [r3, #24]
}
 8000ee0:	bf00      	nop
 8000ee2:	370c      	adds	r7, #12
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr
 8000eec:	e000e100 	.word	0xe000e100
 8000ef0:	e000ed00 	.word	0xe000ed00

08000ef4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b089      	sub	sp, #36	@ 0x24
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	60f8      	str	r0, [r7, #12]
 8000efc:	60b9      	str	r1, [r7, #8]
 8000efe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	f003 0307 	and.w	r3, r3, #7
 8000f06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f08:	69fb      	ldr	r3, [r7, #28]
 8000f0a:	f1c3 0307 	rsb	r3, r3, #7
 8000f0e:	2b04      	cmp	r3, #4
 8000f10:	bf28      	it	cs
 8000f12:	2304      	movcs	r3, #4
 8000f14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	3304      	adds	r3, #4
 8000f1a:	2b06      	cmp	r3, #6
 8000f1c:	d902      	bls.n	8000f24 <NVIC_EncodePriority+0x30>
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	3b03      	subs	r3, #3
 8000f22:	e000      	b.n	8000f26 <NVIC_EncodePriority+0x32>
 8000f24:	2300      	movs	r3, #0
 8000f26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f28:	f04f 32ff 	mov.w	r2, #4294967295
 8000f2c:	69bb      	ldr	r3, [r7, #24]
 8000f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f32:	43da      	mvns	r2, r3
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	401a      	ands	r2, r3
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f3c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	fa01 f303 	lsl.w	r3, r1, r3
 8000f46:	43d9      	mvns	r1, r3
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f4c:	4313      	orrs	r3, r2
         );
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3724      	adds	r7, #36	@ 0x24
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
	...

08000f5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	3b01      	subs	r3, #1
 8000f68:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f6c:	d301      	bcc.n	8000f72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f6e:	2301      	movs	r3, #1
 8000f70:	e00f      	b.n	8000f92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f72:	4a0a      	ldr	r2, [pc, #40]	@ (8000f9c <SysTick_Config+0x40>)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	3b01      	subs	r3, #1
 8000f78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f7a:	210f      	movs	r1, #15
 8000f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f80:	f7ff ff8e 	bl	8000ea0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f84:	4b05      	ldr	r3, [pc, #20]	@ (8000f9c <SysTick_Config+0x40>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f8a:	4b04      	ldr	r3, [pc, #16]	@ (8000f9c <SysTick_Config+0x40>)
 8000f8c:	2207      	movs	r2, #7
 8000f8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f90:	2300      	movs	r3, #0
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3708      	adds	r7, #8
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	e000e010 	.word	0xe000e010

08000fa0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fa8:	6878      	ldr	r0, [r7, #4]
 8000faa:	f7ff ff29 	bl	8000e00 <__NVIC_SetPriorityGrouping>
}
 8000fae:	bf00      	nop
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}

08000fb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fb6:	b580      	push	{r7, lr}
 8000fb8:	b086      	sub	sp, #24
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	60b9      	str	r1, [r7, #8]
 8000fc0:	607a      	str	r2, [r7, #4]
 8000fc2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000fc4:	f7ff ff40 	bl	8000e48 <__NVIC_GetPriorityGrouping>
 8000fc8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fca:	687a      	ldr	r2, [r7, #4]
 8000fcc:	68b9      	ldr	r1, [r7, #8]
 8000fce:	6978      	ldr	r0, [r7, #20]
 8000fd0:	f7ff ff90 	bl	8000ef4 <NVIC_EncodePriority>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fda:	4611      	mov	r1, r2
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f7ff ff5f 	bl	8000ea0 <__NVIC_SetPriority>
}
 8000fe2:	bf00      	nop
 8000fe4:	3718      	adds	r7, #24
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fea:	b580      	push	{r7, lr}
 8000fec:	b082      	sub	sp, #8
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ff4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f7ff ff33 	bl	8000e64 <__NVIC_EnableIRQ>
}
 8000ffe:	bf00      	nop
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}

08001006 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001006:	b580      	push	{r7, lr}
 8001008:	b082      	sub	sp, #8
 800100a:	af00      	add	r7, sp, #0
 800100c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	f7ff ffa4 	bl	8000f5c <SysTick_Config>
 8001014:	4603      	mov	r3, r0
}
 8001016:	4618      	mov	r0, r3
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}

0800101e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800101e:	b580      	push	{r7, lr}
 8001020:	b082      	sub	sp, #8
 8001022:	af00      	add	r7, sp, #0
 8001024:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d101      	bne.n	8001030 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800102c:	2301      	movs	r3, #1
 800102e:	e014      	b.n	800105a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	791b      	ldrb	r3, [r3, #4]
 8001034:	b2db      	uxtb	r3, r3
 8001036:	2b00      	cmp	r3, #0
 8001038:	d105      	bne.n	8001046 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2200      	movs	r2, #0
 800103e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001040:	6878      	ldr	r0, [r7, #4]
 8001042:	f7ff fcd1 	bl	80009e8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2202      	movs	r2, #2
 800104a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2200      	movs	r2, #0
 8001050:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2201      	movs	r2, #1
 8001056:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001058:	2300      	movs	r3, #0
}
 800105a:	4618      	mov	r0, r3
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
	...

08001064 <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001064:	b480      	push	{r7}
 8001066:	b085      	sub	sp, #20
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	6039      	str	r1, [r7, #0]
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d101      	bne.n	8001078 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8001074:	2301      	movs	r3, #1
 8001076:	e056      	b.n	8001126 <HAL_DAC_Start+0xc2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	795b      	ldrb	r3, [r3, #5]
 800107c:	2b01      	cmp	r3, #1
 800107e:	d101      	bne.n	8001084 <HAL_DAC_Start+0x20>
 8001080:	2302      	movs	r3, #2
 8001082:	e050      	b.n	8001126 <HAL_DAC_Start+0xc2>
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2201      	movs	r2, #1
 8001088:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2202      	movs	r2, #2
 800108e:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	6819      	ldr	r1, [r3, #0]
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	f003 0310 	and.w	r3, r3, #16
 800109c:	2201      	movs	r2, #1
 800109e:	409a      	lsls	r2, r3
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	430a      	orrs	r2, r1
 80010a6:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  /* Wait loop initialization and execution */
  /* Note: Variable divided by 2 to compensate partially CPU processing cycles, scaling in us split to not exceed 32 */
  /*       bits register capacity and handle low frequency. */
  wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80010a8:	4b22      	ldr	r3, [pc, #136]	@ (8001134 <HAL_DAC_Start+0xd0>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	099b      	lsrs	r3, r3, #6
 80010ae:	4a22      	ldr	r2, [pc, #136]	@ (8001138 <HAL_DAC_Start+0xd4>)
 80010b0:	fba2 2303 	umull	r2, r3, r2, r3
 80010b4:	099b      	lsrs	r3, r3, #6
 80010b6:	3301      	adds	r3, #1
 80010b8:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 80010ba:	e002      	b.n	80010c2 <HAL_DAC_Start+0x5e>
  {
    wait_loop_index--;
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	3b01      	subs	r3, #1
 80010c0:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d1f9      	bne.n	80010bc <HAL_DAC_Start+0x58>
  }

  if (Channel == DAC_CHANNEL_1)
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d10f      	bne.n	80010ee <HAL_DAC_Start+0x8a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80010d8:	2b02      	cmp	r3, #2
 80010da:	d11d      	bne.n	8001118 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	685a      	ldr	r2, [r3, #4]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f042 0201 	orr.w	r2, r2, #1
 80010ea:	605a      	str	r2, [r3, #4]
 80010ec:	e014      	b.n	8001118 <HAL_DAC_Start+0xb4>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	f003 0310 	and.w	r3, r3, #16
 80010fe:	2102      	movs	r1, #2
 8001100:	fa01 f303 	lsl.w	r3, r1, r3
 8001104:	429a      	cmp	r2, r3
 8001106:	d107      	bne.n	8001118 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	685a      	ldr	r2, [r3, #4]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f042 0202 	orr.w	r2, r2, #2
 8001116:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2201      	movs	r2, #1
 800111c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2200      	movs	r2, #0
 8001122:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001124:	2300      	movs	r3, #0
}
 8001126:	4618      	mov	r0, r3
 8001128:	3714      	adds	r7, #20
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	20000018 	.word	0x20000018
 8001138:	053e2d63 	.word	0x053e2d63

0800113c <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800113c:	b480      	push	{r7}
 800113e:	b087      	sub	sp, #28
 8001140:	af00      	add	r7, sp, #0
 8001142:	60f8      	str	r0, [r7, #12]
 8001144:	60b9      	str	r1, [r7, #8]
 8001146:	607a      	str	r2, [r7, #4]
 8001148:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 800114a:	2300      	movs	r3, #0
 800114c:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d101      	bne.n	8001158 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8001154:	2301      	movs	r3, #1
 8001156:	e018      	b.n	800118a <HAL_DAC_SetValue+0x4e>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d105      	bne.n	8001176 <HAL_DAC_SetValue+0x3a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800116a:	697a      	ldr	r2, [r7, #20]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	4413      	add	r3, r2
 8001170:	3308      	adds	r3, #8
 8001172:	617b      	str	r3, [r7, #20]
 8001174:	e004      	b.n	8001180 <HAL_DAC_SetValue+0x44>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8001176:	697a      	ldr	r2, [r7, #20]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	4413      	add	r3, r2
 800117c:	3314      	adds	r3, #20
 800117e:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	461a      	mov	r2, r3
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001188:	2300      	movs	r3, #0
}
 800118a:	4618      	mov	r0, r3
 800118c:	371c      	adds	r7, #28
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
	...

08001198 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b08a      	sub	sp, #40	@ 0x28
 800119c:	af00      	add	r7, sp, #0
 800119e:	60f8      	str	r0, [r7, #12]
 80011a0:	60b9      	str	r1, [r7, #8]
 80011a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011a4:	2300      	movs	r3, #0
 80011a6:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d002      	beq.n	80011b4 <HAL_DAC_ConfigChannel+0x1c>
 80011ae:	68bb      	ldr	r3, [r7, #8]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d101      	bne.n	80011b8 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 80011b4:	2301      	movs	r3, #1
 80011b6:	e19e      	b.n	80014f6 <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	795b      	ldrb	r3, [r3, #5]
 80011bc:	2b01      	cmp	r3, #1
 80011be:	d101      	bne.n	80011c4 <HAL_DAC_ConfigChannel+0x2c>
 80011c0:	2302      	movs	r3, #2
 80011c2:	e198      	b.n	80014f6 <HAL_DAC_ConfigChannel+0x35e>
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	2201      	movs	r2, #1
 80011c8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	2202      	movs	r2, #2
 80011ce:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	689b      	ldr	r3, [r3, #8]
 80011d4:	2b04      	cmp	r3, #4
 80011d6:	d17a      	bne.n	80012ce <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80011d8:	f7ff fde4 	bl	8000da4 <HAL_GetTick>
 80011dc:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d13d      	bne.n	8001260 <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80011e4:	e018      	b.n	8001218 <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80011e6:	f7ff fddd 	bl	8000da4 <HAL_GetTick>
 80011ea:	4602      	mov	r2, r0
 80011ec:	69bb      	ldr	r3, [r7, #24]
 80011ee:	1ad3      	subs	r3, r2, r3
 80011f0:	2b01      	cmp	r3, #1
 80011f2:	d911      	bls.n	8001218 <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80011fa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d00a      	beq.n	8001218 <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	691b      	ldr	r3, [r3, #16]
 8001206:	f043 0208 	orr.w	r2, r3, #8
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	2203      	movs	r2, #3
 8001212:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8001214:	2303      	movs	r3, #3
 8001216:	e16e      	b.n	80014f6 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800121e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001222:	2b00      	cmp	r3, #0
 8001224:	d1df      	bne.n	80011e6 <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	68ba      	ldr	r2, [r7, #8]
 800122c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800122e:	641a      	str	r2, [r3, #64]	@ 0x40
 8001230:	e020      	b.n	8001274 <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001232:	f7ff fdb7 	bl	8000da4 <HAL_GetTick>
 8001236:	4602      	mov	r2, r0
 8001238:	69bb      	ldr	r3, [r7, #24]
 800123a:	1ad3      	subs	r3, r2, r3
 800123c:	2b01      	cmp	r3, #1
 800123e:	d90f      	bls.n	8001260 <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001246:	2b00      	cmp	r3, #0
 8001248:	da0a      	bge.n	8001260 <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	691b      	ldr	r3, [r3, #16]
 800124e:	f043 0208 	orr.w	r2, r3, #8
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	2203      	movs	r2, #3
 800125a:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800125c:	2303      	movs	r3, #3
 800125e:	e14a      	b.n	80014f6 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001266:	2b00      	cmp	r3, #0
 8001268:	dbe3      	blt.n	8001232 <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	68ba      	ldr	r2, [r7, #8]
 8001270:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001272:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	f003 0310 	and.w	r3, r3, #16
 8001280:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8001284:	fa01 f303 	lsl.w	r3, r1, r3
 8001288:	43db      	mvns	r3, r3
 800128a:	ea02 0103 	and.w	r1, r2, r3
 800128e:	68bb      	ldr	r3, [r7, #8]
 8001290:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	f003 0310 	and.w	r3, r3, #16
 8001298:	409a      	lsls	r2, r3
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	430a      	orrs	r2, r1
 80012a0:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	f003 0310 	and.w	r3, r3, #16
 80012ae:	21ff      	movs	r1, #255	@ 0xff
 80012b0:	fa01 f303 	lsl.w	r3, r1, r3
 80012b4:	43db      	mvns	r3, r3
 80012b6:	ea02 0103 	and.w	r1, r2, r3
 80012ba:	68bb      	ldr	r3, [r7, #8]
 80012bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	f003 0310 	and.w	r3, r3, #16
 80012c4:	409a      	lsls	r2, r3
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	430a      	orrs	r2, r1
 80012cc:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80012ce:	68bb      	ldr	r3, [r7, #8]
 80012d0:	69db      	ldr	r3, [r3, #28]
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d11d      	bne.n	8001312 <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80012dc:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	f003 0310 	and.w	r3, r3, #16
 80012e4:	221f      	movs	r2, #31
 80012e6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ea:	43db      	mvns	r3, r3
 80012ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80012ee:	4013      	ands	r3, r2
 80012f0:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	6a1b      	ldr	r3, [r3, #32]
 80012f6:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	f003 0310 	and.w	r3, r3, #16
 80012fe:	697a      	ldr	r2, [r7, #20]
 8001300:	fa02 f303 	lsl.w	r3, r2, r3
 8001304:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001306:	4313      	orrs	r3, r2
 8001308:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001310:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001318:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	f003 0310 	and.w	r3, r3, #16
 8001320:	2207      	movs	r2, #7
 8001322:	fa02 f303 	lsl.w	r3, r2, r3
 8001326:	43db      	mvns	r3, r3
 8001328:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800132a:	4013      	ands	r3, r2
 800132c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800132e:	68bb      	ldr	r3, [r7, #8]
 8001330:	699b      	ldr	r3, [r3, #24]
 8001332:	2b01      	cmp	r3, #1
 8001334:	d102      	bne.n	800133c <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 8001336:	2300      	movs	r3, #0
 8001338:	623b      	str	r3, [r7, #32]
 800133a:	e00f      	b.n	800135c <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	699b      	ldr	r3, [r3, #24]
 8001340:	2b02      	cmp	r3, #2
 8001342:	d102      	bne.n	800134a <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8001344:	2301      	movs	r3, #1
 8001346:	623b      	str	r3, [r7, #32]
 8001348:	e008      	b.n	800135c <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800134a:	68bb      	ldr	r3, [r7, #8]
 800134c:	695b      	ldr	r3, [r3, #20]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d102      	bne.n	8001358 <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8001352:	2301      	movs	r3, #1
 8001354:	623b      	str	r3, [r7, #32]
 8001356:	e001      	b.n	800135c <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8001358:	2300      	movs	r3, #0
 800135a:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	689a      	ldr	r2, [r3, #8]
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	695b      	ldr	r3, [r3, #20]
 8001364:	4313      	orrs	r3, r2
 8001366:	6a3a      	ldr	r2, [r7, #32]
 8001368:	4313      	orrs	r3, r2
 800136a:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	f003 0310 	and.w	r3, r3, #16
 8001372:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001376:	fa02 f303 	lsl.w	r3, r2, r3
 800137a:	43db      	mvns	r3, r3
 800137c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800137e:	4013      	ands	r3, r2
 8001380:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8001382:	68bb      	ldr	r3, [r7, #8]
 8001384:	791b      	ldrb	r3, [r3, #4]
 8001386:	2b01      	cmp	r3, #1
 8001388:	d102      	bne.n	8001390 <HAL_DAC_ConfigChannel+0x1f8>
 800138a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800138e:	e000      	b.n	8001392 <HAL_DAC_ConfigChannel+0x1fa>
 8001390:	2300      	movs	r3, #0
 8001392:	697a      	ldr	r2, [r7, #20]
 8001394:	4313      	orrs	r3, r2
 8001396:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	f003 0310 	and.w	r3, r3, #16
 800139e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80013a2:	fa02 f303 	lsl.w	r3, r2, r3
 80013a6:	43db      	mvns	r3, r3
 80013a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80013aa:	4013      	ands	r3, r2
 80013ac:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80013ae:	68bb      	ldr	r3, [r7, #8]
 80013b0:	795b      	ldrb	r3, [r3, #5]
 80013b2:	2b01      	cmp	r3, #1
 80013b4:	d102      	bne.n	80013bc <HAL_DAC_ConfigChannel+0x224>
 80013b6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80013ba:	e000      	b.n	80013be <HAL_DAC_ConfigChannel+0x226>
 80013bc:	2300      	movs	r3, #0
 80013be:	697a      	ldr	r2, [r7, #20]
 80013c0:	4313      	orrs	r3, r2
 80013c2:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80013c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013c6:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80013ca:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	2b02      	cmp	r3, #2
 80013d2:	d114      	bne.n	80013fe <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80013d4:	f000 ffba 	bl	800234c <HAL_RCC_GetHCLKFreq>
 80013d8:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	4a48      	ldr	r2, [pc, #288]	@ (8001500 <HAL_DAC_ConfigChannel+0x368>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d904      	bls.n	80013ec <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 80013e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80013e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80013ea:	e00f      	b.n	800140c <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	4a45      	ldr	r2, [pc, #276]	@ (8001504 <HAL_DAC_ConfigChannel+0x36c>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d90a      	bls.n	800140a <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80013f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013f6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80013fc:	e006      	b.n	800140c <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 80013fe:	68bb      	ldr	r3, [r7, #8]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001404:	4313      	orrs	r3, r2
 8001406:	627b      	str	r3, [r7, #36]	@ 0x24
 8001408:	e000      	b.n	800140c <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 800140a:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f003 0310 	and.w	r3, r3, #16
 8001412:	697a      	ldr	r2, [r7, #20]
 8001414:	fa02 f303 	lsl.w	r3, r2, r3
 8001418:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800141a:	4313      	orrs	r3, r2
 800141c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001424:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	6819      	ldr	r1, [r3, #0]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	f003 0310 	and.w	r3, r3, #16
 8001432:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001436:	fa02 f303 	lsl.w	r3, r2, r3
 800143a:	43da      	mvns	r2, r3
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	400a      	ands	r2, r1
 8001442:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	f003 0310 	and.w	r3, r3, #16
 8001452:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8001456:	fa02 f303 	lsl.w	r3, r2, r3
 800145a:	43db      	mvns	r3, r3
 800145c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800145e:	4013      	ands	r3, r2
 8001460:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8001462:	68bb      	ldr	r3, [r7, #8]
 8001464:	68db      	ldr	r3, [r3, #12]
 8001466:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	f003 0310 	and.w	r3, r3, #16
 800146e:	697a      	ldr	r2, [r7, #20]
 8001470:	fa02 f303 	lsl.w	r3, r2, r3
 8001474:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001476:	4313      	orrs	r3, r2
 8001478:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001480:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	6819      	ldr	r1, [r3, #0]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	f003 0310 	and.w	r3, r3, #16
 800148e:	22c0      	movs	r2, #192	@ 0xc0
 8001490:	fa02 f303 	lsl.w	r3, r2, r3
 8001494:	43da      	mvns	r2, r3
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	400a      	ands	r2, r1
 800149c:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	68db      	ldr	r3, [r3, #12]
 80014a2:	089b      	lsrs	r3, r3, #2
 80014a4:	f003 030f 	and.w	r3, r3, #15
 80014a8:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80014aa:	68bb      	ldr	r3, [r7, #8]
 80014ac:	691b      	ldr	r3, [r3, #16]
 80014ae:	089b      	lsrs	r3, r3, #2
 80014b0:	021b      	lsls	r3, r3, #8
 80014b2:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80014b6:	697a      	ldr	r2, [r7, #20]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	f003 0310 	and.w	r3, r3, #16
 80014c8:	f640 710f 	movw	r1, #3855	@ 0xf0f
 80014cc:	fa01 f303 	lsl.w	r3, r1, r3
 80014d0:	43db      	mvns	r3, r3
 80014d2:	ea02 0103 	and.w	r1, r2, r3
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	f003 0310 	and.w	r3, r3, #16
 80014dc:	697a      	ldr	r2, [r7, #20]
 80014de:	409a      	lsls	r2, r3
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	430a      	orrs	r2, r1
 80014e6:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	2201      	movs	r2, #1
 80014ec:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	2200      	movs	r2, #0
 80014f2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80014f4:	7ffb      	ldrb	r3, [r7, #31]
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3728      	adds	r7, #40	@ 0x28
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	09896800 	.word	0x09896800
 8001504:	04c4b400 	.word	0x04c4b400

08001508 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001508:	b480      	push	{r7}
 800150a:	b087      	sub	sp, #28
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001512:	2300      	movs	r3, #0
 8001514:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001516:	e15a      	b.n	80017ce <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	2101      	movs	r1, #1
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	fa01 f303 	lsl.w	r3, r1, r3
 8001524:	4013      	ands	r3, r2
 8001526:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	2b00      	cmp	r3, #0
 800152c:	f000 814c 	beq.w	80017c8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f003 0303 	and.w	r3, r3, #3
 8001538:	2b01      	cmp	r3, #1
 800153a:	d005      	beq.n	8001548 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001544:	2b02      	cmp	r3, #2
 8001546:	d130      	bne.n	80015aa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	005b      	lsls	r3, r3, #1
 8001552:	2203      	movs	r2, #3
 8001554:	fa02 f303 	lsl.w	r3, r2, r3
 8001558:	43db      	mvns	r3, r3
 800155a:	693a      	ldr	r2, [r7, #16]
 800155c:	4013      	ands	r3, r2
 800155e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	68da      	ldr	r2, [r3, #12]
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	005b      	lsls	r3, r3, #1
 8001568:	fa02 f303 	lsl.w	r3, r2, r3
 800156c:	693a      	ldr	r2, [r7, #16]
 800156e:	4313      	orrs	r3, r2
 8001570:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	693a      	ldr	r2, [r7, #16]
 8001576:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800157e:	2201      	movs	r2, #1
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	fa02 f303 	lsl.w	r3, r2, r3
 8001586:	43db      	mvns	r3, r3
 8001588:	693a      	ldr	r2, [r7, #16]
 800158a:	4013      	ands	r3, r2
 800158c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	091b      	lsrs	r3, r3, #4
 8001594:	f003 0201 	and.w	r2, r3, #1
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	fa02 f303 	lsl.w	r3, r2, r3
 800159e:	693a      	ldr	r2, [r7, #16]
 80015a0:	4313      	orrs	r3, r2
 80015a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	693a      	ldr	r2, [r7, #16]
 80015a8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	f003 0303 	and.w	r3, r3, #3
 80015b2:	2b03      	cmp	r3, #3
 80015b4:	d017      	beq.n	80015e6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	68db      	ldr	r3, [r3, #12]
 80015ba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	005b      	lsls	r3, r3, #1
 80015c0:	2203      	movs	r2, #3
 80015c2:	fa02 f303 	lsl.w	r3, r2, r3
 80015c6:	43db      	mvns	r3, r3
 80015c8:	693a      	ldr	r2, [r7, #16]
 80015ca:	4013      	ands	r3, r2
 80015cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	689a      	ldr	r2, [r3, #8]
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	005b      	lsls	r3, r3, #1
 80015d6:	fa02 f303 	lsl.w	r3, r2, r3
 80015da:	693a      	ldr	r2, [r7, #16]
 80015dc:	4313      	orrs	r3, r2
 80015de:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	693a      	ldr	r2, [r7, #16]
 80015e4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	f003 0303 	and.w	r3, r3, #3
 80015ee:	2b02      	cmp	r3, #2
 80015f0:	d123      	bne.n	800163a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	08da      	lsrs	r2, r3, #3
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	3208      	adds	r2, #8
 80015fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	f003 0307 	and.w	r3, r3, #7
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	220f      	movs	r2, #15
 800160a:	fa02 f303 	lsl.w	r3, r2, r3
 800160e:	43db      	mvns	r3, r3
 8001610:	693a      	ldr	r2, [r7, #16]
 8001612:	4013      	ands	r3, r2
 8001614:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	691a      	ldr	r2, [r3, #16]
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	f003 0307 	and.w	r3, r3, #7
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	fa02 f303 	lsl.w	r3, r2, r3
 8001626:	693a      	ldr	r2, [r7, #16]
 8001628:	4313      	orrs	r3, r2
 800162a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	08da      	lsrs	r2, r3, #3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	3208      	adds	r2, #8
 8001634:	6939      	ldr	r1, [r7, #16]
 8001636:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	005b      	lsls	r3, r3, #1
 8001644:	2203      	movs	r2, #3
 8001646:	fa02 f303 	lsl.w	r3, r2, r3
 800164a:	43db      	mvns	r3, r3
 800164c:	693a      	ldr	r2, [r7, #16]
 800164e:	4013      	ands	r3, r2
 8001650:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	f003 0203 	and.w	r2, r3, #3
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	005b      	lsls	r3, r3, #1
 800165e:	fa02 f303 	lsl.w	r3, r2, r3
 8001662:	693a      	ldr	r2, [r7, #16]
 8001664:	4313      	orrs	r3, r2
 8001666:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	693a      	ldr	r2, [r7, #16]
 800166c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001676:	2b00      	cmp	r3, #0
 8001678:	f000 80a6 	beq.w	80017c8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800167c:	4b5b      	ldr	r3, [pc, #364]	@ (80017ec <HAL_GPIO_Init+0x2e4>)
 800167e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001680:	4a5a      	ldr	r2, [pc, #360]	@ (80017ec <HAL_GPIO_Init+0x2e4>)
 8001682:	f043 0301 	orr.w	r3, r3, #1
 8001686:	6613      	str	r3, [r2, #96]	@ 0x60
 8001688:	4b58      	ldr	r3, [pc, #352]	@ (80017ec <HAL_GPIO_Init+0x2e4>)
 800168a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800168c:	f003 0301 	and.w	r3, r3, #1
 8001690:	60bb      	str	r3, [r7, #8]
 8001692:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001694:	4a56      	ldr	r2, [pc, #344]	@ (80017f0 <HAL_GPIO_Init+0x2e8>)
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	089b      	lsrs	r3, r3, #2
 800169a:	3302      	adds	r3, #2
 800169c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	f003 0303 	and.w	r3, r3, #3
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	220f      	movs	r2, #15
 80016ac:	fa02 f303 	lsl.w	r3, r2, r3
 80016b0:	43db      	mvns	r3, r3
 80016b2:	693a      	ldr	r2, [r7, #16]
 80016b4:	4013      	ands	r3, r2
 80016b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80016be:	d01f      	beq.n	8001700 <HAL_GPIO_Init+0x1f8>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	4a4c      	ldr	r2, [pc, #304]	@ (80017f4 <HAL_GPIO_Init+0x2ec>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d019      	beq.n	80016fc <HAL_GPIO_Init+0x1f4>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	4a4b      	ldr	r2, [pc, #300]	@ (80017f8 <HAL_GPIO_Init+0x2f0>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d013      	beq.n	80016f8 <HAL_GPIO_Init+0x1f0>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	4a4a      	ldr	r2, [pc, #296]	@ (80017fc <HAL_GPIO_Init+0x2f4>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d00d      	beq.n	80016f4 <HAL_GPIO_Init+0x1ec>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	4a49      	ldr	r2, [pc, #292]	@ (8001800 <HAL_GPIO_Init+0x2f8>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d007      	beq.n	80016f0 <HAL_GPIO_Init+0x1e8>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	4a48      	ldr	r2, [pc, #288]	@ (8001804 <HAL_GPIO_Init+0x2fc>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d101      	bne.n	80016ec <HAL_GPIO_Init+0x1e4>
 80016e8:	2305      	movs	r3, #5
 80016ea:	e00a      	b.n	8001702 <HAL_GPIO_Init+0x1fa>
 80016ec:	2306      	movs	r3, #6
 80016ee:	e008      	b.n	8001702 <HAL_GPIO_Init+0x1fa>
 80016f0:	2304      	movs	r3, #4
 80016f2:	e006      	b.n	8001702 <HAL_GPIO_Init+0x1fa>
 80016f4:	2303      	movs	r3, #3
 80016f6:	e004      	b.n	8001702 <HAL_GPIO_Init+0x1fa>
 80016f8:	2302      	movs	r3, #2
 80016fa:	e002      	b.n	8001702 <HAL_GPIO_Init+0x1fa>
 80016fc:	2301      	movs	r3, #1
 80016fe:	e000      	b.n	8001702 <HAL_GPIO_Init+0x1fa>
 8001700:	2300      	movs	r3, #0
 8001702:	697a      	ldr	r2, [r7, #20]
 8001704:	f002 0203 	and.w	r2, r2, #3
 8001708:	0092      	lsls	r2, r2, #2
 800170a:	4093      	lsls	r3, r2
 800170c:	693a      	ldr	r2, [r7, #16]
 800170e:	4313      	orrs	r3, r2
 8001710:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001712:	4937      	ldr	r1, [pc, #220]	@ (80017f0 <HAL_GPIO_Init+0x2e8>)
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	089b      	lsrs	r3, r3, #2
 8001718:	3302      	adds	r3, #2
 800171a:	693a      	ldr	r2, [r7, #16]
 800171c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001720:	4b39      	ldr	r3, [pc, #228]	@ (8001808 <HAL_GPIO_Init+0x300>)
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	43db      	mvns	r3, r3
 800172a:	693a      	ldr	r2, [r7, #16]
 800172c:	4013      	ands	r3, r2
 800172e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001738:	2b00      	cmp	r3, #0
 800173a:	d003      	beq.n	8001744 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800173c:	693a      	ldr	r2, [r7, #16]
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	4313      	orrs	r3, r2
 8001742:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001744:	4a30      	ldr	r2, [pc, #192]	@ (8001808 <HAL_GPIO_Init+0x300>)
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800174a:	4b2f      	ldr	r3, [pc, #188]	@ (8001808 <HAL_GPIO_Init+0x300>)
 800174c:	68db      	ldr	r3, [r3, #12]
 800174e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	43db      	mvns	r3, r3
 8001754:	693a      	ldr	r2, [r7, #16]
 8001756:	4013      	ands	r3, r2
 8001758:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001762:	2b00      	cmp	r3, #0
 8001764:	d003      	beq.n	800176e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001766:	693a      	ldr	r2, [r7, #16]
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	4313      	orrs	r3, r2
 800176c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800176e:	4a26      	ldr	r2, [pc, #152]	@ (8001808 <HAL_GPIO_Init+0x300>)
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001774:	4b24      	ldr	r3, [pc, #144]	@ (8001808 <HAL_GPIO_Init+0x300>)
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	43db      	mvns	r3, r3
 800177e:	693a      	ldr	r2, [r7, #16]
 8001780:	4013      	ands	r3, r2
 8001782:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800178c:	2b00      	cmp	r3, #0
 800178e:	d003      	beq.n	8001798 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001790:	693a      	ldr	r2, [r7, #16]
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	4313      	orrs	r3, r2
 8001796:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001798:	4a1b      	ldr	r2, [pc, #108]	@ (8001808 <HAL_GPIO_Init+0x300>)
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800179e:	4b1a      	ldr	r3, [pc, #104]	@ (8001808 <HAL_GPIO_Init+0x300>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	43db      	mvns	r3, r3
 80017a8:	693a      	ldr	r2, [r7, #16]
 80017aa:	4013      	ands	r3, r2
 80017ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d003      	beq.n	80017c2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80017ba:	693a      	ldr	r2, [r7, #16]
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	4313      	orrs	r3, r2
 80017c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80017c2:	4a11      	ldr	r2, [pc, #68]	@ (8001808 <HAL_GPIO_Init+0x300>)
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	3301      	adds	r3, #1
 80017cc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	fa22 f303 	lsr.w	r3, r2, r3
 80017d8:	2b00      	cmp	r3, #0
 80017da:	f47f ae9d 	bne.w	8001518 <HAL_GPIO_Init+0x10>
  }
}
 80017de:	bf00      	nop
 80017e0:	bf00      	nop
 80017e2:	371c      	adds	r7, #28
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr
 80017ec:	40021000 	.word	0x40021000
 80017f0:	40010000 	.word	0x40010000
 80017f4:	48000400 	.word	0x48000400
 80017f8:	48000800 	.word	0x48000800
 80017fc:	48000c00 	.word	0x48000c00
 8001800:	48001000 	.word	0x48001000
 8001804:	48001400 	.word	0x48001400
 8001808:	40010400 	.word	0x40010400

0800180c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	460b      	mov	r3, r1
 8001816:	807b      	strh	r3, [r7, #2]
 8001818:	4613      	mov	r3, r2
 800181a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800181c:	787b      	ldrb	r3, [r7, #1]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d003      	beq.n	800182a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001822:	887a      	ldrh	r2, [r7, #2]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001828:	e002      	b.n	8001830 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800182a:	887a      	ldrh	r2, [r7, #2]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001830:	bf00      	nop
 8001832:	370c      	adds	r7, #12
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	4603      	mov	r3, r0
 8001844:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001846:	4b08      	ldr	r3, [pc, #32]	@ (8001868 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001848:	695a      	ldr	r2, [r3, #20]
 800184a:	88fb      	ldrh	r3, [r7, #6]
 800184c:	4013      	ands	r3, r2
 800184e:	2b00      	cmp	r3, #0
 8001850:	d006      	beq.n	8001860 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001852:	4a05      	ldr	r2, [pc, #20]	@ (8001868 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001854:	88fb      	ldrh	r3, [r7, #6]
 8001856:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001858:	88fb      	ldrh	r3, [r7, #6]
 800185a:	4618      	mov	r0, r3
 800185c:	f000 f806 	bl	800186c <HAL_GPIO_EXTI_Callback>
  }
}
 8001860:	bf00      	nop
 8001862:	3708      	adds	r7, #8
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	40010400 	.word	0x40010400

0800186c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	4603      	mov	r3, r0
 8001874:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001876:	bf00      	nop
 8001878:	370c      	adds	r7, #12
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
	...

08001884 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001884:	b480      	push	{r7}
 8001886:	b085      	sub	sp, #20
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d141      	bne.n	8001916 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001892:	4b4b      	ldr	r3, [pc, #300]	@ (80019c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800189a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800189e:	d131      	bne.n	8001904 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80018a0:	4b47      	ldr	r3, [pc, #284]	@ (80019c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80018a6:	4a46      	ldr	r2, [pc, #280]	@ (80019c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80018ac:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80018b0:	4b43      	ldr	r3, [pc, #268]	@ (80019c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80018b8:	4a41      	ldr	r2, [pc, #260]	@ (80019c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80018be:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80018c0:	4b40      	ldr	r3, [pc, #256]	@ (80019c4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	2232      	movs	r2, #50	@ 0x32
 80018c6:	fb02 f303 	mul.w	r3, r2, r3
 80018ca:	4a3f      	ldr	r2, [pc, #252]	@ (80019c8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80018cc:	fba2 2303 	umull	r2, r3, r2, r3
 80018d0:	0c9b      	lsrs	r3, r3, #18
 80018d2:	3301      	adds	r3, #1
 80018d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018d6:	e002      	b.n	80018de <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	3b01      	subs	r3, #1
 80018dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018de:	4b38      	ldr	r3, [pc, #224]	@ (80019c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018e0:	695b      	ldr	r3, [r3, #20]
 80018e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80018ea:	d102      	bne.n	80018f2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d1f2      	bne.n	80018d8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80018f2:	4b33      	ldr	r3, [pc, #204]	@ (80019c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018f4:	695b      	ldr	r3, [r3, #20]
 80018f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80018fe:	d158      	bne.n	80019b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001900:	2303      	movs	r3, #3
 8001902:	e057      	b.n	80019b4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001904:	4b2e      	ldr	r3, [pc, #184]	@ (80019c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001906:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800190a:	4a2d      	ldr	r2, [pc, #180]	@ (80019c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800190c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001910:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001914:	e04d      	b.n	80019b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800191c:	d141      	bne.n	80019a2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800191e:	4b28      	ldr	r3, [pc, #160]	@ (80019c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001926:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800192a:	d131      	bne.n	8001990 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800192c:	4b24      	ldr	r3, [pc, #144]	@ (80019c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800192e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001932:	4a23      	ldr	r2, [pc, #140]	@ (80019c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001934:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001938:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800193c:	4b20      	ldr	r3, [pc, #128]	@ (80019c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001944:	4a1e      	ldr	r2, [pc, #120]	@ (80019c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001946:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800194a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800194c:	4b1d      	ldr	r3, [pc, #116]	@ (80019c4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	2232      	movs	r2, #50	@ 0x32
 8001952:	fb02 f303 	mul.w	r3, r2, r3
 8001956:	4a1c      	ldr	r2, [pc, #112]	@ (80019c8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001958:	fba2 2303 	umull	r2, r3, r2, r3
 800195c:	0c9b      	lsrs	r3, r3, #18
 800195e:	3301      	adds	r3, #1
 8001960:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001962:	e002      	b.n	800196a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	3b01      	subs	r3, #1
 8001968:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800196a:	4b15      	ldr	r3, [pc, #84]	@ (80019c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800196c:	695b      	ldr	r3, [r3, #20]
 800196e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001972:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001976:	d102      	bne.n	800197e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d1f2      	bne.n	8001964 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800197e:	4b10      	ldr	r3, [pc, #64]	@ (80019c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001980:	695b      	ldr	r3, [r3, #20]
 8001982:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001986:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800198a:	d112      	bne.n	80019b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800198c:	2303      	movs	r3, #3
 800198e:	e011      	b.n	80019b4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001990:	4b0b      	ldr	r3, [pc, #44]	@ (80019c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001992:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001996:	4a0a      	ldr	r2, [pc, #40]	@ (80019c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001998:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800199c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80019a0:	e007      	b.n	80019b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80019a2:	4b07      	ldr	r3, [pc, #28]	@ (80019c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80019aa:	4a05      	ldr	r2, [pc, #20]	@ (80019c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019ac:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80019b0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80019b2:	2300      	movs	r3, #0
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3714      	adds	r7, #20
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr
 80019c0:	40007000 	.word	0x40007000
 80019c4:	20000018 	.word	0x20000018
 80019c8:	431bde83 	.word	0x431bde83

080019cc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80019d0:	4b05      	ldr	r3, [pc, #20]	@ (80019e8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	4a04      	ldr	r2, [pc, #16]	@ (80019e8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80019d6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019da:	6093      	str	r3, [r2, #8]
}
 80019dc:	bf00      	nop
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	40007000 	.word	0x40007000

080019ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b088      	sub	sp, #32
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d101      	bne.n	80019fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e2fe      	b.n	8001ffc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 0301 	and.w	r3, r3, #1
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d075      	beq.n	8001af6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a0a:	4b97      	ldr	r3, [pc, #604]	@ (8001c68 <HAL_RCC_OscConfig+0x27c>)
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	f003 030c 	and.w	r3, r3, #12
 8001a12:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a14:	4b94      	ldr	r3, [pc, #592]	@ (8001c68 <HAL_RCC_OscConfig+0x27c>)
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	f003 0303 	and.w	r3, r3, #3
 8001a1c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001a1e:	69bb      	ldr	r3, [r7, #24]
 8001a20:	2b0c      	cmp	r3, #12
 8001a22:	d102      	bne.n	8001a2a <HAL_RCC_OscConfig+0x3e>
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	2b03      	cmp	r3, #3
 8001a28:	d002      	beq.n	8001a30 <HAL_RCC_OscConfig+0x44>
 8001a2a:	69bb      	ldr	r3, [r7, #24]
 8001a2c:	2b08      	cmp	r3, #8
 8001a2e:	d10b      	bne.n	8001a48 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a30:	4b8d      	ldr	r3, [pc, #564]	@ (8001c68 <HAL_RCC_OscConfig+0x27c>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d05b      	beq.n	8001af4 <HAL_RCC_OscConfig+0x108>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d157      	bne.n	8001af4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	e2d9      	b.n	8001ffc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a50:	d106      	bne.n	8001a60 <HAL_RCC_OscConfig+0x74>
 8001a52:	4b85      	ldr	r3, [pc, #532]	@ (8001c68 <HAL_RCC_OscConfig+0x27c>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a84      	ldr	r2, [pc, #528]	@ (8001c68 <HAL_RCC_OscConfig+0x27c>)
 8001a58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a5c:	6013      	str	r3, [r2, #0]
 8001a5e:	e01d      	b.n	8001a9c <HAL_RCC_OscConfig+0xb0>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001a68:	d10c      	bne.n	8001a84 <HAL_RCC_OscConfig+0x98>
 8001a6a:	4b7f      	ldr	r3, [pc, #508]	@ (8001c68 <HAL_RCC_OscConfig+0x27c>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a7e      	ldr	r2, [pc, #504]	@ (8001c68 <HAL_RCC_OscConfig+0x27c>)
 8001a70:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a74:	6013      	str	r3, [r2, #0]
 8001a76:	4b7c      	ldr	r3, [pc, #496]	@ (8001c68 <HAL_RCC_OscConfig+0x27c>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a7b      	ldr	r2, [pc, #492]	@ (8001c68 <HAL_RCC_OscConfig+0x27c>)
 8001a7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a80:	6013      	str	r3, [r2, #0]
 8001a82:	e00b      	b.n	8001a9c <HAL_RCC_OscConfig+0xb0>
 8001a84:	4b78      	ldr	r3, [pc, #480]	@ (8001c68 <HAL_RCC_OscConfig+0x27c>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a77      	ldr	r2, [pc, #476]	@ (8001c68 <HAL_RCC_OscConfig+0x27c>)
 8001a8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a8e:	6013      	str	r3, [r2, #0]
 8001a90:	4b75      	ldr	r3, [pc, #468]	@ (8001c68 <HAL_RCC_OscConfig+0x27c>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a74      	ldr	r2, [pc, #464]	@ (8001c68 <HAL_RCC_OscConfig+0x27c>)
 8001a96:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d013      	beq.n	8001acc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aa4:	f7ff f97e 	bl	8000da4 <HAL_GetTick>
 8001aa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001aaa:	e008      	b.n	8001abe <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001aac:	f7ff f97a 	bl	8000da4 <HAL_GetTick>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	2b64      	cmp	r3, #100	@ 0x64
 8001ab8:	d901      	bls.n	8001abe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001aba:	2303      	movs	r3, #3
 8001abc:	e29e      	b.n	8001ffc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001abe:	4b6a      	ldr	r3, [pc, #424]	@ (8001c68 <HAL_RCC_OscConfig+0x27c>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d0f0      	beq.n	8001aac <HAL_RCC_OscConfig+0xc0>
 8001aca:	e014      	b.n	8001af6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001acc:	f7ff f96a 	bl	8000da4 <HAL_GetTick>
 8001ad0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ad2:	e008      	b.n	8001ae6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ad4:	f7ff f966 	bl	8000da4 <HAL_GetTick>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	2b64      	cmp	r3, #100	@ 0x64
 8001ae0:	d901      	bls.n	8001ae6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	e28a      	b.n	8001ffc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ae6:	4b60      	ldr	r3, [pc, #384]	@ (8001c68 <HAL_RCC_OscConfig+0x27c>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d1f0      	bne.n	8001ad4 <HAL_RCC_OscConfig+0xe8>
 8001af2:	e000      	b.n	8001af6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001af4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 0302 	and.w	r3, r3, #2
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d075      	beq.n	8001bee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b02:	4b59      	ldr	r3, [pc, #356]	@ (8001c68 <HAL_RCC_OscConfig+0x27c>)
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	f003 030c 	and.w	r3, r3, #12
 8001b0a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b0c:	4b56      	ldr	r3, [pc, #344]	@ (8001c68 <HAL_RCC_OscConfig+0x27c>)
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	f003 0303 	and.w	r3, r3, #3
 8001b14:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001b16:	69bb      	ldr	r3, [r7, #24]
 8001b18:	2b0c      	cmp	r3, #12
 8001b1a:	d102      	bne.n	8001b22 <HAL_RCC_OscConfig+0x136>
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	2b02      	cmp	r3, #2
 8001b20:	d002      	beq.n	8001b28 <HAL_RCC_OscConfig+0x13c>
 8001b22:	69bb      	ldr	r3, [r7, #24]
 8001b24:	2b04      	cmp	r3, #4
 8001b26:	d11f      	bne.n	8001b68 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b28:	4b4f      	ldr	r3, [pc, #316]	@ (8001c68 <HAL_RCC_OscConfig+0x27c>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d005      	beq.n	8001b40 <HAL_RCC_OscConfig+0x154>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d101      	bne.n	8001b40 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e25d      	b.n	8001ffc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b40:	4b49      	ldr	r3, [pc, #292]	@ (8001c68 <HAL_RCC_OscConfig+0x27c>)
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	691b      	ldr	r3, [r3, #16]
 8001b4c:	061b      	lsls	r3, r3, #24
 8001b4e:	4946      	ldr	r1, [pc, #280]	@ (8001c68 <HAL_RCC_OscConfig+0x27c>)
 8001b50:	4313      	orrs	r3, r2
 8001b52:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001b54:	4b45      	ldr	r3, [pc, #276]	@ (8001c6c <HAL_RCC_OscConfig+0x280>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7ff f8d7 	bl	8000d0c <HAL_InitTick>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d043      	beq.n	8001bec <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	e249      	b.n	8001ffc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d023      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b70:	4b3d      	ldr	r3, [pc, #244]	@ (8001c68 <HAL_RCC_OscConfig+0x27c>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a3c      	ldr	r2, [pc, #240]	@ (8001c68 <HAL_RCC_OscConfig+0x27c>)
 8001b76:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b7c:	f7ff f912 	bl	8000da4 <HAL_GetTick>
 8001b80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b82:	e008      	b.n	8001b96 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b84:	f7ff f90e 	bl	8000da4 <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d901      	bls.n	8001b96 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	e232      	b.n	8001ffc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b96:	4b34      	ldr	r3, [pc, #208]	@ (8001c68 <HAL_RCC_OscConfig+0x27c>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d0f0      	beq.n	8001b84 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ba2:	4b31      	ldr	r3, [pc, #196]	@ (8001c68 <HAL_RCC_OscConfig+0x27c>)
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	691b      	ldr	r3, [r3, #16]
 8001bae:	061b      	lsls	r3, r3, #24
 8001bb0:	492d      	ldr	r1, [pc, #180]	@ (8001c68 <HAL_RCC_OscConfig+0x27c>)
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	604b      	str	r3, [r1, #4]
 8001bb6:	e01a      	b.n	8001bee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bb8:	4b2b      	ldr	r3, [pc, #172]	@ (8001c68 <HAL_RCC_OscConfig+0x27c>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a2a      	ldr	r2, [pc, #168]	@ (8001c68 <HAL_RCC_OscConfig+0x27c>)
 8001bbe:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001bc2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bc4:	f7ff f8ee 	bl	8000da4 <HAL_GetTick>
 8001bc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001bca:	e008      	b.n	8001bde <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bcc:	f7ff f8ea 	bl	8000da4 <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d901      	bls.n	8001bde <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e20e      	b.n	8001ffc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001bde:	4b22      	ldr	r3, [pc, #136]	@ (8001c68 <HAL_RCC_OscConfig+0x27c>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d1f0      	bne.n	8001bcc <HAL_RCC_OscConfig+0x1e0>
 8001bea:	e000      	b.n	8001bee <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bec:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0308 	and.w	r3, r3, #8
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d041      	beq.n	8001c7e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	695b      	ldr	r3, [r3, #20]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d01c      	beq.n	8001c3c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c02:	4b19      	ldr	r3, [pc, #100]	@ (8001c68 <HAL_RCC_OscConfig+0x27c>)
 8001c04:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c08:	4a17      	ldr	r2, [pc, #92]	@ (8001c68 <HAL_RCC_OscConfig+0x27c>)
 8001c0a:	f043 0301 	orr.w	r3, r3, #1
 8001c0e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c12:	f7ff f8c7 	bl	8000da4 <HAL_GetTick>
 8001c16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c18:	e008      	b.n	8001c2c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c1a:	f7ff f8c3 	bl	8000da4 <HAL_GetTick>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	2b02      	cmp	r3, #2
 8001c26:	d901      	bls.n	8001c2c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	e1e7      	b.n	8001ffc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c2c:	4b0e      	ldr	r3, [pc, #56]	@ (8001c68 <HAL_RCC_OscConfig+0x27c>)
 8001c2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c32:	f003 0302 	and.w	r3, r3, #2
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d0ef      	beq.n	8001c1a <HAL_RCC_OscConfig+0x22e>
 8001c3a:	e020      	b.n	8001c7e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c3c:	4b0a      	ldr	r3, [pc, #40]	@ (8001c68 <HAL_RCC_OscConfig+0x27c>)
 8001c3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c42:	4a09      	ldr	r2, [pc, #36]	@ (8001c68 <HAL_RCC_OscConfig+0x27c>)
 8001c44:	f023 0301 	bic.w	r3, r3, #1
 8001c48:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c4c:	f7ff f8aa 	bl	8000da4 <HAL_GetTick>
 8001c50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c52:	e00d      	b.n	8001c70 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c54:	f7ff f8a6 	bl	8000da4 <HAL_GetTick>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d906      	bls.n	8001c70 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001c62:	2303      	movs	r3, #3
 8001c64:	e1ca      	b.n	8001ffc <HAL_RCC_OscConfig+0x610>
 8001c66:	bf00      	nop
 8001c68:	40021000 	.word	0x40021000
 8001c6c:	2000001c 	.word	0x2000001c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c70:	4b8c      	ldr	r3, [pc, #560]	@ (8001ea4 <HAL_RCC_OscConfig+0x4b8>)
 8001c72:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c76:	f003 0302 	and.w	r3, r3, #2
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d1ea      	bne.n	8001c54 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0304 	and.w	r3, r3, #4
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	f000 80a6 	beq.w	8001dd8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001c90:	4b84      	ldr	r3, [pc, #528]	@ (8001ea4 <HAL_RCC_OscConfig+0x4b8>)
 8001c92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d101      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x2b4>
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e000      	b.n	8001ca2 <HAL_RCC_OscConfig+0x2b6>
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d00d      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ca6:	4b7f      	ldr	r3, [pc, #508]	@ (8001ea4 <HAL_RCC_OscConfig+0x4b8>)
 8001ca8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001caa:	4a7e      	ldr	r2, [pc, #504]	@ (8001ea4 <HAL_RCC_OscConfig+0x4b8>)
 8001cac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cb0:	6593      	str	r3, [r2, #88]	@ 0x58
 8001cb2:	4b7c      	ldr	r3, [pc, #496]	@ (8001ea4 <HAL_RCC_OscConfig+0x4b8>)
 8001cb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cba:	60fb      	str	r3, [r7, #12]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cc2:	4b79      	ldr	r3, [pc, #484]	@ (8001ea8 <HAL_RCC_OscConfig+0x4bc>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d118      	bne.n	8001d00 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001cce:	4b76      	ldr	r3, [pc, #472]	@ (8001ea8 <HAL_RCC_OscConfig+0x4bc>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a75      	ldr	r2, [pc, #468]	@ (8001ea8 <HAL_RCC_OscConfig+0x4bc>)
 8001cd4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cda:	f7ff f863 	bl	8000da4 <HAL_GetTick>
 8001cde:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ce0:	e008      	b.n	8001cf4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ce2:	f7ff f85f 	bl	8000da4 <HAL_GetTick>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	1ad3      	subs	r3, r2, r3
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	d901      	bls.n	8001cf4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	e183      	b.n	8001ffc <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cf4:	4b6c      	ldr	r3, [pc, #432]	@ (8001ea8 <HAL_RCC_OscConfig+0x4bc>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d0f0      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d108      	bne.n	8001d1a <HAL_RCC_OscConfig+0x32e>
 8001d08:	4b66      	ldr	r3, [pc, #408]	@ (8001ea4 <HAL_RCC_OscConfig+0x4b8>)
 8001d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d0e:	4a65      	ldr	r2, [pc, #404]	@ (8001ea4 <HAL_RCC_OscConfig+0x4b8>)
 8001d10:	f043 0301 	orr.w	r3, r3, #1
 8001d14:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001d18:	e024      	b.n	8001d64 <HAL_RCC_OscConfig+0x378>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	2b05      	cmp	r3, #5
 8001d20:	d110      	bne.n	8001d44 <HAL_RCC_OscConfig+0x358>
 8001d22:	4b60      	ldr	r3, [pc, #384]	@ (8001ea4 <HAL_RCC_OscConfig+0x4b8>)
 8001d24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d28:	4a5e      	ldr	r2, [pc, #376]	@ (8001ea4 <HAL_RCC_OscConfig+0x4b8>)
 8001d2a:	f043 0304 	orr.w	r3, r3, #4
 8001d2e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001d32:	4b5c      	ldr	r3, [pc, #368]	@ (8001ea4 <HAL_RCC_OscConfig+0x4b8>)
 8001d34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d38:	4a5a      	ldr	r2, [pc, #360]	@ (8001ea4 <HAL_RCC_OscConfig+0x4b8>)
 8001d3a:	f043 0301 	orr.w	r3, r3, #1
 8001d3e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001d42:	e00f      	b.n	8001d64 <HAL_RCC_OscConfig+0x378>
 8001d44:	4b57      	ldr	r3, [pc, #348]	@ (8001ea4 <HAL_RCC_OscConfig+0x4b8>)
 8001d46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d4a:	4a56      	ldr	r2, [pc, #344]	@ (8001ea4 <HAL_RCC_OscConfig+0x4b8>)
 8001d4c:	f023 0301 	bic.w	r3, r3, #1
 8001d50:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001d54:	4b53      	ldr	r3, [pc, #332]	@ (8001ea4 <HAL_RCC_OscConfig+0x4b8>)
 8001d56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d5a:	4a52      	ldr	r2, [pc, #328]	@ (8001ea4 <HAL_RCC_OscConfig+0x4b8>)
 8001d5c:	f023 0304 	bic.w	r3, r3, #4
 8001d60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d016      	beq.n	8001d9a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d6c:	f7ff f81a 	bl	8000da4 <HAL_GetTick>
 8001d70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d72:	e00a      	b.n	8001d8a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d74:	f7ff f816 	bl	8000da4 <HAL_GetTick>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d901      	bls.n	8001d8a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001d86:	2303      	movs	r3, #3
 8001d88:	e138      	b.n	8001ffc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d8a:	4b46      	ldr	r3, [pc, #280]	@ (8001ea4 <HAL_RCC_OscConfig+0x4b8>)
 8001d8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d90:	f003 0302 	and.w	r3, r3, #2
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d0ed      	beq.n	8001d74 <HAL_RCC_OscConfig+0x388>
 8001d98:	e015      	b.n	8001dc6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d9a:	f7ff f803 	bl	8000da4 <HAL_GetTick>
 8001d9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001da0:	e00a      	b.n	8001db8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001da2:	f7fe ffff 	bl	8000da4 <HAL_GetTick>
 8001da6:	4602      	mov	r2, r0
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d901      	bls.n	8001db8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001db4:	2303      	movs	r3, #3
 8001db6:	e121      	b.n	8001ffc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001db8:	4b3a      	ldr	r3, [pc, #232]	@ (8001ea4 <HAL_RCC_OscConfig+0x4b8>)
 8001dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001dbe:	f003 0302 	and.w	r3, r3, #2
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d1ed      	bne.n	8001da2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001dc6:	7ffb      	ldrb	r3, [r7, #31]
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d105      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dcc:	4b35      	ldr	r3, [pc, #212]	@ (8001ea4 <HAL_RCC_OscConfig+0x4b8>)
 8001dce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dd0:	4a34      	ldr	r2, [pc, #208]	@ (8001ea4 <HAL_RCC_OscConfig+0x4b8>)
 8001dd2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001dd6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0320 	and.w	r3, r3, #32
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d03c      	beq.n	8001e5e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	699b      	ldr	r3, [r3, #24]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d01c      	beq.n	8001e26 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001dec:	4b2d      	ldr	r3, [pc, #180]	@ (8001ea4 <HAL_RCC_OscConfig+0x4b8>)
 8001dee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001df2:	4a2c      	ldr	r2, [pc, #176]	@ (8001ea4 <HAL_RCC_OscConfig+0x4b8>)
 8001df4:	f043 0301 	orr.w	r3, r3, #1
 8001df8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dfc:	f7fe ffd2 	bl	8000da4 <HAL_GetTick>
 8001e00:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001e02:	e008      	b.n	8001e16 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e04:	f7fe ffce 	bl	8000da4 <HAL_GetTick>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	d901      	bls.n	8001e16 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e0f2      	b.n	8001ffc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001e16:	4b23      	ldr	r3, [pc, #140]	@ (8001ea4 <HAL_RCC_OscConfig+0x4b8>)
 8001e18:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001e1c:	f003 0302 	and.w	r3, r3, #2
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d0ef      	beq.n	8001e04 <HAL_RCC_OscConfig+0x418>
 8001e24:	e01b      	b.n	8001e5e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001e26:	4b1f      	ldr	r3, [pc, #124]	@ (8001ea4 <HAL_RCC_OscConfig+0x4b8>)
 8001e28:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001e2c:	4a1d      	ldr	r2, [pc, #116]	@ (8001ea4 <HAL_RCC_OscConfig+0x4b8>)
 8001e2e:	f023 0301 	bic.w	r3, r3, #1
 8001e32:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e36:	f7fe ffb5 	bl	8000da4 <HAL_GetTick>
 8001e3a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001e3c:	e008      	b.n	8001e50 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e3e:	f7fe ffb1 	bl	8000da4 <HAL_GetTick>
 8001e42:	4602      	mov	r2, r0
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d901      	bls.n	8001e50 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	e0d5      	b.n	8001ffc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001e50:	4b14      	ldr	r3, [pc, #80]	@ (8001ea4 <HAL_RCC_OscConfig+0x4b8>)
 8001e52:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001e56:	f003 0302 	and.w	r3, r3, #2
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d1ef      	bne.n	8001e3e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	69db      	ldr	r3, [r3, #28]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	f000 80c9 	beq.w	8001ffa <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e68:	4b0e      	ldr	r3, [pc, #56]	@ (8001ea4 <HAL_RCC_OscConfig+0x4b8>)
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	f003 030c 	and.w	r3, r3, #12
 8001e70:	2b0c      	cmp	r3, #12
 8001e72:	f000 8083 	beq.w	8001f7c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	69db      	ldr	r3, [r3, #28]
 8001e7a:	2b02      	cmp	r3, #2
 8001e7c:	d15e      	bne.n	8001f3c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e7e:	4b09      	ldr	r3, [pc, #36]	@ (8001ea4 <HAL_RCC_OscConfig+0x4b8>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a08      	ldr	r2, [pc, #32]	@ (8001ea4 <HAL_RCC_OscConfig+0x4b8>)
 8001e84:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001e88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e8a:	f7fe ff8b 	bl	8000da4 <HAL_GetTick>
 8001e8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e90:	e00c      	b.n	8001eac <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e92:	f7fe ff87 	bl	8000da4 <HAL_GetTick>
 8001e96:	4602      	mov	r2, r0
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d905      	bls.n	8001eac <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	e0ab      	b.n	8001ffc <HAL_RCC_OscConfig+0x610>
 8001ea4:	40021000 	.word	0x40021000
 8001ea8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001eac:	4b55      	ldr	r3, [pc, #340]	@ (8002004 <HAL_RCC_OscConfig+0x618>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d1ec      	bne.n	8001e92 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001eb8:	4b52      	ldr	r3, [pc, #328]	@ (8002004 <HAL_RCC_OscConfig+0x618>)
 8001eba:	68da      	ldr	r2, [r3, #12]
 8001ebc:	4b52      	ldr	r3, [pc, #328]	@ (8002008 <HAL_RCC_OscConfig+0x61c>)
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	687a      	ldr	r2, [r7, #4]
 8001ec2:	6a11      	ldr	r1, [r2, #32]
 8001ec4:	687a      	ldr	r2, [r7, #4]
 8001ec6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001ec8:	3a01      	subs	r2, #1
 8001eca:	0112      	lsls	r2, r2, #4
 8001ecc:	4311      	orrs	r1, r2
 8001ece:	687a      	ldr	r2, [r7, #4]
 8001ed0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001ed2:	0212      	lsls	r2, r2, #8
 8001ed4:	4311      	orrs	r1, r2
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001eda:	0852      	lsrs	r2, r2, #1
 8001edc:	3a01      	subs	r2, #1
 8001ede:	0552      	lsls	r2, r2, #21
 8001ee0:	4311      	orrs	r1, r2
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001ee6:	0852      	lsrs	r2, r2, #1
 8001ee8:	3a01      	subs	r2, #1
 8001eea:	0652      	lsls	r2, r2, #25
 8001eec:	4311      	orrs	r1, r2
 8001eee:	687a      	ldr	r2, [r7, #4]
 8001ef0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001ef2:	06d2      	lsls	r2, r2, #27
 8001ef4:	430a      	orrs	r2, r1
 8001ef6:	4943      	ldr	r1, [pc, #268]	@ (8002004 <HAL_RCC_OscConfig+0x618>)
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001efc:	4b41      	ldr	r3, [pc, #260]	@ (8002004 <HAL_RCC_OscConfig+0x618>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a40      	ldr	r2, [pc, #256]	@ (8002004 <HAL_RCC_OscConfig+0x618>)
 8001f02:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f06:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f08:	4b3e      	ldr	r3, [pc, #248]	@ (8002004 <HAL_RCC_OscConfig+0x618>)
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	4a3d      	ldr	r2, [pc, #244]	@ (8002004 <HAL_RCC_OscConfig+0x618>)
 8001f0e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f12:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f14:	f7fe ff46 	bl	8000da4 <HAL_GetTick>
 8001f18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f1a:	e008      	b.n	8001f2e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f1c:	f7fe ff42 	bl	8000da4 <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d901      	bls.n	8001f2e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e066      	b.n	8001ffc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f2e:	4b35      	ldr	r3, [pc, #212]	@ (8002004 <HAL_RCC_OscConfig+0x618>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d0f0      	beq.n	8001f1c <HAL_RCC_OscConfig+0x530>
 8001f3a:	e05e      	b.n	8001ffa <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f3c:	4b31      	ldr	r3, [pc, #196]	@ (8002004 <HAL_RCC_OscConfig+0x618>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a30      	ldr	r2, [pc, #192]	@ (8002004 <HAL_RCC_OscConfig+0x618>)
 8001f42:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001f46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f48:	f7fe ff2c 	bl	8000da4 <HAL_GetTick>
 8001f4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f4e:	e008      	b.n	8001f62 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f50:	f7fe ff28 	bl	8000da4 <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d901      	bls.n	8001f62 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e04c      	b.n	8001ffc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f62:	4b28      	ldr	r3, [pc, #160]	@ (8002004 <HAL_RCC_OscConfig+0x618>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d1f0      	bne.n	8001f50 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001f6e:	4b25      	ldr	r3, [pc, #148]	@ (8002004 <HAL_RCC_OscConfig+0x618>)
 8001f70:	68da      	ldr	r2, [r3, #12]
 8001f72:	4924      	ldr	r1, [pc, #144]	@ (8002004 <HAL_RCC_OscConfig+0x618>)
 8001f74:	4b25      	ldr	r3, [pc, #148]	@ (800200c <HAL_RCC_OscConfig+0x620>)
 8001f76:	4013      	ands	r3, r2
 8001f78:	60cb      	str	r3, [r1, #12]
 8001f7a:	e03e      	b.n	8001ffa <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	69db      	ldr	r3, [r3, #28]
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d101      	bne.n	8001f88 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e039      	b.n	8001ffc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001f88:	4b1e      	ldr	r3, [pc, #120]	@ (8002004 <HAL_RCC_OscConfig+0x618>)
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	f003 0203 	and.w	r2, r3, #3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6a1b      	ldr	r3, [r3, #32]
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d12c      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fa6:	3b01      	subs	r3, #1
 8001fa8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d123      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fb8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	d11b      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fc8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	d113      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fd8:	085b      	lsrs	r3, r3, #1
 8001fda:	3b01      	subs	r3, #1
 8001fdc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d109      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fec:	085b      	lsrs	r3, r3, #1
 8001fee:	3b01      	subs	r3, #1
 8001ff0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	d001      	beq.n	8001ffa <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e000      	b.n	8001ffc <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001ffa:	2300      	movs	r3, #0
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3720      	adds	r7, #32
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	40021000 	.word	0x40021000
 8002008:	019f800c 	.word	0x019f800c
 800200c:	feeefffc 	.word	0xfeeefffc

08002010 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b086      	sub	sp, #24
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800201a:	2300      	movs	r3, #0
 800201c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d101      	bne.n	8002028 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e11e      	b.n	8002266 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002028:	4b91      	ldr	r3, [pc, #580]	@ (8002270 <HAL_RCC_ClockConfig+0x260>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 030f 	and.w	r3, r3, #15
 8002030:	683a      	ldr	r2, [r7, #0]
 8002032:	429a      	cmp	r2, r3
 8002034:	d910      	bls.n	8002058 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002036:	4b8e      	ldr	r3, [pc, #568]	@ (8002270 <HAL_RCC_ClockConfig+0x260>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f023 020f 	bic.w	r2, r3, #15
 800203e:	498c      	ldr	r1, [pc, #560]	@ (8002270 <HAL_RCC_ClockConfig+0x260>)
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	4313      	orrs	r3, r2
 8002044:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002046:	4b8a      	ldr	r3, [pc, #552]	@ (8002270 <HAL_RCC_ClockConfig+0x260>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 030f 	and.w	r3, r3, #15
 800204e:	683a      	ldr	r2, [r7, #0]
 8002050:	429a      	cmp	r2, r3
 8002052:	d001      	beq.n	8002058 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e106      	b.n	8002266 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 0301 	and.w	r3, r3, #1
 8002060:	2b00      	cmp	r3, #0
 8002062:	d073      	beq.n	800214c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	2b03      	cmp	r3, #3
 800206a:	d129      	bne.n	80020c0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800206c:	4b81      	ldr	r3, [pc, #516]	@ (8002274 <HAL_RCC_ClockConfig+0x264>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002074:	2b00      	cmp	r3, #0
 8002076:	d101      	bne.n	800207c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e0f4      	b.n	8002266 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800207c:	f000 f99e 	bl	80023bc <RCC_GetSysClockFreqFromPLLSource>
 8002080:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	4a7c      	ldr	r2, [pc, #496]	@ (8002278 <HAL_RCC_ClockConfig+0x268>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d93f      	bls.n	800210a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800208a:	4b7a      	ldr	r3, [pc, #488]	@ (8002274 <HAL_RCC_ClockConfig+0x264>)
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d009      	beq.n	80020aa <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d033      	beq.n	800210a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d12f      	bne.n	800210a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80020aa:	4b72      	ldr	r3, [pc, #456]	@ (8002274 <HAL_RCC_ClockConfig+0x264>)
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80020b2:	4a70      	ldr	r2, [pc, #448]	@ (8002274 <HAL_RCC_ClockConfig+0x264>)
 80020b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80020b8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80020ba:	2380      	movs	r3, #128	@ 0x80
 80020bc:	617b      	str	r3, [r7, #20]
 80020be:	e024      	b.n	800210a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	2b02      	cmp	r3, #2
 80020c6:	d107      	bne.n	80020d8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020c8:	4b6a      	ldr	r3, [pc, #424]	@ (8002274 <HAL_RCC_ClockConfig+0x264>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d109      	bne.n	80020e8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e0c6      	b.n	8002266 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020d8:	4b66      	ldr	r3, [pc, #408]	@ (8002274 <HAL_RCC_ClockConfig+0x264>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d101      	bne.n	80020e8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	e0be      	b.n	8002266 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80020e8:	f000 f8ce 	bl	8002288 <HAL_RCC_GetSysClockFreq>
 80020ec:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	4a61      	ldr	r2, [pc, #388]	@ (8002278 <HAL_RCC_ClockConfig+0x268>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d909      	bls.n	800210a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80020f6:	4b5f      	ldr	r3, [pc, #380]	@ (8002274 <HAL_RCC_ClockConfig+0x264>)
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80020fe:	4a5d      	ldr	r2, [pc, #372]	@ (8002274 <HAL_RCC_ClockConfig+0x264>)
 8002100:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002104:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002106:	2380      	movs	r3, #128	@ 0x80
 8002108:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800210a:	4b5a      	ldr	r3, [pc, #360]	@ (8002274 <HAL_RCC_ClockConfig+0x264>)
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	f023 0203 	bic.w	r2, r3, #3
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	4957      	ldr	r1, [pc, #348]	@ (8002274 <HAL_RCC_ClockConfig+0x264>)
 8002118:	4313      	orrs	r3, r2
 800211a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800211c:	f7fe fe42 	bl	8000da4 <HAL_GetTick>
 8002120:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002122:	e00a      	b.n	800213a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002124:	f7fe fe3e 	bl	8000da4 <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002132:	4293      	cmp	r3, r2
 8002134:	d901      	bls.n	800213a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002136:	2303      	movs	r3, #3
 8002138:	e095      	b.n	8002266 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800213a:	4b4e      	ldr	r3, [pc, #312]	@ (8002274 <HAL_RCC_ClockConfig+0x264>)
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	f003 020c 	and.w	r2, r3, #12
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	429a      	cmp	r2, r3
 800214a:	d1eb      	bne.n	8002124 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0302 	and.w	r3, r3, #2
 8002154:	2b00      	cmp	r3, #0
 8002156:	d023      	beq.n	80021a0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0304 	and.w	r3, r3, #4
 8002160:	2b00      	cmp	r3, #0
 8002162:	d005      	beq.n	8002170 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002164:	4b43      	ldr	r3, [pc, #268]	@ (8002274 <HAL_RCC_ClockConfig+0x264>)
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	4a42      	ldr	r2, [pc, #264]	@ (8002274 <HAL_RCC_ClockConfig+0x264>)
 800216a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800216e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0308 	and.w	r3, r3, #8
 8002178:	2b00      	cmp	r3, #0
 800217a:	d007      	beq.n	800218c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800217c:	4b3d      	ldr	r3, [pc, #244]	@ (8002274 <HAL_RCC_ClockConfig+0x264>)
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002184:	4a3b      	ldr	r2, [pc, #236]	@ (8002274 <HAL_RCC_ClockConfig+0x264>)
 8002186:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800218a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800218c:	4b39      	ldr	r3, [pc, #228]	@ (8002274 <HAL_RCC_ClockConfig+0x264>)
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	4936      	ldr	r1, [pc, #216]	@ (8002274 <HAL_RCC_ClockConfig+0x264>)
 800219a:	4313      	orrs	r3, r2
 800219c:	608b      	str	r3, [r1, #8]
 800219e:	e008      	b.n	80021b2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	2b80      	cmp	r3, #128	@ 0x80
 80021a4:	d105      	bne.n	80021b2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80021a6:	4b33      	ldr	r3, [pc, #204]	@ (8002274 <HAL_RCC_ClockConfig+0x264>)
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	4a32      	ldr	r2, [pc, #200]	@ (8002274 <HAL_RCC_ClockConfig+0x264>)
 80021ac:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80021b0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021b2:	4b2f      	ldr	r3, [pc, #188]	@ (8002270 <HAL_RCC_ClockConfig+0x260>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 030f 	and.w	r3, r3, #15
 80021ba:	683a      	ldr	r2, [r7, #0]
 80021bc:	429a      	cmp	r2, r3
 80021be:	d21d      	bcs.n	80021fc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021c0:	4b2b      	ldr	r3, [pc, #172]	@ (8002270 <HAL_RCC_ClockConfig+0x260>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f023 020f 	bic.w	r2, r3, #15
 80021c8:	4929      	ldr	r1, [pc, #164]	@ (8002270 <HAL_RCC_ClockConfig+0x260>)
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80021d0:	f7fe fde8 	bl	8000da4 <HAL_GetTick>
 80021d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021d6:	e00a      	b.n	80021ee <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021d8:	f7fe fde4 	bl	8000da4 <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d901      	bls.n	80021ee <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e03b      	b.n	8002266 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021ee:	4b20      	ldr	r3, [pc, #128]	@ (8002270 <HAL_RCC_ClockConfig+0x260>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 030f 	and.w	r3, r3, #15
 80021f6:	683a      	ldr	r2, [r7, #0]
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d1ed      	bne.n	80021d8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0304 	and.w	r3, r3, #4
 8002204:	2b00      	cmp	r3, #0
 8002206:	d008      	beq.n	800221a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002208:	4b1a      	ldr	r3, [pc, #104]	@ (8002274 <HAL_RCC_ClockConfig+0x264>)
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	4917      	ldr	r1, [pc, #92]	@ (8002274 <HAL_RCC_ClockConfig+0x264>)
 8002216:	4313      	orrs	r3, r2
 8002218:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0308 	and.w	r3, r3, #8
 8002222:	2b00      	cmp	r3, #0
 8002224:	d009      	beq.n	800223a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002226:	4b13      	ldr	r3, [pc, #76]	@ (8002274 <HAL_RCC_ClockConfig+0x264>)
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	691b      	ldr	r3, [r3, #16]
 8002232:	00db      	lsls	r3, r3, #3
 8002234:	490f      	ldr	r1, [pc, #60]	@ (8002274 <HAL_RCC_ClockConfig+0x264>)
 8002236:	4313      	orrs	r3, r2
 8002238:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800223a:	f000 f825 	bl	8002288 <HAL_RCC_GetSysClockFreq>
 800223e:	4602      	mov	r2, r0
 8002240:	4b0c      	ldr	r3, [pc, #48]	@ (8002274 <HAL_RCC_ClockConfig+0x264>)
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	091b      	lsrs	r3, r3, #4
 8002246:	f003 030f 	and.w	r3, r3, #15
 800224a:	490c      	ldr	r1, [pc, #48]	@ (800227c <HAL_RCC_ClockConfig+0x26c>)
 800224c:	5ccb      	ldrb	r3, [r1, r3]
 800224e:	f003 031f 	and.w	r3, r3, #31
 8002252:	fa22 f303 	lsr.w	r3, r2, r3
 8002256:	4a0a      	ldr	r2, [pc, #40]	@ (8002280 <HAL_RCC_ClockConfig+0x270>)
 8002258:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800225a:	4b0a      	ldr	r3, [pc, #40]	@ (8002284 <HAL_RCC_ClockConfig+0x274>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4618      	mov	r0, r3
 8002260:	f7fe fd54 	bl	8000d0c <HAL_InitTick>
 8002264:	4603      	mov	r3, r0
}
 8002266:	4618      	mov	r0, r3
 8002268:	3718      	adds	r7, #24
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	40022000 	.word	0x40022000
 8002274:	40021000 	.word	0x40021000
 8002278:	04c4b400 	.word	0x04c4b400
 800227c:	08003cdc 	.word	0x08003cdc
 8002280:	20000018 	.word	0x20000018
 8002284:	2000001c 	.word	0x2000001c

08002288 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002288:	b480      	push	{r7}
 800228a:	b087      	sub	sp, #28
 800228c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800228e:	4b2c      	ldr	r3, [pc, #176]	@ (8002340 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	f003 030c 	and.w	r3, r3, #12
 8002296:	2b04      	cmp	r3, #4
 8002298:	d102      	bne.n	80022a0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800229a:	4b2a      	ldr	r3, [pc, #168]	@ (8002344 <HAL_RCC_GetSysClockFreq+0xbc>)
 800229c:	613b      	str	r3, [r7, #16]
 800229e:	e047      	b.n	8002330 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80022a0:	4b27      	ldr	r3, [pc, #156]	@ (8002340 <HAL_RCC_GetSysClockFreq+0xb8>)
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	f003 030c 	and.w	r3, r3, #12
 80022a8:	2b08      	cmp	r3, #8
 80022aa:	d102      	bne.n	80022b2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80022ac:	4b26      	ldr	r3, [pc, #152]	@ (8002348 <HAL_RCC_GetSysClockFreq+0xc0>)
 80022ae:	613b      	str	r3, [r7, #16]
 80022b0:	e03e      	b.n	8002330 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80022b2:	4b23      	ldr	r3, [pc, #140]	@ (8002340 <HAL_RCC_GetSysClockFreq+0xb8>)
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	f003 030c 	and.w	r3, r3, #12
 80022ba:	2b0c      	cmp	r3, #12
 80022bc:	d136      	bne.n	800232c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80022be:	4b20      	ldr	r3, [pc, #128]	@ (8002340 <HAL_RCC_GetSysClockFreq+0xb8>)
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	f003 0303 	and.w	r3, r3, #3
 80022c6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80022c8:	4b1d      	ldr	r3, [pc, #116]	@ (8002340 <HAL_RCC_GetSysClockFreq+0xb8>)
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	091b      	lsrs	r3, r3, #4
 80022ce:	f003 030f 	and.w	r3, r3, #15
 80022d2:	3301      	adds	r3, #1
 80022d4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2b03      	cmp	r3, #3
 80022da:	d10c      	bne.n	80022f6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80022dc:	4a1a      	ldr	r2, [pc, #104]	@ (8002348 <HAL_RCC_GetSysClockFreq+0xc0>)
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80022e4:	4a16      	ldr	r2, [pc, #88]	@ (8002340 <HAL_RCC_GetSysClockFreq+0xb8>)
 80022e6:	68d2      	ldr	r2, [r2, #12]
 80022e8:	0a12      	lsrs	r2, r2, #8
 80022ea:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80022ee:	fb02 f303 	mul.w	r3, r2, r3
 80022f2:	617b      	str	r3, [r7, #20]
      break;
 80022f4:	e00c      	b.n	8002310 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80022f6:	4a13      	ldr	r2, [pc, #76]	@ (8002344 <HAL_RCC_GetSysClockFreq+0xbc>)
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80022fe:	4a10      	ldr	r2, [pc, #64]	@ (8002340 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002300:	68d2      	ldr	r2, [r2, #12]
 8002302:	0a12      	lsrs	r2, r2, #8
 8002304:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002308:	fb02 f303 	mul.w	r3, r2, r3
 800230c:	617b      	str	r3, [r7, #20]
      break;
 800230e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002310:	4b0b      	ldr	r3, [pc, #44]	@ (8002340 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	0e5b      	lsrs	r3, r3, #25
 8002316:	f003 0303 	and.w	r3, r3, #3
 800231a:	3301      	adds	r3, #1
 800231c:	005b      	lsls	r3, r3, #1
 800231e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002320:	697a      	ldr	r2, [r7, #20]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	fbb2 f3f3 	udiv	r3, r2, r3
 8002328:	613b      	str	r3, [r7, #16]
 800232a:	e001      	b.n	8002330 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800232c:	2300      	movs	r3, #0
 800232e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002330:	693b      	ldr	r3, [r7, #16]
}
 8002332:	4618      	mov	r0, r3
 8002334:	371c      	adds	r7, #28
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop
 8002340:	40021000 	.word	0x40021000
 8002344:	00f42400 	.word	0x00f42400
 8002348:	016e3600 	.word	0x016e3600

0800234c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002350:	4b03      	ldr	r3, [pc, #12]	@ (8002360 <HAL_RCC_GetHCLKFreq+0x14>)
 8002352:	681b      	ldr	r3, [r3, #0]
}
 8002354:	4618      	mov	r0, r3
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	20000018 	.word	0x20000018

08002364 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002368:	f7ff fff0 	bl	800234c <HAL_RCC_GetHCLKFreq>
 800236c:	4602      	mov	r2, r0
 800236e:	4b06      	ldr	r3, [pc, #24]	@ (8002388 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	0a1b      	lsrs	r3, r3, #8
 8002374:	f003 0307 	and.w	r3, r3, #7
 8002378:	4904      	ldr	r1, [pc, #16]	@ (800238c <HAL_RCC_GetPCLK1Freq+0x28>)
 800237a:	5ccb      	ldrb	r3, [r1, r3]
 800237c:	f003 031f 	and.w	r3, r3, #31
 8002380:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002384:	4618      	mov	r0, r3
 8002386:	bd80      	pop	{r7, pc}
 8002388:	40021000 	.word	0x40021000
 800238c:	08003cec 	.word	0x08003cec

08002390 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002394:	f7ff ffda 	bl	800234c <HAL_RCC_GetHCLKFreq>
 8002398:	4602      	mov	r2, r0
 800239a:	4b06      	ldr	r3, [pc, #24]	@ (80023b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	0adb      	lsrs	r3, r3, #11
 80023a0:	f003 0307 	and.w	r3, r3, #7
 80023a4:	4904      	ldr	r1, [pc, #16]	@ (80023b8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80023a6:	5ccb      	ldrb	r3, [r1, r3]
 80023a8:	f003 031f 	and.w	r3, r3, #31
 80023ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	40021000 	.word	0x40021000
 80023b8:	08003cec 	.word	0x08003cec

080023bc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	b087      	sub	sp, #28
 80023c0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80023c2:	4b1e      	ldr	r3, [pc, #120]	@ (800243c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	f003 0303 	and.w	r3, r3, #3
 80023ca:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80023cc:	4b1b      	ldr	r3, [pc, #108]	@ (800243c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	091b      	lsrs	r3, r3, #4
 80023d2:	f003 030f 	and.w	r3, r3, #15
 80023d6:	3301      	adds	r3, #1
 80023d8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	2b03      	cmp	r3, #3
 80023de:	d10c      	bne.n	80023fa <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80023e0:	4a17      	ldr	r2, [pc, #92]	@ (8002440 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80023e8:	4a14      	ldr	r2, [pc, #80]	@ (800243c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80023ea:	68d2      	ldr	r2, [r2, #12]
 80023ec:	0a12      	lsrs	r2, r2, #8
 80023ee:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80023f2:	fb02 f303 	mul.w	r3, r2, r3
 80023f6:	617b      	str	r3, [r7, #20]
    break;
 80023f8:	e00c      	b.n	8002414 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80023fa:	4a12      	ldr	r2, [pc, #72]	@ (8002444 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002402:	4a0e      	ldr	r2, [pc, #56]	@ (800243c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002404:	68d2      	ldr	r2, [r2, #12]
 8002406:	0a12      	lsrs	r2, r2, #8
 8002408:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800240c:	fb02 f303 	mul.w	r3, r2, r3
 8002410:	617b      	str	r3, [r7, #20]
    break;
 8002412:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002414:	4b09      	ldr	r3, [pc, #36]	@ (800243c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	0e5b      	lsrs	r3, r3, #25
 800241a:	f003 0303 	and.w	r3, r3, #3
 800241e:	3301      	adds	r3, #1
 8002420:	005b      	lsls	r3, r3, #1
 8002422:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002424:	697a      	ldr	r2, [r7, #20]
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	fbb2 f3f3 	udiv	r3, r2, r3
 800242c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800242e:	687b      	ldr	r3, [r7, #4]
}
 8002430:	4618      	mov	r0, r3
 8002432:	371c      	adds	r7, #28
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr
 800243c:	40021000 	.word	0x40021000
 8002440:	016e3600 	.word	0x016e3600
 8002444:	00f42400 	.word	0x00f42400

08002448 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b086      	sub	sp, #24
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002450:	2300      	movs	r3, #0
 8002452:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002454:	2300      	movs	r3, #0
 8002456:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002460:	2b00      	cmp	r3, #0
 8002462:	f000 8098 	beq.w	8002596 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002466:	2300      	movs	r3, #0
 8002468:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800246a:	4b43      	ldr	r3, [pc, #268]	@ (8002578 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800246c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800246e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d10d      	bne.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002476:	4b40      	ldr	r3, [pc, #256]	@ (8002578 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002478:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800247a:	4a3f      	ldr	r2, [pc, #252]	@ (8002578 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800247c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002480:	6593      	str	r3, [r2, #88]	@ 0x58
 8002482:	4b3d      	ldr	r3, [pc, #244]	@ (8002578 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002484:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002486:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800248a:	60bb      	str	r3, [r7, #8]
 800248c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800248e:	2301      	movs	r3, #1
 8002490:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002492:	4b3a      	ldr	r3, [pc, #232]	@ (800257c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a39      	ldr	r2, [pc, #228]	@ (800257c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002498:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800249c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800249e:	f7fe fc81 	bl	8000da4 <HAL_GetTick>
 80024a2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80024a4:	e009      	b.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024a6:	f7fe fc7d 	bl	8000da4 <HAL_GetTick>
 80024aa:	4602      	mov	r2, r0
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d902      	bls.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80024b4:	2303      	movs	r3, #3
 80024b6:	74fb      	strb	r3, [r7, #19]
        break;
 80024b8:	e005      	b.n	80024c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80024ba:	4b30      	ldr	r3, [pc, #192]	@ (800257c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d0ef      	beq.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80024c6:	7cfb      	ldrb	r3, [r7, #19]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d159      	bne.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80024cc:	4b2a      	ldr	r3, [pc, #168]	@ (8002578 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80024d6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d01e      	beq.n	800251c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024e2:	697a      	ldr	r2, [r7, #20]
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d019      	beq.n	800251c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80024e8:	4b23      	ldr	r3, [pc, #140]	@ (8002578 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80024f2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80024f4:	4b20      	ldr	r3, [pc, #128]	@ (8002578 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024fa:	4a1f      	ldr	r2, [pc, #124]	@ (8002578 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002500:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002504:	4b1c      	ldr	r3, [pc, #112]	@ (8002578 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002506:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800250a:	4a1b      	ldr	r2, [pc, #108]	@ (8002578 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800250c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002510:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002514:	4a18      	ldr	r2, [pc, #96]	@ (8002578 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	f003 0301 	and.w	r3, r3, #1
 8002522:	2b00      	cmp	r3, #0
 8002524:	d016      	beq.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002526:	f7fe fc3d 	bl	8000da4 <HAL_GetTick>
 800252a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800252c:	e00b      	b.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800252e:	f7fe fc39 	bl	8000da4 <HAL_GetTick>
 8002532:	4602      	mov	r2, r0
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	f241 3288 	movw	r2, #5000	@ 0x1388
 800253c:	4293      	cmp	r3, r2
 800253e:	d902      	bls.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002540:	2303      	movs	r3, #3
 8002542:	74fb      	strb	r3, [r7, #19]
            break;
 8002544:	e006      	b.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002546:	4b0c      	ldr	r3, [pc, #48]	@ (8002578 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002548:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800254c:	f003 0302 	and.w	r3, r3, #2
 8002550:	2b00      	cmp	r3, #0
 8002552:	d0ec      	beq.n	800252e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002554:	7cfb      	ldrb	r3, [r7, #19]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d10b      	bne.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800255a:	4b07      	ldr	r3, [pc, #28]	@ (8002578 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800255c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002560:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002568:	4903      	ldr	r1, [pc, #12]	@ (8002578 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800256a:	4313      	orrs	r3, r2
 800256c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002570:	e008      	b.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002572:	7cfb      	ldrb	r3, [r7, #19]
 8002574:	74bb      	strb	r3, [r7, #18]
 8002576:	e005      	b.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002578:	40021000 	.word	0x40021000
 800257c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002580:	7cfb      	ldrb	r3, [r7, #19]
 8002582:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002584:	7c7b      	ldrb	r3, [r7, #17]
 8002586:	2b01      	cmp	r3, #1
 8002588:	d105      	bne.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800258a:	4ba7      	ldr	r3, [pc, #668]	@ (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800258c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800258e:	4aa6      	ldr	r2, [pc, #664]	@ (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002590:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002594:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0301 	and.w	r3, r3, #1
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d00a      	beq.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80025a2:	4ba1      	ldr	r3, [pc, #644]	@ (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025a8:	f023 0203 	bic.w	r2, r3, #3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	499d      	ldr	r1, [pc, #628]	@ (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025b2:	4313      	orrs	r3, r2
 80025b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0302 	and.w	r3, r3, #2
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d00a      	beq.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80025c4:	4b98      	ldr	r3, [pc, #608]	@ (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025ca:	f023 020c 	bic.w	r2, r3, #12
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	4995      	ldr	r1, [pc, #596]	@ (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025d4:	4313      	orrs	r3, r2
 80025d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0304 	and.w	r3, r3, #4
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d00a      	beq.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80025e6:	4b90      	ldr	r3, [pc, #576]	@ (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025ec:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	498c      	ldr	r1, [pc, #560]	@ (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025f6:	4313      	orrs	r3, r2
 80025f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0308 	and.w	r3, r3, #8
 8002604:	2b00      	cmp	r3, #0
 8002606:	d00a      	beq.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002608:	4b87      	ldr	r3, [pc, #540]	@ (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800260a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800260e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	691b      	ldr	r3, [r3, #16]
 8002616:	4984      	ldr	r1, [pc, #528]	@ (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002618:	4313      	orrs	r3, r2
 800261a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0310 	and.w	r3, r3, #16
 8002626:	2b00      	cmp	r3, #0
 8002628:	d00a      	beq.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800262a:	4b7f      	ldr	r3, [pc, #508]	@ (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800262c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002630:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	695b      	ldr	r3, [r3, #20]
 8002638:	497b      	ldr	r1, [pc, #492]	@ (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800263a:	4313      	orrs	r3, r2
 800263c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0320 	and.w	r3, r3, #32
 8002648:	2b00      	cmp	r3, #0
 800264a:	d00a      	beq.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800264c:	4b76      	ldr	r3, [pc, #472]	@ (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800264e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002652:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	699b      	ldr	r3, [r3, #24]
 800265a:	4973      	ldr	r1, [pc, #460]	@ (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800265c:	4313      	orrs	r3, r2
 800265e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800266a:	2b00      	cmp	r3, #0
 800266c:	d00a      	beq.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800266e:	4b6e      	ldr	r3, [pc, #440]	@ (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002670:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002674:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	69db      	ldr	r3, [r3, #28]
 800267c:	496a      	ldr	r1, [pc, #424]	@ (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800267e:	4313      	orrs	r3, r2
 8002680:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800268c:	2b00      	cmp	r3, #0
 800268e:	d00a      	beq.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002690:	4b65      	ldr	r3, [pc, #404]	@ (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002692:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002696:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6a1b      	ldr	r3, [r3, #32]
 800269e:	4962      	ldr	r1, [pc, #392]	@ (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026a0:	4313      	orrs	r3, r2
 80026a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d00a      	beq.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80026b2:	4b5d      	ldr	r3, [pc, #372]	@ (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026b8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026c0:	4959      	ldr	r1, [pc, #356]	@ (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026c2:	4313      	orrs	r3, r2
 80026c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d00a      	beq.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80026d4:	4b54      	ldr	r3, [pc, #336]	@ (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026da:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026e2:	4951      	ldr	r1, [pc, #324]	@ (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026e4:	4313      	orrs	r3, r2
 80026e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d015      	beq.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80026f6:	4b4c      	ldr	r3, [pc, #304]	@ (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026fc:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002704:	4948      	ldr	r1, [pc, #288]	@ (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002706:	4313      	orrs	r3, r2
 8002708:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002710:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002714:	d105      	bne.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002716:	4b44      	ldr	r3, [pc, #272]	@ (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002718:	68db      	ldr	r3, [r3, #12]
 800271a:	4a43      	ldr	r2, [pc, #268]	@ (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800271c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002720:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800272a:	2b00      	cmp	r3, #0
 800272c:	d015      	beq.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800272e:	4b3e      	ldr	r3, [pc, #248]	@ (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002730:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002734:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800273c:	493a      	ldr	r1, [pc, #232]	@ (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800273e:	4313      	orrs	r3, r2
 8002740:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002748:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800274c:	d105      	bne.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800274e:	4b36      	ldr	r3, [pc, #216]	@ (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	4a35      	ldr	r2, [pc, #212]	@ (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002754:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002758:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d015      	beq.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002766:	4b30      	ldr	r3, [pc, #192]	@ (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002768:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800276c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002774:	492c      	ldr	r1, [pc, #176]	@ (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002776:	4313      	orrs	r3, r2
 8002778:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002780:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002784:	d105      	bne.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002786:	4b28      	ldr	r3, [pc, #160]	@ (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002788:	68db      	ldr	r3, [r3, #12]
 800278a:	4a27      	ldr	r2, [pc, #156]	@ (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800278c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002790:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d015      	beq.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800279e:	4b22      	ldr	r3, [pc, #136]	@ (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027a4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027ac:	491e      	ldr	r1, [pc, #120]	@ (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027ae:	4313      	orrs	r3, r2
 80027b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027b8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80027bc:	d105      	bne.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027be:	4b1a      	ldr	r3, [pc, #104]	@ (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027c0:	68db      	ldr	r3, [r3, #12]
 80027c2:	4a19      	ldr	r2, [pc, #100]	@ (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027c4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80027c8:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d015      	beq.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80027d6:	4b14      	ldr	r3, [pc, #80]	@ (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027dc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027e4:	4910      	ldr	r1, [pc, #64]	@ (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027e6:	4313      	orrs	r3, r2
 80027e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027f0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80027f4:	d105      	bne.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027f6:	4b0c      	ldr	r3, [pc, #48]	@ (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	4a0b      	ldr	r2, [pc, #44]	@ (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027fc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002800:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d018      	beq.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800280e:	4b06      	ldr	r3, [pc, #24]	@ (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002810:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002814:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800281c:	4902      	ldr	r1, [pc, #8]	@ (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800281e:	4313      	orrs	r3, r2
 8002820:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	e001      	b.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002828:	40021000 	.word	0x40021000
 800282c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800282e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002832:	d105      	bne.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002834:	4b21      	ldr	r3, [pc, #132]	@ (80028bc <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	4a20      	ldr	r2, [pc, #128]	@ (80028bc <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800283a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800283e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d015      	beq.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800284c:	4b1b      	ldr	r3, [pc, #108]	@ (80028bc <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800284e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002852:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800285a:	4918      	ldr	r1, [pc, #96]	@ (80028bc <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800285c:	4313      	orrs	r3, r2
 800285e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002866:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800286a:	d105      	bne.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800286c:	4b13      	ldr	r3, [pc, #76]	@ (80028bc <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	4a12      	ldr	r2, [pc, #72]	@ (80028bc <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002872:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002876:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d015      	beq.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002884:	4b0d      	ldr	r3, [pc, #52]	@ (80028bc <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002886:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800288a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002892:	490a      	ldr	r1, [pc, #40]	@ (80028bc <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002894:	4313      	orrs	r3, r2
 8002896:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800289e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80028a2:	d105      	bne.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028a4:	4b05      	ldr	r3, [pc, #20]	@ (80028bc <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	4a04      	ldr	r2, [pc, #16]	@ (80028bc <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80028aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80028ae:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80028b0:	7cbb      	ldrb	r3, [r7, #18]
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3718      	adds	r7, #24
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	40021000 	.word	0x40021000

080028c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d101      	bne.n	80028d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e049      	b.n	8002966 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d106      	bne.n	80028ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2200      	movs	r2, #0
 80028e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f7fe f954 	bl	8000b94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2202      	movs	r2, #2
 80028f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	3304      	adds	r3, #4
 80028fc:	4619      	mov	r1, r3
 80028fe:	4610      	mov	r0, r2
 8002900:	f000 fa4c 	bl	8002d9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2201      	movs	r2, #1
 8002908:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2201      	movs	r2, #1
 8002910:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2201      	movs	r2, #1
 8002920:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2201      	movs	r2, #1
 8002930:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2201      	movs	r2, #1
 8002938:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2201      	movs	r2, #1
 8002940:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2201      	movs	r2, #1
 8002948:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2201      	movs	r2, #1
 8002958:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2201      	movs	r2, #1
 8002960:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002964:	2300      	movs	r3, #0
}
 8002966:	4618      	mov	r0, r3
 8002968:	3708      	adds	r7, #8
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
	...

08002970 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002970:	b480      	push	{r7}
 8002972:	b085      	sub	sp, #20
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800297e:	b2db      	uxtb	r3, r3
 8002980:	2b01      	cmp	r3, #1
 8002982:	d001      	beq.n	8002988 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e04f      	b.n	8002a28 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2202      	movs	r2, #2
 800298c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	68da      	ldr	r2, [r3, #12]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f042 0201 	orr.w	r2, r2, #1
 800299e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a23      	ldr	r2, [pc, #140]	@ (8002a34 <HAL_TIM_Base_Start_IT+0xc4>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d01d      	beq.n	80029e6 <HAL_TIM_Base_Start_IT+0x76>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029b2:	d018      	beq.n	80029e6 <HAL_TIM_Base_Start_IT+0x76>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a1f      	ldr	r2, [pc, #124]	@ (8002a38 <HAL_TIM_Base_Start_IT+0xc8>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d013      	beq.n	80029e6 <HAL_TIM_Base_Start_IT+0x76>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a1e      	ldr	r2, [pc, #120]	@ (8002a3c <HAL_TIM_Base_Start_IT+0xcc>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d00e      	beq.n	80029e6 <HAL_TIM_Base_Start_IT+0x76>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a1c      	ldr	r2, [pc, #112]	@ (8002a40 <HAL_TIM_Base_Start_IT+0xd0>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d009      	beq.n	80029e6 <HAL_TIM_Base_Start_IT+0x76>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a1b      	ldr	r2, [pc, #108]	@ (8002a44 <HAL_TIM_Base_Start_IT+0xd4>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d004      	beq.n	80029e6 <HAL_TIM_Base_Start_IT+0x76>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a19      	ldr	r2, [pc, #100]	@ (8002a48 <HAL_TIM_Base_Start_IT+0xd8>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d115      	bne.n	8002a12 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	689a      	ldr	r2, [r3, #8]
 80029ec:	4b17      	ldr	r3, [pc, #92]	@ (8002a4c <HAL_TIM_Base_Start_IT+0xdc>)
 80029ee:	4013      	ands	r3, r2
 80029f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2b06      	cmp	r3, #6
 80029f6:	d015      	beq.n	8002a24 <HAL_TIM_Base_Start_IT+0xb4>
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029fe:	d011      	beq.n	8002a24 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f042 0201 	orr.w	r2, r2, #1
 8002a0e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a10:	e008      	b.n	8002a24 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f042 0201 	orr.w	r2, r2, #1
 8002a20:	601a      	str	r2, [r3, #0]
 8002a22:	e000      	b.n	8002a26 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a24:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002a26:	2300      	movs	r3, #0
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3714      	adds	r7, #20
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr
 8002a34:	40012c00 	.word	0x40012c00
 8002a38:	40000400 	.word	0x40000400
 8002a3c:	40000800 	.word	0x40000800
 8002a40:	40013400 	.word	0x40013400
 8002a44:	40014000 	.word	0x40014000
 8002a48:	40015000 	.word	0x40015000
 8002a4c:	00010007 	.word	0x00010007

08002a50 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	68da      	ldr	r2, [r3, #12]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f022 0201 	bic.w	r2, r2, #1
 8002a66:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	6a1a      	ldr	r2, [r3, #32]
 8002a6e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002a72:	4013      	ands	r3, r2
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d10f      	bne.n	8002a98 <HAL_TIM_Base_Stop_IT+0x48>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	6a1a      	ldr	r2, [r3, #32]
 8002a7e:	f244 4344 	movw	r3, #17476	@ 0x4444
 8002a82:	4013      	ands	r3, r2
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d107      	bne.n	8002a98 <HAL_TIM_Base_Stop_IT+0x48>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f022 0201 	bic.w	r2, r2, #1
 8002a96:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8002aa0:	2300      	movs	r3, #0
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	370c      	adds	r7, #12
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr

08002aae <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002aae:	b580      	push	{r7, lr}
 8002ab0:	b084      	sub	sp, #16
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	691b      	ldr	r3, [r3, #16]
 8002ac4:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	f003 0302 	and.w	r3, r3, #2
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d020      	beq.n	8002b12 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	f003 0302 	and.w	r3, r3, #2
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d01b      	beq.n	8002b12 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f06f 0202 	mvn.w	r2, #2
 8002ae2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	699b      	ldr	r3, [r3, #24]
 8002af0:	f003 0303 	and.w	r3, r3, #3
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d003      	beq.n	8002b00 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f000 f931 	bl	8002d60 <HAL_TIM_IC_CaptureCallback>
 8002afe:	e005      	b.n	8002b0c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	f000 f923 	bl	8002d4c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f000 f934 	bl	8002d74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	f003 0304 	and.w	r3, r3, #4
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d020      	beq.n	8002b5e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	f003 0304 	and.w	r3, r3, #4
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d01b      	beq.n	8002b5e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f06f 0204 	mvn.w	r2, #4
 8002b2e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2202      	movs	r2, #2
 8002b34:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	699b      	ldr	r3, [r3, #24]
 8002b3c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d003      	beq.n	8002b4c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	f000 f90b 	bl	8002d60 <HAL_TIM_IC_CaptureCallback>
 8002b4a:	e005      	b.n	8002b58 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	f000 f8fd 	bl	8002d4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f000 f90e 	bl	8002d74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	f003 0308 	and.w	r3, r3, #8
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d020      	beq.n	8002baa <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	f003 0308 	and.w	r3, r3, #8
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d01b      	beq.n	8002baa <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f06f 0208 	mvn.w	r2, #8
 8002b7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2204      	movs	r2, #4
 8002b80:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	69db      	ldr	r3, [r3, #28]
 8002b88:	f003 0303 	and.w	r3, r3, #3
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d003      	beq.n	8002b98 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	f000 f8e5 	bl	8002d60 <HAL_TIM_IC_CaptureCallback>
 8002b96:	e005      	b.n	8002ba4 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	f000 f8d7 	bl	8002d4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f000 f8e8 	bl	8002d74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	f003 0310 	and.w	r3, r3, #16
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d020      	beq.n	8002bf6 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f003 0310 	and.w	r3, r3, #16
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d01b      	beq.n	8002bf6 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f06f 0210 	mvn.w	r2, #16
 8002bc6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2208      	movs	r2, #8
 8002bcc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	69db      	ldr	r3, [r3, #28]
 8002bd4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d003      	beq.n	8002be4 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f000 f8bf 	bl	8002d60 <HAL_TIM_IC_CaptureCallback>
 8002be2:	e005      	b.n	8002bf0 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f000 f8b1 	bl	8002d4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f000 f8c2 	bl	8002d74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	f003 0301 	and.w	r3, r3, #1
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d00c      	beq.n	8002c1a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f003 0301 	and.w	r3, r3, #1
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d007      	beq.n	8002c1a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f06f 0201 	mvn.w	r2, #1
 8002c12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	f7fd fe87 	bl	8000928 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d104      	bne.n	8002c2e <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d00c      	beq.n	8002c48 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d007      	beq.n	8002c48 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8002c40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f000 f95e 	bl	8002f04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d00c      	beq.n	8002c6c <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d007      	beq.n	8002c6c <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002c64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f000 f956 	bl	8002f18 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d00c      	beq.n	8002c90 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d007      	beq.n	8002c90 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002c88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f000 f87c 	bl	8002d88 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	f003 0320 	and.w	r3, r3, #32
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d00c      	beq.n	8002cb4 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	f003 0320 	and.w	r3, r3, #32
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d007      	beq.n	8002cb4 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f06f 0220 	mvn.w	r2, #32
 8002cac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f000 f91e 	bl	8002ef0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d00c      	beq.n	8002cd8 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d007      	beq.n	8002cd8 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8002cd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f000 f92a 	bl	8002f2c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d00c      	beq.n	8002cfc <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d007      	beq.n	8002cfc <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8002cf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f000 f922 	bl	8002f40 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d00c      	beq.n	8002d20 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d007      	beq.n	8002d20 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8002d18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f000 f91a 	bl	8002f54 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d00c      	beq.n	8002d44 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d007      	beq.n	8002d44 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8002d3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f000 f912 	bl	8002f68 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d44:	bf00      	nop
 8002d46:	3710      	adds	r7, #16
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}

08002d4c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b083      	sub	sp, #12
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d54:	bf00      	nop
 8002d56:	370c      	adds	r7, #12
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr

08002d60 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b083      	sub	sp, #12
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d68:	bf00      	nop
 8002d6a:	370c      	adds	r7, #12
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr

08002d74 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b083      	sub	sp, #12
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d7c:	bf00      	nop
 8002d7e:	370c      	adds	r7, #12
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr

08002d88 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d90:	bf00      	nop
 8002d92:	370c      	adds	r7, #12
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr

08002d9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b085      	sub	sp, #20
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	4a48      	ldr	r2, [pc, #288]	@ (8002ed0 <TIM_Base_SetConfig+0x134>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d013      	beq.n	8002ddc <TIM_Base_SetConfig+0x40>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002dba:	d00f      	beq.n	8002ddc <TIM_Base_SetConfig+0x40>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	4a45      	ldr	r2, [pc, #276]	@ (8002ed4 <TIM_Base_SetConfig+0x138>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d00b      	beq.n	8002ddc <TIM_Base_SetConfig+0x40>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	4a44      	ldr	r2, [pc, #272]	@ (8002ed8 <TIM_Base_SetConfig+0x13c>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d007      	beq.n	8002ddc <TIM_Base_SetConfig+0x40>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	4a43      	ldr	r2, [pc, #268]	@ (8002edc <TIM_Base_SetConfig+0x140>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d003      	beq.n	8002ddc <TIM_Base_SetConfig+0x40>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	4a42      	ldr	r2, [pc, #264]	@ (8002ee0 <TIM_Base_SetConfig+0x144>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d108      	bne.n	8002dee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002de2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	68fa      	ldr	r2, [r7, #12]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4a37      	ldr	r2, [pc, #220]	@ (8002ed0 <TIM_Base_SetConfig+0x134>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d01f      	beq.n	8002e36 <TIM_Base_SetConfig+0x9a>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002dfc:	d01b      	beq.n	8002e36 <TIM_Base_SetConfig+0x9a>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4a34      	ldr	r2, [pc, #208]	@ (8002ed4 <TIM_Base_SetConfig+0x138>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d017      	beq.n	8002e36 <TIM_Base_SetConfig+0x9a>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	4a33      	ldr	r2, [pc, #204]	@ (8002ed8 <TIM_Base_SetConfig+0x13c>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d013      	beq.n	8002e36 <TIM_Base_SetConfig+0x9a>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4a32      	ldr	r2, [pc, #200]	@ (8002edc <TIM_Base_SetConfig+0x140>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d00f      	beq.n	8002e36 <TIM_Base_SetConfig+0x9a>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4a32      	ldr	r2, [pc, #200]	@ (8002ee4 <TIM_Base_SetConfig+0x148>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d00b      	beq.n	8002e36 <TIM_Base_SetConfig+0x9a>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	4a31      	ldr	r2, [pc, #196]	@ (8002ee8 <TIM_Base_SetConfig+0x14c>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d007      	beq.n	8002e36 <TIM_Base_SetConfig+0x9a>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4a30      	ldr	r2, [pc, #192]	@ (8002eec <TIM_Base_SetConfig+0x150>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d003      	beq.n	8002e36 <TIM_Base_SetConfig+0x9a>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4a2b      	ldr	r2, [pc, #172]	@ (8002ee0 <TIM_Base_SetConfig+0x144>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d108      	bne.n	8002e48 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	68db      	ldr	r3, [r3, #12]
 8002e42:	68fa      	ldr	r2, [r7, #12]
 8002e44:	4313      	orrs	r3, r2
 8002e46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	695b      	ldr	r3, [r3, #20]
 8002e52:	4313      	orrs	r3, r2
 8002e54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	68fa      	ldr	r2, [r7, #12]
 8002e5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	689a      	ldr	r2, [r3, #8]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	4a18      	ldr	r2, [pc, #96]	@ (8002ed0 <TIM_Base_SetConfig+0x134>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d013      	beq.n	8002e9c <TIM_Base_SetConfig+0x100>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	4a19      	ldr	r2, [pc, #100]	@ (8002edc <TIM_Base_SetConfig+0x140>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d00f      	beq.n	8002e9c <TIM_Base_SetConfig+0x100>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	4a19      	ldr	r2, [pc, #100]	@ (8002ee4 <TIM_Base_SetConfig+0x148>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d00b      	beq.n	8002e9c <TIM_Base_SetConfig+0x100>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	4a18      	ldr	r2, [pc, #96]	@ (8002ee8 <TIM_Base_SetConfig+0x14c>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d007      	beq.n	8002e9c <TIM_Base_SetConfig+0x100>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	4a17      	ldr	r2, [pc, #92]	@ (8002eec <TIM_Base_SetConfig+0x150>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d003      	beq.n	8002e9c <TIM_Base_SetConfig+0x100>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	4a12      	ldr	r2, [pc, #72]	@ (8002ee0 <TIM_Base_SetConfig+0x144>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d103      	bne.n	8002ea4 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	691a      	ldr	r2, [r3, #16]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	691b      	ldr	r3, [r3, #16]
 8002eae:	f003 0301 	and.w	r3, r3, #1
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d105      	bne.n	8002ec2 <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	691b      	ldr	r3, [r3, #16]
 8002eba:	f023 0201 	bic.w	r2, r3, #1
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	611a      	str	r2, [r3, #16]
  }
}
 8002ec2:	bf00      	nop
 8002ec4:	3714      	adds	r7, #20
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr
 8002ece:	bf00      	nop
 8002ed0:	40012c00 	.word	0x40012c00
 8002ed4:	40000400 	.word	0x40000400
 8002ed8:	40000800 	.word	0x40000800
 8002edc:	40013400 	.word	0x40013400
 8002ee0:	40015000 	.word	0x40015000
 8002ee4:	40014000 	.word	0x40014000
 8002ee8:	40014400 	.word	0x40014400
 8002eec:	40014800 	.word	0x40014800

08002ef0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ef8:	bf00      	nop
 8002efa:	370c      	adds	r7, #12
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr

08002f04 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f0c:	bf00      	nop
 8002f0e:	370c      	adds	r7, #12
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr

08002f18 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002f20:	bf00      	nop
 8002f22:	370c      	adds	r7, #12
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr

08002f2c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8002f34:	bf00      	nop
 8002f36:	370c      	adds	r7, #12
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr

08002f40 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8002f48:	bf00      	nop
 8002f4a:	370c      	adds	r7, #12
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr

08002f54 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8002f5c:	bf00      	nop
 8002f5e:	370c      	adds	r7, #12
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr

08002f68 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8002f70:	bf00      	nop
 8002f72:	370c      	adds	r7, #12
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr

08002f7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b082      	sub	sp, #8
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d101      	bne.n	8002f8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e042      	b.n	8003014 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d106      	bne.n	8002fa6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fa0:	6878      	ldr	r0, [r7, #4]
 8002fa2:	f7fd fd5f 	bl	8000a64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2224      	movs	r2, #36	@ 0x24
 8002faa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f022 0201 	bic.w	r2, r2, #1
 8002fbc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d002      	beq.n	8002fcc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f000 fb24 	bl	8003614 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002fcc:	6878      	ldr	r0, [r7, #4]
 8002fce:	f000 f825 	bl	800301c <UART_SetConfig>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d101      	bne.n	8002fdc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e01b      	b.n	8003014 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	685a      	ldr	r2, [r3, #4]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002fea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	689a      	ldr	r2, [r3, #8]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002ffa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f042 0201 	orr.w	r2, r2, #1
 800300a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f000 fba3 	bl	8003758 <UART_CheckIdleState>
 8003012:	4603      	mov	r3, r0
}
 8003014:	4618      	mov	r0, r3
 8003016:	3708      	adds	r7, #8
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}

0800301c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800301c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003020:	b08c      	sub	sp, #48	@ 0x30
 8003022:	af00      	add	r7, sp, #0
 8003024:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003026:	2300      	movs	r3, #0
 8003028:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	689a      	ldr	r2, [r3, #8]
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	691b      	ldr	r3, [r3, #16]
 8003034:	431a      	orrs	r2, r3
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	695b      	ldr	r3, [r3, #20]
 800303a:	431a      	orrs	r2, r3
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	69db      	ldr	r3, [r3, #28]
 8003040:	4313      	orrs	r3, r2
 8003042:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	4baa      	ldr	r3, [pc, #680]	@ (80032f4 <UART_SetConfig+0x2d8>)
 800304c:	4013      	ands	r3, r2
 800304e:	697a      	ldr	r2, [r7, #20]
 8003050:	6812      	ldr	r2, [r2, #0]
 8003052:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003054:	430b      	orrs	r3, r1
 8003056:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	68da      	ldr	r2, [r3, #12]
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	430a      	orrs	r2, r1
 800306c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	699b      	ldr	r3, [r3, #24]
 8003072:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a9f      	ldr	r2, [pc, #636]	@ (80032f8 <UART_SetConfig+0x2dc>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d004      	beq.n	8003088 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	6a1b      	ldr	r3, [r3, #32]
 8003082:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003084:	4313      	orrs	r3, r2
 8003086:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8003092:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8003096:	697a      	ldr	r2, [r7, #20]
 8003098:	6812      	ldr	r2, [r2, #0]
 800309a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800309c:	430b      	orrs	r3, r1
 800309e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030a6:	f023 010f 	bic.w	r1, r3, #15
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	430a      	orrs	r2, r1
 80030b4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a90      	ldr	r2, [pc, #576]	@ (80032fc <UART_SetConfig+0x2e0>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d125      	bne.n	800310c <UART_SetConfig+0xf0>
 80030c0:	4b8f      	ldr	r3, [pc, #572]	@ (8003300 <UART_SetConfig+0x2e4>)
 80030c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030c6:	f003 0303 	and.w	r3, r3, #3
 80030ca:	2b03      	cmp	r3, #3
 80030cc:	d81a      	bhi.n	8003104 <UART_SetConfig+0xe8>
 80030ce:	a201      	add	r2, pc, #4	@ (adr r2, 80030d4 <UART_SetConfig+0xb8>)
 80030d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030d4:	080030e5 	.word	0x080030e5
 80030d8:	080030f5 	.word	0x080030f5
 80030dc:	080030ed 	.word	0x080030ed
 80030e0:	080030fd 	.word	0x080030fd
 80030e4:	2301      	movs	r3, #1
 80030e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80030ea:	e116      	b.n	800331a <UART_SetConfig+0x2fe>
 80030ec:	2302      	movs	r3, #2
 80030ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80030f2:	e112      	b.n	800331a <UART_SetConfig+0x2fe>
 80030f4:	2304      	movs	r3, #4
 80030f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80030fa:	e10e      	b.n	800331a <UART_SetConfig+0x2fe>
 80030fc:	2308      	movs	r3, #8
 80030fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003102:	e10a      	b.n	800331a <UART_SetConfig+0x2fe>
 8003104:	2310      	movs	r3, #16
 8003106:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800310a:	e106      	b.n	800331a <UART_SetConfig+0x2fe>
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a7c      	ldr	r2, [pc, #496]	@ (8003304 <UART_SetConfig+0x2e8>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d138      	bne.n	8003188 <UART_SetConfig+0x16c>
 8003116:	4b7a      	ldr	r3, [pc, #488]	@ (8003300 <UART_SetConfig+0x2e4>)
 8003118:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800311c:	f003 030c 	and.w	r3, r3, #12
 8003120:	2b0c      	cmp	r3, #12
 8003122:	d82d      	bhi.n	8003180 <UART_SetConfig+0x164>
 8003124:	a201      	add	r2, pc, #4	@ (adr r2, 800312c <UART_SetConfig+0x110>)
 8003126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800312a:	bf00      	nop
 800312c:	08003161 	.word	0x08003161
 8003130:	08003181 	.word	0x08003181
 8003134:	08003181 	.word	0x08003181
 8003138:	08003181 	.word	0x08003181
 800313c:	08003171 	.word	0x08003171
 8003140:	08003181 	.word	0x08003181
 8003144:	08003181 	.word	0x08003181
 8003148:	08003181 	.word	0x08003181
 800314c:	08003169 	.word	0x08003169
 8003150:	08003181 	.word	0x08003181
 8003154:	08003181 	.word	0x08003181
 8003158:	08003181 	.word	0x08003181
 800315c:	08003179 	.word	0x08003179
 8003160:	2300      	movs	r3, #0
 8003162:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003166:	e0d8      	b.n	800331a <UART_SetConfig+0x2fe>
 8003168:	2302      	movs	r3, #2
 800316a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800316e:	e0d4      	b.n	800331a <UART_SetConfig+0x2fe>
 8003170:	2304      	movs	r3, #4
 8003172:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003176:	e0d0      	b.n	800331a <UART_SetConfig+0x2fe>
 8003178:	2308      	movs	r3, #8
 800317a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800317e:	e0cc      	b.n	800331a <UART_SetConfig+0x2fe>
 8003180:	2310      	movs	r3, #16
 8003182:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003186:	e0c8      	b.n	800331a <UART_SetConfig+0x2fe>
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a5e      	ldr	r2, [pc, #376]	@ (8003308 <UART_SetConfig+0x2ec>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d125      	bne.n	80031de <UART_SetConfig+0x1c2>
 8003192:	4b5b      	ldr	r3, [pc, #364]	@ (8003300 <UART_SetConfig+0x2e4>)
 8003194:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003198:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800319c:	2b30      	cmp	r3, #48	@ 0x30
 800319e:	d016      	beq.n	80031ce <UART_SetConfig+0x1b2>
 80031a0:	2b30      	cmp	r3, #48	@ 0x30
 80031a2:	d818      	bhi.n	80031d6 <UART_SetConfig+0x1ba>
 80031a4:	2b20      	cmp	r3, #32
 80031a6:	d00a      	beq.n	80031be <UART_SetConfig+0x1a2>
 80031a8:	2b20      	cmp	r3, #32
 80031aa:	d814      	bhi.n	80031d6 <UART_SetConfig+0x1ba>
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d002      	beq.n	80031b6 <UART_SetConfig+0x19a>
 80031b0:	2b10      	cmp	r3, #16
 80031b2:	d008      	beq.n	80031c6 <UART_SetConfig+0x1aa>
 80031b4:	e00f      	b.n	80031d6 <UART_SetConfig+0x1ba>
 80031b6:	2300      	movs	r3, #0
 80031b8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80031bc:	e0ad      	b.n	800331a <UART_SetConfig+0x2fe>
 80031be:	2302      	movs	r3, #2
 80031c0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80031c4:	e0a9      	b.n	800331a <UART_SetConfig+0x2fe>
 80031c6:	2304      	movs	r3, #4
 80031c8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80031cc:	e0a5      	b.n	800331a <UART_SetConfig+0x2fe>
 80031ce:	2308      	movs	r3, #8
 80031d0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80031d4:	e0a1      	b.n	800331a <UART_SetConfig+0x2fe>
 80031d6:	2310      	movs	r3, #16
 80031d8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80031dc:	e09d      	b.n	800331a <UART_SetConfig+0x2fe>
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a4a      	ldr	r2, [pc, #296]	@ (800330c <UART_SetConfig+0x2f0>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d125      	bne.n	8003234 <UART_SetConfig+0x218>
 80031e8:	4b45      	ldr	r3, [pc, #276]	@ (8003300 <UART_SetConfig+0x2e4>)
 80031ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031ee:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80031f2:	2bc0      	cmp	r3, #192	@ 0xc0
 80031f4:	d016      	beq.n	8003224 <UART_SetConfig+0x208>
 80031f6:	2bc0      	cmp	r3, #192	@ 0xc0
 80031f8:	d818      	bhi.n	800322c <UART_SetConfig+0x210>
 80031fa:	2b80      	cmp	r3, #128	@ 0x80
 80031fc:	d00a      	beq.n	8003214 <UART_SetConfig+0x1f8>
 80031fe:	2b80      	cmp	r3, #128	@ 0x80
 8003200:	d814      	bhi.n	800322c <UART_SetConfig+0x210>
 8003202:	2b00      	cmp	r3, #0
 8003204:	d002      	beq.n	800320c <UART_SetConfig+0x1f0>
 8003206:	2b40      	cmp	r3, #64	@ 0x40
 8003208:	d008      	beq.n	800321c <UART_SetConfig+0x200>
 800320a:	e00f      	b.n	800322c <UART_SetConfig+0x210>
 800320c:	2300      	movs	r3, #0
 800320e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003212:	e082      	b.n	800331a <UART_SetConfig+0x2fe>
 8003214:	2302      	movs	r3, #2
 8003216:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800321a:	e07e      	b.n	800331a <UART_SetConfig+0x2fe>
 800321c:	2304      	movs	r3, #4
 800321e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003222:	e07a      	b.n	800331a <UART_SetConfig+0x2fe>
 8003224:	2308      	movs	r3, #8
 8003226:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800322a:	e076      	b.n	800331a <UART_SetConfig+0x2fe>
 800322c:	2310      	movs	r3, #16
 800322e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003232:	e072      	b.n	800331a <UART_SetConfig+0x2fe>
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a35      	ldr	r2, [pc, #212]	@ (8003310 <UART_SetConfig+0x2f4>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d12a      	bne.n	8003294 <UART_SetConfig+0x278>
 800323e:	4b30      	ldr	r3, [pc, #192]	@ (8003300 <UART_SetConfig+0x2e4>)
 8003240:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003244:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003248:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800324c:	d01a      	beq.n	8003284 <UART_SetConfig+0x268>
 800324e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003252:	d81b      	bhi.n	800328c <UART_SetConfig+0x270>
 8003254:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003258:	d00c      	beq.n	8003274 <UART_SetConfig+0x258>
 800325a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800325e:	d815      	bhi.n	800328c <UART_SetConfig+0x270>
 8003260:	2b00      	cmp	r3, #0
 8003262:	d003      	beq.n	800326c <UART_SetConfig+0x250>
 8003264:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003268:	d008      	beq.n	800327c <UART_SetConfig+0x260>
 800326a:	e00f      	b.n	800328c <UART_SetConfig+0x270>
 800326c:	2300      	movs	r3, #0
 800326e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003272:	e052      	b.n	800331a <UART_SetConfig+0x2fe>
 8003274:	2302      	movs	r3, #2
 8003276:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800327a:	e04e      	b.n	800331a <UART_SetConfig+0x2fe>
 800327c:	2304      	movs	r3, #4
 800327e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003282:	e04a      	b.n	800331a <UART_SetConfig+0x2fe>
 8003284:	2308      	movs	r3, #8
 8003286:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800328a:	e046      	b.n	800331a <UART_SetConfig+0x2fe>
 800328c:	2310      	movs	r3, #16
 800328e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003292:	e042      	b.n	800331a <UART_SetConfig+0x2fe>
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a17      	ldr	r2, [pc, #92]	@ (80032f8 <UART_SetConfig+0x2dc>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d13a      	bne.n	8003314 <UART_SetConfig+0x2f8>
 800329e:	4b18      	ldr	r3, [pc, #96]	@ (8003300 <UART_SetConfig+0x2e4>)
 80032a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032a4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80032a8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80032ac:	d01a      	beq.n	80032e4 <UART_SetConfig+0x2c8>
 80032ae:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80032b2:	d81b      	bhi.n	80032ec <UART_SetConfig+0x2d0>
 80032b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80032b8:	d00c      	beq.n	80032d4 <UART_SetConfig+0x2b8>
 80032ba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80032be:	d815      	bhi.n	80032ec <UART_SetConfig+0x2d0>
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d003      	beq.n	80032cc <UART_SetConfig+0x2b0>
 80032c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032c8:	d008      	beq.n	80032dc <UART_SetConfig+0x2c0>
 80032ca:	e00f      	b.n	80032ec <UART_SetConfig+0x2d0>
 80032cc:	2300      	movs	r3, #0
 80032ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80032d2:	e022      	b.n	800331a <UART_SetConfig+0x2fe>
 80032d4:	2302      	movs	r3, #2
 80032d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80032da:	e01e      	b.n	800331a <UART_SetConfig+0x2fe>
 80032dc:	2304      	movs	r3, #4
 80032de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80032e2:	e01a      	b.n	800331a <UART_SetConfig+0x2fe>
 80032e4:	2308      	movs	r3, #8
 80032e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80032ea:	e016      	b.n	800331a <UART_SetConfig+0x2fe>
 80032ec:	2310      	movs	r3, #16
 80032ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80032f2:	e012      	b.n	800331a <UART_SetConfig+0x2fe>
 80032f4:	cfff69f3 	.word	0xcfff69f3
 80032f8:	40008000 	.word	0x40008000
 80032fc:	40013800 	.word	0x40013800
 8003300:	40021000 	.word	0x40021000
 8003304:	40004400 	.word	0x40004400
 8003308:	40004800 	.word	0x40004800
 800330c:	40004c00 	.word	0x40004c00
 8003310:	40005000 	.word	0x40005000
 8003314:	2310      	movs	r3, #16
 8003316:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4aae      	ldr	r2, [pc, #696]	@ (80035d8 <UART_SetConfig+0x5bc>)
 8003320:	4293      	cmp	r3, r2
 8003322:	f040 8097 	bne.w	8003454 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003326:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800332a:	2b08      	cmp	r3, #8
 800332c:	d823      	bhi.n	8003376 <UART_SetConfig+0x35a>
 800332e:	a201      	add	r2, pc, #4	@ (adr r2, 8003334 <UART_SetConfig+0x318>)
 8003330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003334:	08003359 	.word	0x08003359
 8003338:	08003377 	.word	0x08003377
 800333c:	08003361 	.word	0x08003361
 8003340:	08003377 	.word	0x08003377
 8003344:	08003367 	.word	0x08003367
 8003348:	08003377 	.word	0x08003377
 800334c:	08003377 	.word	0x08003377
 8003350:	08003377 	.word	0x08003377
 8003354:	0800336f 	.word	0x0800336f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003358:	f7ff f804 	bl	8002364 <HAL_RCC_GetPCLK1Freq>
 800335c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800335e:	e010      	b.n	8003382 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003360:	4b9e      	ldr	r3, [pc, #632]	@ (80035dc <UART_SetConfig+0x5c0>)
 8003362:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003364:	e00d      	b.n	8003382 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003366:	f7fe ff8f 	bl	8002288 <HAL_RCC_GetSysClockFreq>
 800336a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800336c:	e009      	b.n	8003382 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800336e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003372:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003374:	e005      	b.n	8003382 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8003376:	2300      	movs	r3, #0
 8003378:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003380:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003384:	2b00      	cmp	r3, #0
 8003386:	f000 8130 	beq.w	80035ea <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800338e:	4a94      	ldr	r2, [pc, #592]	@ (80035e0 <UART_SetConfig+0x5c4>)
 8003390:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003394:	461a      	mov	r2, r3
 8003396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003398:	fbb3 f3f2 	udiv	r3, r3, r2
 800339c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	685a      	ldr	r2, [r3, #4]
 80033a2:	4613      	mov	r3, r2
 80033a4:	005b      	lsls	r3, r3, #1
 80033a6:	4413      	add	r3, r2
 80033a8:	69ba      	ldr	r2, [r7, #24]
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d305      	bcc.n	80033ba <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80033b4:	69ba      	ldr	r2, [r7, #24]
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d903      	bls.n	80033c2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80033c0:	e113      	b.n	80035ea <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80033c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033c4:	2200      	movs	r2, #0
 80033c6:	60bb      	str	r3, [r7, #8]
 80033c8:	60fa      	str	r2, [r7, #12]
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ce:	4a84      	ldr	r2, [pc, #528]	@ (80035e0 <UART_SetConfig+0x5c4>)
 80033d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80033d4:	b29b      	uxth	r3, r3
 80033d6:	2200      	movs	r2, #0
 80033d8:	603b      	str	r3, [r7, #0]
 80033da:	607a      	str	r2, [r7, #4]
 80033dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80033e0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80033e4:	f7fc ff18 	bl	8000218 <__aeabi_uldivmod>
 80033e8:	4602      	mov	r2, r0
 80033ea:	460b      	mov	r3, r1
 80033ec:	4610      	mov	r0, r2
 80033ee:	4619      	mov	r1, r3
 80033f0:	f04f 0200 	mov.w	r2, #0
 80033f4:	f04f 0300 	mov.w	r3, #0
 80033f8:	020b      	lsls	r3, r1, #8
 80033fa:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80033fe:	0202      	lsls	r2, r0, #8
 8003400:	6979      	ldr	r1, [r7, #20]
 8003402:	6849      	ldr	r1, [r1, #4]
 8003404:	0849      	lsrs	r1, r1, #1
 8003406:	2000      	movs	r0, #0
 8003408:	460c      	mov	r4, r1
 800340a:	4605      	mov	r5, r0
 800340c:	eb12 0804 	adds.w	r8, r2, r4
 8003410:	eb43 0905 	adc.w	r9, r3, r5
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	469a      	mov	sl, r3
 800341c:	4693      	mov	fp, r2
 800341e:	4652      	mov	r2, sl
 8003420:	465b      	mov	r3, fp
 8003422:	4640      	mov	r0, r8
 8003424:	4649      	mov	r1, r9
 8003426:	f7fc fef7 	bl	8000218 <__aeabi_uldivmod>
 800342a:	4602      	mov	r2, r0
 800342c:	460b      	mov	r3, r1
 800342e:	4613      	mov	r3, r2
 8003430:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003432:	6a3b      	ldr	r3, [r7, #32]
 8003434:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003438:	d308      	bcc.n	800344c <UART_SetConfig+0x430>
 800343a:	6a3b      	ldr	r3, [r7, #32]
 800343c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003440:	d204      	bcs.n	800344c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	6a3a      	ldr	r2, [r7, #32]
 8003448:	60da      	str	r2, [r3, #12]
 800344a:	e0ce      	b.n	80035ea <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003452:	e0ca      	b.n	80035ea <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	69db      	ldr	r3, [r3, #28]
 8003458:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800345c:	d166      	bne.n	800352c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800345e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003462:	2b08      	cmp	r3, #8
 8003464:	d827      	bhi.n	80034b6 <UART_SetConfig+0x49a>
 8003466:	a201      	add	r2, pc, #4	@ (adr r2, 800346c <UART_SetConfig+0x450>)
 8003468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800346c:	08003491 	.word	0x08003491
 8003470:	08003499 	.word	0x08003499
 8003474:	080034a1 	.word	0x080034a1
 8003478:	080034b7 	.word	0x080034b7
 800347c:	080034a7 	.word	0x080034a7
 8003480:	080034b7 	.word	0x080034b7
 8003484:	080034b7 	.word	0x080034b7
 8003488:	080034b7 	.word	0x080034b7
 800348c:	080034af 	.word	0x080034af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003490:	f7fe ff68 	bl	8002364 <HAL_RCC_GetPCLK1Freq>
 8003494:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003496:	e014      	b.n	80034c2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003498:	f7fe ff7a 	bl	8002390 <HAL_RCC_GetPCLK2Freq>
 800349c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800349e:	e010      	b.n	80034c2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034a0:	4b4e      	ldr	r3, [pc, #312]	@ (80035dc <UART_SetConfig+0x5c0>)
 80034a2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80034a4:	e00d      	b.n	80034c2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034a6:	f7fe feef 	bl	8002288 <HAL_RCC_GetSysClockFreq>
 80034aa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80034ac:	e009      	b.n	80034c2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80034b2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80034b4:	e005      	b.n	80034c2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80034b6:	2300      	movs	r3, #0
 80034b8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80034c0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80034c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	f000 8090 	beq.w	80035ea <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ce:	4a44      	ldr	r2, [pc, #272]	@ (80035e0 <UART_SetConfig+0x5c4>)
 80034d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80034d4:	461a      	mov	r2, r3
 80034d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80034dc:	005a      	lsls	r2, r3, #1
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	085b      	lsrs	r3, r3, #1
 80034e4:	441a      	add	r2, r3
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80034ee:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034f0:	6a3b      	ldr	r3, [r7, #32]
 80034f2:	2b0f      	cmp	r3, #15
 80034f4:	d916      	bls.n	8003524 <UART_SetConfig+0x508>
 80034f6:	6a3b      	ldr	r3, [r7, #32]
 80034f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034fc:	d212      	bcs.n	8003524 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80034fe:	6a3b      	ldr	r3, [r7, #32]
 8003500:	b29b      	uxth	r3, r3
 8003502:	f023 030f 	bic.w	r3, r3, #15
 8003506:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003508:	6a3b      	ldr	r3, [r7, #32]
 800350a:	085b      	lsrs	r3, r3, #1
 800350c:	b29b      	uxth	r3, r3
 800350e:	f003 0307 	and.w	r3, r3, #7
 8003512:	b29a      	uxth	r2, r3
 8003514:	8bfb      	ldrh	r3, [r7, #30]
 8003516:	4313      	orrs	r3, r2
 8003518:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	8bfa      	ldrh	r2, [r7, #30]
 8003520:	60da      	str	r2, [r3, #12]
 8003522:	e062      	b.n	80035ea <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800352a:	e05e      	b.n	80035ea <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800352c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003530:	2b08      	cmp	r3, #8
 8003532:	d828      	bhi.n	8003586 <UART_SetConfig+0x56a>
 8003534:	a201      	add	r2, pc, #4	@ (adr r2, 800353c <UART_SetConfig+0x520>)
 8003536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800353a:	bf00      	nop
 800353c:	08003561 	.word	0x08003561
 8003540:	08003569 	.word	0x08003569
 8003544:	08003571 	.word	0x08003571
 8003548:	08003587 	.word	0x08003587
 800354c:	08003577 	.word	0x08003577
 8003550:	08003587 	.word	0x08003587
 8003554:	08003587 	.word	0x08003587
 8003558:	08003587 	.word	0x08003587
 800355c:	0800357f 	.word	0x0800357f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003560:	f7fe ff00 	bl	8002364 <HAL_RCC_GetPCLK1Freq>
 8003564:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003566:	e014      	b.n	8003592 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003568:	f7fe ff12 	bl	8002390 <HAL_RCC_GetPCLK2Freq>
 800356c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800356e:	e010      	b.n	8003592 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003570:	4b1a      	ldr	r3, [pc, #104]	@ (80035dc <UART_SetConfig+0x5c0>)
 8003572:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003574:	e00d      	b.n	8003592 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003576:	f7fe fe87 	bl	8002288 <HAL_RCC_GetSysClockFreq>
 800357a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800357c:	e009      	b.n	8003592 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800357e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003582:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003584:	e005      	b.n	8003592 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8003586:	2300      	movs	r3, #0
 8003588:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003590:	bf00      	nop
    }

    if (pclk != 0U)
 8003592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003594:	2b00      	cmp	r3, #0
 8003596:	d028      	beq.n	80035ea <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800359c:	4a10      	ldr	r2, [pc, #64]	@ (80035e0 <UART_SetConfig+0x5c4>)
 800359e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80035a2:	461a      	mov	r2, r3
 80035a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035a6:	fbb3 f2f2 	udiv	r2, r3, r2
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	085b      	lsrs	r3, r3, #1
 80035b0:	441a      	add	r2, r3
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80035ba:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035bc:	6a3b      	ldr	r3, [r7, #32]
 80035be:	2b0f      	cmp	r3, #15
 80035c0:	d910      	bls.n	80035e4 <UART_SetConfig+0x5c8>
 80035c2:	6a3b      	ldr	r3, [r7, #32]
 80035c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035c8:	d20c      	bcs.n	80035e4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80035ca:	6a3b      	ldr	r3, [r7, #32]
 80035cc:	b29a      	uxth	r2, r3
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	60da      	str	r2, [r3, #12]
 80035d4:	e009      	b.n	80035ea <UART_SetConfig+0x5ce>
 80035d6:	bf00      	nop
 80035d8:	40008000 	.word	0x40008000
 80035dc:	00f42400 	.word	0x00f42400
 80035e0:	08003cf4 	.word	0x08003cf4
      }
      else
      {
        ret = HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	2201      	movs	r2, #1
 80035ee:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	2201      	movs	r2, #1
 80035f6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	2200      	movs	r2, #0
 80035fe:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	2200      	movs	r2, #0
 8003604:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003606:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800360a:	4618      	mov	r0, r3
 800360c:	3730      	adds	r7, #48	@ 0x30
 800360e:	46bd      	mov	sp, r7
 8003610:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003614 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003614:	b480      	push	{r7}
 8003616:	b083      	sub	sp, #12
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003620:	f003 0308 	and.w	r3, r3, #8
 8003624:	2b00      	cmp	r3, #0
 8003626:	d00a      	beq.n	800363e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	430a      	orrs	r2, r1
 800363c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003642:	f003 0301 	and.w	r3, r3, #1
 8003646:	2b00      	cmp	r3, #0
 8003648:	d00a      	beq.n	8003660 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	430a      	orrs	r2, r1
 800365e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003664:	f003 0302 	and.w	r3, r3, #2
 8003668:	2b00      	cmp	r3, #0
 800366a:	d00a      	beq.n	8003682 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	430a      	orrs	r2, r1
 8003680:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003686:	f003 0304 	and.w	r3, r3, #4
 800368a:	2b00      	cmp	r3, #0
 800368c:	d00a      	beq.n	80036a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	430a      	orrs	r2, r1
 80036a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036a8:	f003 0310 	and.w	r3, r3, #16
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d00a      	beq.n	80036c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	430a      	orrs	r2, r1
 80036c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036ca:	f003 0320 	and.w	r3, r3, #32
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d00a      	beq.n	80036e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	430a      	orrs	r2, r1
 80036e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d01a      	beq.n	800372a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	430a      	orrs	r2, r1
 8003708:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800370e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003712:	d10a      	bne.n	800372a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	430a      	orrs	r2, r1
 8003728:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800372e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003732:	2b00      	cmp	r3, #0
 8003734:	d00a      	beq.n	800374c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	430a      	orrs	r2, r1
 800374a:	605a      	str	r2, [r3, #4]
  }
}
 800374c:	bf00      	nop
 800374e:	370c      	adds	r7, #12
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr

08003758 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b098      	sub	sp, #96	@ 0x60
 800375c:	af02      	add	r7, sp, #8
 800375e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2200      	movs	r2, #0
 8003764:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003768:	f7fd fb1c 	bl	8000da4 <HAL_GetTick>
 800376c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 0308 	and.w	r3, r3, #8
 8003778:	2b08      	cmp	r3, #8
 800377a:	d12f      	bne.n	80037dc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800377c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003780:	9300      	str	r3, [sp, #0]
 8003782:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003784:	2200      	movs	r2, #0
 8003786:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f000 f88e 	bl	80038ac <UART_WaitOnFlagUntilTimeout>
 8003790:	4603      	mov	r3, r0
 8003792:	2b00      	cmp	r3, #0
 8003794:	d022      	beq.n	80037dc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800379c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800379e:	e853 3f00 	ldrex	r3, [r3]
 80037a2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80037a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80037aa:	653b      	str	r3, [r7, #80]	@ 0x50
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	461a      	mov	r2, r3
 80037b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80037b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80037b6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037b8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80037ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80037bc:	e841 2300 	strex	r3, r2, [r1]
 80037c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80037c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d1e6      	bne.n	8003796 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2220      	movs	r2, #32
 80037cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2200      	movs	r2, #0
 80037d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037d8:	2303      	movs	r3, #3
 80037da:	e063      	b.n	80038a4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 0304 	and.w	r3, r3, #4
 80037e6:	2b04      	cmp	r3, #4
 80037e8:	d149      	bne.n	800387e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037ea:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80037ee:	9300      	str	r3, [sp, #0]
 80037f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037f2:	2200      	movs	r2, #0
 80037f4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	f000 f857 	bl	80038ac <UART_WaitOnFlagUntilTimeout>
 80037fe:	4603      	mov	r3, r0
 8003800:	2b00      	cmp	r3, #0
 8003802:	d03c      	beq.n	800387e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800380a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800380c:	e853 3f00 	ldrex	r3, [r3]
 8003810:	623b      	str	r3, [r7, #32]
   return(result);
 8003812:	6a3b      	ldr	r3, [r7, #32]
 8003814:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003818:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	461a      	mov	r2, r3
 8003820:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003822:	633b      	str	r3, [r7, #48]	@ 0x30
 8003824:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003826:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003828:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800382a:	e841 2300 	strex	r3, r2, [r1]
 800382e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003830:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003832:	2b00      	cmp	r3, #0
 8003834:	d1e6      	bne.n	8003804 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	3308      	adds	r3, #8
 800383c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	e853 3f00 	ldrex	r3, [r3]
 8003844:	60fb      	str	r3, [r7, #12]
   return(result);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	f023 0301 	bic.w	r3, r3, #1
 800384c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	3308      	adds	r3, #8
 8003854:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003856:	61fa      	str	r2, [r7, #28]
 8003858:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800385a:	69b9      	ldr	r1, [r7, #24]
 800385c:	69fa      	ldr	r2, [r7, #28]
 800385e:	e841 2300 	strex	r3, r2, [r1]
 8003862:	617b      	str	r3, [r7, #20]
   return(result);
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d1e5      	bne.n	8003836 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2220      	movs	r2, #32
 800386e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800387a:	2303      	movs	r3, #3
 800387c:	e012      	b.n	80038a4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2220      	movs	r2, #32
 8003882:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2220      	movs	r2, #32
 800388a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2200      	movs	r2, #0
 8003898:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2200      	movs	r2, #0
 800389e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80038a2:	2300      	movs	r3, #0
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3758      	adds	r7, #88	@ 0x58
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}

080038ac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b084      	sub	sp, #16
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	60f8      	str	r0, [r7, #12]
 80038b4:	60b9      	str	r1, [r7, #8]
 80038b6:	603b      	str	r3, [r7, #0]
 80038b8:	4613      	mov	r3, r2
 80038ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038bc:	e04f      	b.n	800395e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038be:	69bb      	ldr	r3, [r7, #24]
 80038c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038c4:	d04b      	beq.n	800395e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038c6:	f7fd fa6d 	bl	8000da4 <HAL_GetTick>
 80038ca:	4602      	mov	r2, r0
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	69ba      	ldr	r2, [r7, #24]
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d302      	bcc.n	80038dc <UART_WaitOnFlagUntilTimeout+0x30>
 80038d6:	69bb      	ldr	r3, [r7, #24]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d101      	bne.n	80038e0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80038dc:	2303      	movs	r3, #3
 80038de:	e04e      	b.n	800397e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0304 	and.w	r3, r3, #4
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d037      	beq.n	800395e <UART_WaitOnFlagUntilTimeout+0xb2>
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	2b80      	cmp	r3, #128	@ 0x80
 80038f2:	d034      	beq.n	800395e <UART_WaitOnFlagUntilTimeout+0xb2>
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	2b40      	cmp	r3, #64	@ 0x40
 80038f8:	d031      	beq.n	800395e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	69db      	ldr	r3, [r3, #28]
 8003900:	f003 0308 	and.w	r3, r3, #8
 8003904:	2b08      	cmp	r3, #8
 8003906:	d110      	bne.n	800392a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	2208      	movs	r2, #8
 800390e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003910:	68f8      	ldr	r0, [r7, #12]
 8003912:	f000 f838 	bl	8003986 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2208      	movs	r2, #8
 800391a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2200      	movs	r2, #0
 8003922:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e029      	b.n	800397e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	69db      	ldr	r3, [r3, #28]
 8003930:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003934:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003938:	d111      	bne.n	800395e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003942:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003944:	68f8      	ldr	r0, [r7, #12]
 8003946:	f000 f81e 	bl	8003986 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2220      	movs	r2, #32
 800394e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2200      	movs	r2, #0
 8003956:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	e00f      	b.n	800397e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	69da      	ldr	r2, [r3, #28]
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	4013      	ands	r3, r2
 8003968:	68ba      	ldr	r2, [r7, #8]
 800396a:	429a      	cmp	r2, r3
 800396c:	bf0c      	ite	eq
 800396e:	2301      	moveq	r3, #1
 8003970:	2300      	movne	r3, #0
 8003972:	b2db      	uxtb	r3, r3
 8003974:	461a      	mov	r2, r3
 8003976:	79fb      	ldrb	r3, [r7, #7]
 8003978:	429a      	cmp	r2, r3
 800397a:	d0a0      	beq.n	80038be <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800397c:	2300      	movs	r3, #0
}
 800397e:	4618      	mov	r0, r3
 8003980:	3710      	adds	r7, #16
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}

08003986 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003986:	b480      	push	{r7}
 8003988:	b095      	sub	sp, #84	@ 0x54
 800398a:	af00      	add	r7, sp, #0
 800398c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003994:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003996:	e853 3f00 	ldrex	r3, [r3]
 800399a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800399c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800399e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80039a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	461a      	mov	r2, r3
 80039aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80039ac:	643b      	str	r3, [r7, #64]	@ 0x40
 80039ae:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039b0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80039b2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80039b4:	e841 2300 	strex	r3, r2, [r1]
 80039b8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80039ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d1e6      	bne.n	800398e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	3308      	adds	r3, #8
 80039c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039c8:	6a3b      	ldr	r3, [r7, #32]
 80039ca:	e853 3f00 	ldrex	r3, [r3]
 80039ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80039d6:	f023 0301 	bic.w	r3, r3, #1
 80039da:	64bb      	str	r3, [r7, #72]	@ 0x48
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	3308      	adds	r3, #8
 80039e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80039e4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80039e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80039ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80039ec:	e841 2300 	strex	r3, r2, [r1]
 80039f0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80039f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d1e3      	bne.n	80039c0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d118      	bne.n	8003a32 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	e853 3f00 	ldrex	r3, [r3]
 8003a0c:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	f023 0310 	bic.w	r3, r3, #16
 8003a14:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	461a      	mov	r2, r3
 8003a1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a1e:	61bb      	str	r3, [r7, #24]
 8003a20:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a22:	6979      	ldr	r1, [r7, #20]
 8003a24:	69ba      	ldr	r2, [r7, #24]
 8003a26:	e841 2300 	strex	r3, r2, [r1]
 8003a2a:	613b      	str	r3, [r7, #16]
   return(result);
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d1e6      	bne.n	8003a00 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2220      	movs	r2, #32
 8003a36:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003a46:	bf00      	nop
 8003a48:	3754      	adds	r7, #84	@ 0x54
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr

08003a52 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003a52:	b480      	push	{r7}
 8003a54:	b085      	sub	sp, #20
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d101      	bne.n	8003a68 <HAL_UARTEx_DisableFifoMode+0x16>
 8003a64:	2302      	movs	r3, #2
 8003a66:	e027      	b.n	8003ab8 <HAL_UARTEx_DisableFifoMode+0x66>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2224      	movs	r2, #36	@ 0x24
 8003a74:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f022 0201 	bic.w	r2, r2, #1
 8003a8e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8003a96:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	68fa      	ldr	r2, [r7, #12]
 8003aa4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2220      	movs	r2, #32
 8003aaa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003ab6:	2300      	movs	r3, #0
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3714      	adds	r7, #20
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr

08003ac4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b084      	sub	sp, #16
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d101      	bne.n	8003adc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003ad8:	2302      	movs	r3, #2
 8003ada:	e02d      	b.n	8003b38 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2224      	movs	r2, #36	@ 0x24
 8003ae8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f022 0201 	bic.w	r2, r2, #1
 8003b02:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	683a      	ldr	r2, [r7, #0]
 8003b14:	430a      	orrs	r2, r1
 8003b16:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	f000 f84f 	bl	8003bbc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	68fa      	ldr	r2, [r7, #12]
 8003b24:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2220      	movs	r2, #32
 8003b2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003b36:	2300      	movs	r3, #0
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3710      	adds	r7, #16
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}

08003b40 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b084      	sub	sp, #16
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d101      	bne.n	8003b58 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003b54:	2302      	movs	r3, #2
 8003b56:	e02d      	b.n	8003bb4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2224      	movs	r2, #36	@ 0x24
 8003b64:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f022 0201 	bic.w	r2, r2, #1
 8003b7e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	683a      	ldr	r2, [r7, #0]
 8003b90:	430a      	orrs	r2, r1
 8003b92:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	f000 f811 	bl	8003bbc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	68fa      	ldr	r2, [r7, #12]
 8003ba0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2220      	movs	r2, #32
 8003ba6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003bb2:	2300      	movs	r3, #0
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3710      	adds	r7, #16
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}

08003bbc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b085      	sub	sp, #20
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d108      	bne.n	8003bde <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003bdc:	e031      	b.n	8003c42 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003bde:	2308      	movs	r3, #8
 8003be0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003be2:	2308      	movs	r3, #8
 8003be4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	0e5b      	lsrs	r3, r3, #25
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	f003 0307 	and.w	r3, r3, #7
 8003bf4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	0f5b      	lsrs	r3, r3, #29
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	f003 0307 	and.w	r3, r3, #7
 8003c04:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003c06:	7bbb      	ldrb	r3, [r7, #14]
 8003c08:	7b3a      	ldrb	r2, [r7, #12]
 8003c0a:	4911      	ldr	r1, [pc, #68]	@ (8003c50 <UARTEx_SetNbDataToProcess+0x94>)
 8003c0c:	5c8a      	ldrb	r2, [r1, r2]
 8003c0e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003c12:	7b3a      	ldrb	r2, [r7, #12]
 8003c14:	490f      	ldr	r1, [pc, #60]	@ (8003c54 <UARTEx_SetNbDataToProcess+0x98>)
 8003c16:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003c18:	fb93 f3f2 	sdiv	r3, r3, r2
 8003c1c:	b29a      	uxth	r2, r3
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003c24:	7bfb      	ldrb	r3, [r7, #15]
 8003c26:	7b7a      	ldrb	r2, [r7, #13]
 8003c28:	4909      	ldr	r1, [pc, #36]	@ (8003c50 <UARTEx_SetNbDataToProcess+0x94>)
 8003c2a:	5c8a      	ldrb	r2, [r1, r2]
 8003c2c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003c30:	7b7a      	ldrb	r2, [r7, #13]
 8003c32:	4908      	ldr	r1, [pc, #32]	@ (8003c54 <UARTEx_SetNbDataToProcess+0x98>)
 8003c34:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003c36:	fb93 f3f2 	sdiv	r3, r3, r2
 8003c3a:	b29a      	uxth	r2, r3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8003c42:	bf00      	nop
 8003c44:	3714      	adds	r7, #20
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr
 8003c4e:	bf00      	nop
 8003c50:	08003d0c 	.word	0x08003d0c
 8003c54:	08003d14 	.word	0x08003d14

08003c58 <memset>:
 8003c58:	4402      	add	r2, r0
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d100      	bne.n	8003c62 <memset+0xa>
 8003c60:	4770      	bx	lr
 8003c62:	f803 1b01 	strb.w	r1, [r3], #1
 8003c66:	e7f9      	b.n	8003c5c <memset+0x4>

08003c68 <__libc_init_array>:
 8003c68:	b570      	push	{r4, r5, r6, lr}
 8003c6a:	4d0d      	ldr	r5, [pc, #52]	@ (8003ca0 <__libc_init_array+0x38>)
 8003c6c:	4c0d      	ldr	r4, [pc, #52]	@ (8003ca4 <__libc_init_array+0x3c>)
 8003c6e:	1b64      	subs	r4, r4, r5
 8003c70:	10a4      	asrs	r4, r4, #2
 8003c72:	2600      	movs	r6, #0
 8003c74:	42a6      	cmp	r6, r4
 8003c76:	d109      	bne.n	8003c8c <__libc_init_array+0x24>
 8003c78:	4d0b      	ldr	r5, [pc, #44]	@ (8003ca8 <__libc_init_array+0x40>)
 8003c7a:	4c0c      	ldr	r4, [pc, #48]	@ (8003cac <__libc_init_array+0x44>)
 8003c7c:	f000 f818 	bl	8003cb0 <_init>
 8003c80:	1b64      	subs	r4, r4, r5
 8003c82:	10a4      	asrs	r4, r4, #2
 8003c84:	2600      	movs	r6, #0
 8003c86:	42a6      	cmp	r6, r4
 8003c88:	d105      	bne.n	8003c96 <__libc_init_array+0x2e>
 8003c8a:	bd70      	pop	{r4, r5, r6, pc}
 8003c8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c90:	4798      	blx	r3
 8003c92:	3601      	adds	r6, #1
 8003c94:	e7ee      	b.n	8003c74 <__libc_init_array+0xc>
 8003c96:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c9a:	4798      	blx	r3
 8003c9c:	3601      	adds	r6, #1
 8003c9e:	e7f2      	b.n	8003c86 <__libc_init_array+0x1e>
 8003ca0:	08003d24 	.word	0x08003d24
 8003ca4:	08003d24 	.word	0x08003d24
 8003ca8:	08003d24 	.word	0x08003d24
 8003cac:	08003d28 	.word	0x08003d28

08003cb0 <_init>:
 8003cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cb2:	bf00      	nop
 8003cb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cb6:	bc08      	pop	{r3}
 8003cb8:	469e      	mov	lr, r3
 8003cba:	4770      	bx	lr

08003cbc <_fini>:
 8003cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cbe:	bf00      	nop
 8003cc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cc2:	bc08      	pop	{r3}
 8003cc4:	469e      	mov	lr, r3
 8003cc6:	4770      	bx	lr
